/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["pages/index"],{

/***/ "./node_modules/@mui/icons-material/Close.js":
/*!***************************************************!*\
  !*** ./node_modules/@mui/icons-material/Close.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@mui/icons-material/utils/createSvgIcon.js\"));\n\nvar _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ \"./node_modules/react/jsx-runtime.js\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');\n\nexports[\"default\"] = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG11aS9pY29ucy1tYXRlcmlhbC9DbG9zZS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw2QkFBNkIsbUJBQU8sQ0FBQyxvSEFBOEM7O0FBRW5GLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGtCQUFlOztBQUVmLDRDQUE0QyxtQkFBTyxDQUFDLHdGQUF1Qjs7QUFFM0Usa0JBQWtCLG1CQUFPLENBQUMsOERBQW1COztBQUU3QztBQUNBO0FBQ0EsQ0FBQzs7QUFFRCxrQkFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG11aS9pY29ucy1tYXRlcmlhbC9DbG9zZS5qcz9kZmM1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9qc3hSdW50aW1lID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoIC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShcInBhdGhcIiwge1xuICBkOiBcIk0xOSA2LjQxIDE3LjU5IDUgMTIgMTAuNTkgNi40MSA1IDUgNi40MSAxMC41OSAxMiA1IDE3LjU5IDYuNDEgMTkgMTIgMTMuNDEgMTcuNTkgMTkgMTkgMTcuNTkgMTMuNDEgMTJ6XCJcbn0pLCAnQ2xvc2UnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@mui/icons-material/Close.js\n");

/***/ }),

/***/ "./node_modules/@mui/icons-material/Fullscreen.js":
/*!********************************************************!*\
  !*** ./node_modules/@mui/icons-material/Fullscreen.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@mui/icons-material/utils/createSvgIcon.js\"));\n\nvar _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ \"./node_modules/react/jsx-runtime.js\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z\"\n}), 'Fullscreen');\n\nexports[\"default\"] = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG11aS9pY29ucy1tYXRlcmlhbC9GdWxsc2NyZWVuLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDZCQUE2QixtQkFBTyxDQUFDLG9IQUE4Qzs7QUFFbkYsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7O0FBRWYsNENBQTRDLG1CQUFPLENBQUMsd0ZBQXVCOztBQUUzRSxrQkFBa0IsbUJBQU8sQ0FBQyw4REFBbUI7O0FBRTdDO0FBQ0E7QUFDQSxDQUFDOztBQUVELGtCQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL0Z1bGxzY3JlZW4uanM/NGQ5YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfanN4UnVudGltZSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoXCJwYXRoXCIsIHtcbiAgZDogXCJNNyAxNEg1djVoNXYtMkg3di0zem0tMi00aDJWN2gzVjVINXY1em0xMiA3aC0zdjJoNXYtNWgtMnYzek0xNCA1djJoM3YzaDJWNWgtNXpcIlxufSksICdGdWxsc2NyZWVuJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@mui/icons-material/Fullscreen.js\n");

/***/ }),

/***/ "./node_modules/@mui/icons-material/Link.js":
/*!**************************************************!*\
  !*** ./node_modules/@mui/icons-material/Link.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(__webpack_require__(/*! ./utils/createSvgIcon */ \"./node_modules/@mui/icons-material/utils/createSvgIcon.js\"));\n\nvar _jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ \"./node_modules/react/jsx-runtime.js\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z\"\n}), 'Link');\n\nexports[\"default\"] = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG11aS9pY29ucy1tYXRlcmlhbC9MaW5rLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDZCQUE2QixtQkFBTyxDQUFDLG9IQUE4Qzs7QUFFbkYsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7O0FBRWYsNENBQTRDLG1CQUFPLENBQUMsd0ZBQXVCOztBQUUzRSxrQkFBa0IsbUJBQU8sQ0FBQyw4REFBbUI7O0FBRTdDO0FBQ0E7QUFDQSxDQUFDOztBQUVELGtCQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL0xpbmsuanM/MGU3NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfanN4UnVudGltZSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoXCJwYXRoXCIsIHtcbiAgZDogXCJNMy45IDEyYzAtMS43MSAxLjM5LTMuMSAzLjEtMy4xaDRWN0g3Yy0yLjc2IDAtNSAyLjI0LTUgNXMyLjI0IDUgNSA1aDR2LTEuOUg3Yy0xLjcxIDAtMy4xLTEuMzktMy4xLTMuMXpNOCAxM2g4di0ySDh2MnptOS02aC00djEuOWg0YzEuNzEgMCAzLjEgMS4zOSAzLjEgMy4xcy0xLjM5IDMuMS0zLjEgMy4xaC00VjE3aDRjMi43NiAwIDUtMi4yNCA1LTVzLTIuMjQtNS01LTV6XCJcbn0pLCAnTGluaycpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@mui/icons-material/Link.js\n");

/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/dist/svg.esm.js":
/*!*******************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/dist/svg.esm.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"A\": function() { return /* binding */ A; },\n/* harmony export */   \"Animator\": function() { return /* binding */ Animator; },\n/* harmony export */   \"Array\": function() { return /* binding */ SVGArray; },\n/* harmony export */   \"Box\": function() { return /* binding */ Box; },\n/* harmony export */   \"Circle\": function() { return /* binding */ Circle; },\n/* harmony export */   \"ClipPath\": function() { return /* binding */ ClipPath; },\n/* harmony export */   \"Color\": function() { return /* binding */ Color; },\n/* harmony export */   \"Container\": function() { return /* binding */ Container; },\n/* harmony export */   \"Controller\": function() { return /* binding */ Controller; },\n/* harmony export */   \"Defs\": function() { return /* binding */ Defs; },\n/* harmony export */   \"Dom\": function() { return /* binding */ Dom; },\n/* harmony export */   \"Ease\": function() { return /* binding */ Ease; },\n/* harmony export */   \"Element\": function() { return /* binding */ Element; },\n/* harmony export */   \"Ellipse\": function() { return /* binding */ Ellipse; },\n/* harmony export */   \"EventTarget\": function() { return /* binding */ EventTarget; },\n/* harmony export */   \"ForeignObject\": function() { return /* binding */ ForeignObject; },\n/* harmony export */   \"Fragment\": function() { return /* binding */ Fragment; },\n/* harmony export */   \"G\": function() { return /* binding */ G; },\n/* harmony export */   \"Gradient\": function() { return /* binding */ Gradient; },\n/* harmony export */   \"Image\": function() { return /* binding */ Image; },\n/* harmony export */   \"Line\": function() { return /* binding */ Line; },\n/* harmony export */   \"List\": function() { return /* binding */ List; },\n/* harmony export */   \"Marker\": function() { return /* binding */ Marker; },\n/* harmony export */   \"Mask\": function() { return /* binding */ Mask; },\n/* harmony export */   \"Matrix\": function() { return /* binding */ Matrix; },\n/* harmony export */   \"Morphable\": function() { return /* binding */ Morphable; },\n/* harmony export */   \"NonMorphable\": function() { return /* binding */ NonMorphable; },\n/* harmony export */   \"Number\": function() { return /* binding */ SVGNumber; },\n/* harmony export */   \"ObjectBag\": function() { return /* binding */ ObjectBag; },\n/* harmony export */   \"PID\": function() { return /* binding */ PID; },\n/* harmony export */   \"Path\": function() { return /* binding */ Path; },\n/* harmony export */   \"PathArray\": function() { return /* binding */ PathArray; },\n/* harmony export */   \"Pattern\": function() { return /* binding */ Pattern; },\n/* harmony export */   \"Point\": function() { return /* binding */ Point; },\n/* harmony export */   \"PointArray\": function() { return /* binding */ PointArray; },\n/* harmony export */   \"Polygon\": function() { return /* binding */ Polygon; },\n/* harmony export */   \"Polyline\": function() { return /* binding */ Polyline; },\n/* harmony export */   \"Queue\": function() { return /* binding */ Queue; },\n/* harmony export */   \"Rect\": function() { return /* binding */ Rect; },\n/* harmony export */   \"Runner\": function() { return /* binding */ Runner; },\n/* harmony export */   \"SVG\": function() { return /* binding */ SVG; },\n/* harmony export */   \"Shape\": function() { return /* binding */ Shape; },\n/* harmony export */   \"Spring\": function() { return /* binding */ Spring; },\n/* harmony export */   \"Stop\": function() { return /* binding */ Stop; },\n/* harmony export */   \"Style\": function() { return /* binding */ Style; },\n/* harmony export */   \"Svg\": function() { return /* binding */ Svg; },\n/* harmony export */   \"Symbol\": function() { return /* binding */ Symbol; },\n/* harmony export */   \"Text\": function() { return /* binding */ Text; },\n/* harmony export */   \"TextPath\": function() { return /* binding */ TextPath; },\n/* harmony export */   \"Timeline\": function() { return /* binding */ Timeline; },\n/* harmony export */   \"TransformBag\": function() { return /* binding */ TransformBag; },\n/* harmony export */   \"Tspan\": function() { return /* binding */ Tspan; },\n/* harmony export */   \"Use\": function() { return /* binding */ Use; },\n/* harmony export */   \"adopt\": function() { return /* binding */ adopt; },\n/* harmony export */   \"assignNewId\": function() { return /* binding */ assignNewId; },\n/* harmony export */   \"clearEvents\": function() { return /* binding */ clearEvents; },\n/* harmony export */   \"create\": function() { return /* binding */ create; },\n/* harmony export */   \"defaults\": function() { return /* binding */ defaults; },\n/* harmony export */   \"dispatch\": function() { return /* binding */ dispatch; },\n/* harmony export */   \"easing\": function() { return /* binding */ easing; },\n/* harmony export */   \"eid\": function() { return /* binding */ eid; },\n/* harmony export */   \"extend\": function() { return /* binding */ extend; },\n/* harmony export */   \"find\": function() { return /* binding */ baseFind; },\n/* harmony export */   \"getClass\": function() { return /* binding */ getClass; },\n/* harmony export */   \"getEventTarget\": function() { return /* binding */ getEventTarget; },\n/* harmony export */   \"getEvents\": function() { return /* binding */ getEvents; },\n/* harmony export */   \"getWindow\": function() { return /* binding */ getWindow; },\n/* harmony export */   \"makeInstance\": function() { return /* binding */ makeInstance; },\n/* harmony export */   \"makeMorphable\": function() { return /* binding */ makeMorphable; },\n/* harmony export */   \"mockAdopt\": function() { return /* binding */ mockAdopt; },\n/* harmony export */   \"namespaces\": function() { return /* binding */ namespaces; },\n/* harmony export */   \"nodeOrNew\": function() { return /* binding */ nodeOrNew; },\n/* harmony export */   \"off\": function() { return /* binding */ off; },\n/* harmony export */   \"on\": function() { return /* binding */ on; },\n/* harmony export */   \"parser\": function() { return /* binding */ parser; },\n/* harmony export */   \"regex\": function() { return /* binding */ regex; },\n/* harmony export */   \"register\": function() { return /* binding */ register; },\n/* harmony export */   \"registerMorphableType\": function() { return /* binding */ registerMorphableType; },\n/* harmony export */   \"registerWindow\": function() { return /* binding */ registerWindow; },\n/* harmony export */   \"restoreWindow\": function() { return /* binding */ restoreWindow; },\n/* harmony export */   \"root\": function() { return /* binding */ root; },\n/* harmony export */   \"saveWindow\": function() { return /* binding */ saveWindow; },\n/* harmony export */   \"utils\": function() { return /* binding */ utils; },\n/* harmony export */   \"windowEvents\": function() { return /* binding */ windowEvents; },\n/* harmony export */   \"withWindow\": function() { return /* binding */ withWindow; },\n/* harmony export */   \"wrapWithAttrCheck\": function() { return /* binding */ wrapWithAttrCheck; }\n/* harmony export */ });\n/*!\n* @svgdotjs/svg.js - A lightweight library for manipulating and animating SVG.\n* @version 3.1.2\n* https://svgjs.dev/\n*\n* @copyright Wout Fierens <wout@mick-wout.com>\n* @license MIT\n*\n* BUILT: Wed Jan 26 2022 23:19:07 GMT+0100 (Mitteleuropäische Normalzeit)\n*/;\nconst methods$1 = {};\nconst names = [];\nfunction registerMethods(name, m) {\n  if (Array.isArray(name)) {\n    for (const _name of name) {\n      registerMethods(_name, m);\n    }\n\n    return;\n  }\n\n  if (typeof name === 'object') {\n    for (const _name in name) {\n      registerMethods(_name, name[_name]);\n    }\n\n    return;\n  }\n\n  addMethodNames(Object.getOwnPropertyNames(m));\n  methods$1[name] = Object.assign(methods$1[name] || {}, m);\n}\nfunction getMethodsFor(name) {\n  return methods$1[name] || {};\n}\nfunction getMethodNames() {\n  return [...new Set(names)];\n}\nfunction addMethodNames(_names) {\n  names.push(..._names);\n}\n\n// Map function\nfunction map(array, block) {\n  let i;\n  const il = array.length;\n  const result = [];\n\n  for (i = 0; i < il; i++) {\n    result.push(block(array[i]));\n  }\n\n  return result;\n} // Filter function\n\nfunction filter(array, block) {\n  let i;\n  const il = array.length;\n  const result = [];\n\n  for (i = 0; i < il; i++) {\n    if (block(array[i])) {\n      result.push(array[i]);\n    }\n  }\n\n  return result;\n} // Degrees to radians\n\nfunction radians(d) {\n  return d % 360 * Math.PI / 180;\n} // Radians to degrees\n\nfunction degrees(r) {\n  return r * 180 / Math.PI % 360;\n} // Convert dash-separated-string to camelCase\n\nfunction camelCase(s) {\n  return s.toLowerCase().replace(/-(.)/g, function (m, g) {\n    return g.toUpperCase();\n  });\n} // Convert camel cased string to dash separated\n\nfunction unCamelCase(s) {\n  return s.replace(/([A-Z])/g, function (m, g) {\n    return '-' + g.toLowerCase();\n  });\n} // Capitalize first letter of a string\n\nfunction capitalize(s) {\n  return s.charAt(0).toUpperCase() + s.slice(1);\n} // Calculate proportional width and height values when necessary\n\nfunction proportionalSize(element, width, height, box) {\n  if (width == null || height == null) {\n    box = box || element.bbox();\n\n    if (width == null) {\n      width = box.width / box.height * height;\n    } else if (height == null) {\n      height = box.height / box.width * width;\n    }\n  }\n\n  return {\n    width: width,\n    height: height\n  };\n}\n/**\r\n * This function adds support for string origins.\r\n * It searches for an origin in o.origin o.ox and o.originX.\r\n * This way, origin: {x: 'center', y: 50} can be passed as well as ox: 'center', oy: 50\r\n**/\n\nfunction getOrigin(o, element) {\n  const origin = o.origin; // First check if origin is in ox or originX\n\n  let ox = o.ox != null ? o.ox : o.originX != null ? o.originX : 'center';\n  let oy = o.oy != null ? o.oy : o.originY != null ? o.originY : 'center'; // Then check if origin was used and overwrite in that case\n\n  if (origin != null) {\n    [ox, oy] = Array.isArray(origin) ? origin : typeof origin === 'object' ? [origin.x, origin.y] : [origin, origin];\n  } // Make sure to only call bbox when actually needed\n\n\n  const condX = typeof ox === 'string';\n  const condY = typeof oy === 'string';\n\n  if (condX || condY) {\n    const {\n      height,\n      width,\n      x,\n      y\n    } = element.bbox(); // And only overwrite if string was passed for this specific axis\n\n    if (condX) {\n      ox = ox.includes('left') ? x : ox.includes('right') ? x + width : x + width / 2;\n    }\n\n    if (condY) {\n      oy = oy.includes('top') ? y : oy.includes('bottom') ? y + height : y + height / 2;\n    }\n  } // Return the origin as it is if it wasn't a string\n\n\n  return [ox, oy];\n}\n\nvar utils = {\n  __proto__: null,\n  map: map,\n  filter: filter,\n  radians: radians,\n  degrees: degrees,\n  camelCase: camelCase,\n  unCamelCase: unCamelCase,\n  capitalize: capitalize,\n  proportionalSize: proportionalSize,\n  getOrigin: getOrigin\n};\n\n// Default namespaces\nconst svg = 'http://www.w3.org/2000/svg';\nconst html = 'http://www.w3.org/1999/xhtml';\nconst xmlns = 'http://www.w3.org/2000/xmlns/';\nconst xlink = 'http://www.w3.org/1999/xlink';\nconst svgjs = 'http://svgjs.dev/svgjs';\n\nvar namespaces = {\n  __proto__: null,\n  svg: svg,\n  html: html,\n  xmlns: xmlns,\n  xlink: xlink,\n  svgjs: svgjs\n};\n\nconst globals = {\n  window: typeof window === 'undefined' ? null : window,\n  document: typeof document === 'undefined' ? null : document\n};\nfunction registerWindow(win = null, doc = null) {\n  globals.window = win;\n  globals.document = doc;\n}\nconst save = {};\nfunction saveWindow() {\n  save.window = globals.window;\n  save.document = globals.document;\n}\nfunction restoreWindow() {\n  globals.window = save.window;\n  globals.document = save.document;\n}\nfunction withWindow(win, fn) {\n  saveWindow();\n  registerWindow(win, win.document);\n  fn(win, win.document);\n  restoreWindow();\n}\nfunction getWindow() {\n  return globals.window;\n}\n\nclass Base {// constructor (node/*, {extensions = []} */) {\n  //   // this.tags = []\n  //   //\n  //   // for (let extension of extensions) {\n  //   //   extension.setup.call(this, node)\n  //   //   this.tags.push(extension.name)\n  //   // }\n  // }\n}\n\nconst elements = {};\nconst root = '___SYMBOL___ROOT___'; // Method for element creation\n\nfunction create(name, ns = svg) {\n  // create element\n  return globals.document.createElementNS(ns, name);\n}\nfunction makeInstance(element, isHTML = false) {\n  if (element instanceof Base) return element;\n\n  if (typeof element === 'object') {\n    return adopter(element);\n  }\n\n  if (element == null) {\n    return new elements[root]();\n  }\n\n  if (typeof element === 'string' && element.charAt(0) !== '<') {\n    return adopter(globals.document.querySelector(element));\n  } // Make sure, that HTML elements are created with the correct namespace\n\n\n  const wrapper = isHTML ? globals.document.createElement('div') : create('svg');\n  wrapper.innerHTML = element; // We can use firstChild here because we know,\n  // that the first char is < and thus an element\n\n  element = adopter(wrapper.firstChild); // make sure, that element doesnt have its wrapper attached\n\n  wrapper.removeChild(wrapper.firstChild);\n  return element;\n}\nfunction nodeOrNew(name, node) {\n  return node && node.ownerDocument && node instanceof node.ownerDocument.defaultView.Node ? node : create(name);\n} // Adopt existing svg elements\n\nfunction adopt(node) {\n  // check for presence of node\n  if (!node) return null; // make sure a node isn't already adopted\n\n  if (node.instance instanceof Base) return node.instance;\n\n  if (node.nodeName === '#document-fragment') {\n    return new elements.Fragment(node);\n  } // initialize variables\n\n\n  let className = capitalize(node.nodeName || 'Dom'); // Make sure that gradients are adopted correctly\n\n  if (className === 'LinearGradient' || className === 'RadialGradient') {\n    className = 'Gradient'; // Fallback to Dom if element is not known\n  } else if (!elements[className]) {\n    className = 'Dom';\n  }\n\n  return new elements[className](node);\n}\nlet adopter = adopt;\nfunction mockAdopt(mock = adopt) {\n  adopter = mock;\n}\nfunction register(element, name = element.name, asRoot = false) {\n  elements[name] = element;\n  if (asRoot) elements[root] = element;\n  addMethodNames(Object.getOwnPropertyNames(element.prototype));\n  return element;\n}\nfunction getClass(name) {\n  return elements[name];\n} // Element id sequence\n\nlet did = 1000; // Get next named element id\n\nfunction eid(name) {\n  return 'Svgjs' + capitalize(name) + did++;\n} // Deep new id assignment\n\nfunction assignNewId(node) {\n  // do the same for SVG child nodes as well\n  for (let i = node.children.length - 1; i >= 0; i--) {\n    assignNewId(node.children[i]);\n  }\n\n  if (node.id) {\n    node.id = eid(node.nodeName);\n    return node;\n  }\n\n  return node;\n} // Method for extending objects\n\nfunction extend(modules, methods) {\n  let key, i;\n  modules = Array.isArray(modules) ? modules : [modules];\n\n  for (i = modules.length - 1; i >= 0; i--) {\n    for (key in methods) {\n      modules[i].prototype[key] = methods[key];\n    }\n  }\n}\nfunction wrapWithAttrCheck(fn) {\n  return function (...args) {\n    const o = args[args.length - 1];\n\n    if (o && o.constructor === Object && !(o instanceof Array)) {\n      return fn.apply(this, args.slice(0, -1)).attr(o);\n    } else {\n      return fn.apply(this, args);\n    }\n  };\n}\n\nfunction siblings() {\n  return this.parent().children();\n} // Get the current position siblings\n\nfunction position() {\n  return this.parent().index(this);\n} // Get the next element (will return null if there is none)\n\nfunction next() {\n  return this.siblings()[this.position() + 1];\n} // Get the next element (will return null if there is none)\n\nfunction prev() {\n  return this.siblings()[this.position() - 1];\n} // Send given element one step forward\n\nfunction forward() {\n  const i = this.position();\n  const p = this.parent(); // move node one step forward\n\n  p.add(this.remove(), i + 1);\n  return this;\n} // Send given element one step backward\n\nfunction backward() {\n  const i = this.position();\n  const p = this.parent();\n  p.add(this.remove(), i ? i - 1 : 0);\n  return this;\n} // Send given element all the way to the front\n\nfunction front() {\n  const p = this.parent(); // Move node forward\n\n  p.add(this.remove());\n  return this;\n} // Send given element all the way to the back\n\nfunction back() {\n  const p = this.parent(); // Move node back\n\n  p.add(this.remove(), 0);\n  return this;\n} // Inserts a given element before the targeted element\n\nfunction before(element) {\n  element = makeInstance(element);\n  element.remove();\n  const i = this.position();\n  this.parent().add(element, i);\n  return this;\n} // Inserts a given element after the targeted element\n\nfunction after(element) {\n  element = makeInstance(element);\n  element.remove();\n  const i = this.position();\n  this.parent().add(element, i + 1);\n  return this;\n}\nfunction insertBefore(element) {\n  element = makeInstance(element);\n  element.before(this);\n  return this;\n}\nfunction insertAfter(element) {\n  element = makeInstance(element);\n  element.after(this);\n  return this;\n}\nregisterMethods('Dom', {\n  siblings,\n  position,\n  next,\n  prev,\n  forward,\n  backward,\n  front,\n  back,\n  before,\n  after,\n  insertBefore,\n  insertAfter\n});\n\n// Parse unit value\nconst numberAndUnit = /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i; // Parse hex value\n\nconst hex = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i; // Parse rgb value\n\nconst rgb = /rgb\\((\\d+),(\\d+),(\\d+)\\)/; // Parse reference id\n\nconst reference = /(#[a-z_][a-z0-9\\-_]*)/i; // splits a transformation chain\n\nconst transforms = /\\)\\s*,?\\s*/; // Whitespace\n\nconst whitespace = /\\s/g; // Test hex value\n\nconst isHex = /^#[a-f0-9]{3}$|^#[a-f0-9]{6}$/i; // Test rgb value\n\nconst isRgb = /^rgb\\(/; // Test for blank string\n\nconst isBlank = /^(\\s+)?$/; // Test for numeric string\n\nconst isNumber = /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i; // Test for image url\n\nconst isImage = /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i; // split at whitespace and comma\n\nconst delimiter = /[\\s,]+/; // Test for path letter\n\nconst isPathLetter = /[MLHVCSQTAZ]/i;\n\nvar regex = {\n  __proto__: null,\n  numberAndUnit: numberAndUnit,\n  hex: hex,\n  rgb: rgb,\n  reference: reference,\n  transforms: transforms,\n  whitespace: whitespace,\n  isHex: isHex,\n  isRgb: isRgb,\n  isBlank: isBlank,\n  isNumber: isNumber,\n  isImage: isImage,\n  delimiter: delimiter,\n  isPathLetter: isPathLetter\n};\n\nfunction classes() {\n  const attr = this.attr('class');\n  return attr == null ? [] : attr.trim().split(delimiter);\n} // Return true if class exists on the node, false otherwise\n\nfunction hasClass(name) {\n  return this.classes().indexOf(name) !== -1;\n} // Add class to the node\n\nfunction addClass(name) {\n  if (!this.hasClass(name)) {\n    const array = this.classes();\n    array.push(name);\n    this.attr('class', array.join(' '));\n  }\n\n  return this;\n} // Remove class from the node\n\nfunction removeClass(name) {\n  if (this.hasClass(name)) {\n    this.attr('class', this.classes().filter(function (c) {\n      return c !== name;\n    }).join(' '));\n  }\n\n  return this;\n} // Toggle the presence of a class on the node\n\nfunction toggleClass(name) {\n  return this.hasClass(name) ? this.removeClass(name) : this.addClass(name);\n}\nregisterMethods('Dom', {\n  classes,\n  hasClass,\n  addClass,\n  removeClass,\n  toggleClass\n});\n\nfunction css(style, val) {\n  const ret = {};\n\n  if (arguments.length === 0) {\n    // get full style as object\n    this.node.style.cssText.split(/\\s*;\\s*/).filter(function (el) {\n      return !!el.length;\n    }).forEach(function (el) {\n      const t = el.split(/\\s*:\\s*/);\n      ret[t[0]] = t[1];\n    });\n    return ret;\n  }\n\n  if (arguments.length < 2) {\n    // get style properties as array\n    if (Array.isArray(style)) {\n      for (const name of style) {\n        const cased = camelCase(name);\n        ret[name] = this.node.style[cased];\n      }\n\n      return ret;\n    } // get style for property\n\n\n    if (typeof style === 'string') {\n      return this.node.style[camelCase(style)];\n    } // set styles in object\n\n\n    if (typeof style === 'object') {\n      for (const name in style) {\n        // set empty string if null/undefined/'' was given\n        this.node.style[camelCase(name)] = style[name] == null || isBlank.test(style[name]) ? '' : style[name];\n      }\n    }\n  } // set style for property\n\n\n  if (arguments.length === 2) {\n    this.node.style[camelCase(style)] = val == null || isBlank.test(val) ? '' : val;\n  }\n\n  return this;\n} // Show element\n\nfunction show() {\n  return this.css('display', '');\n} // Hide element\n\nfunction hide() {\n  return this.css('display', 'none');\n} // Is element visible?\n\nfunction visible() {\n  return this.css('display') !== 'none';\n}\nregisterMethods('Dom', {\n  css,\n  show,\n  hide,\n  visible\n});\n\nfunction data(a, v, r) {\n  if (a == null) {\n    // get an object of attributes\n    return this.data(map(filter(this.node.attributes, el => el.nodeName.indexOf('data-') === 0), el => el.nodeName.slice(5)));\n  } else if (a instanceof Array) {\n    const data = {};\n\n    for (const key of a) {\n      data[key] = this.data(key);\n    }\n\n    return data;\n  } else if (typeof a === 'object') {\n    for (v in a) {\n      this.data(v, a[v]);\n    }\n  } else if (arguments.length < 2) {\n    try {\n      return JSON.parse(this.attr('data-' + a));\n    } catch (e) {\n      return this.attr('data-' + a);\n    }\n  } else {\n    this.attr('data-' + a, v === null ? null : r === true || typeof v === 'string' || typeof v === 'number' ? v : JSON.stringify(v));\n  }\n\n  return this;\n}\nregisterMethods('Dom', {\n  data\n});\n\nfunction remember(k, v) {\n  // remember every item in an object individually\n  if (typeof arguments[0] === 'object') {\n    for (const key in k) {\n      this.remember(key, k[key]);\n    }\n  } else if (arguments.length === 1) {\n    // retrieve memory\n    return this.memory()[k];\n  } else {\n    // store memory\n    this.memory()[k] = v;\n  }\n\n  return this;\n} // Erase a given memory\n\nfunction forget() {\n  if (arguments.length === 0) {\n    this._memory = {};\n  } else {\n    for (let i = arguments.length - 1; i >= 0; i--) {\n      delete this.memory()[arguments[i]];\n    }\n  }\n\n  return this;\n} // This triggers creation of a new hidden class which is not performant\n// However, this function is not rarely used so it will not happen frequently\n// Return local memory object\n\nfunction memory() {\n  return this._memory = this._memory || {};\n}\nregisterMethods('Dom', {\n  remember,\n  forget,\n  memory\n});\n\nfunction sixDigitHex(hex) {\n  return hex.length === 4 ? ['#', hex.substring(1, 2), hex.substring(1, 2), hex.substring(2, 3), hex.substring(2, 3), hex.substring(3, 4), hex.substring(3, 4)].join('') : hex;\n}\n\nfunction componentHex(component) {\n  const integer = Math.round(component);\n  const bounded = Math.max(0, Math.min(255, integer));\n  const hex = bounded.toString(16);\n  return hex.length === 1 ? '0' + hex : hex;\n}\n\nfunction is(object, space) {\n  for (let i = space.length; i--;) {\n    if (object[space[i]] == null) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getParameters(a, b) {\n  const params = is(a, 'rgb') ? {\n    _a: a.r,\n    _b: a.g,\n    _c: a.b,\n    _d: 0,\n    space: 'rgb'\n  } : is(a, 'xyz') ? {\n    _a: a.x,\n    _b: a.y,\n    _c: a.z,\n    _d: 0,\n    space: 'xyz'\n  } : is(a, 'hsl') ? {\n    _a: a.h,\n    _b: a.s,\n    _c: a.l,\n    _d: 0,\n    space: 'hsl'\n  } : is(a, 'lab') ? {\n    _a: a.l,\n    _b: a.a,\n    _c: a.b,\n    _d: 0,\n    space: 'lab'\n  } : is(a, 'lch') ? {\n    _a: a.l,\n    _b: a.c,\n    _c: a.h,\n    _d: 0,\n    space: 'lch'\n  } : is(a, 'cmyk') ? {\n    _a: a.c,\n    _b: a.m,\n    _c: a.y,\n    _d: a.k,\n    space: 'cmyk'\n  } : {\n    _a: 0,\n    _b: 0,\n    _c: 0,\n    space: 'rgb'\n  };\n  params.space = b || params.space;\n  return params;\n}\n\nfunction cieSpace(space) {\n  if (space === 'lab' || space === 'xyz' || space === 'lch') {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction hueToRgb(p, q, t) {\n  if (t < 0) t += 1;\n  if (t > 1) t -= 1;\n  if (t < 1 / 6) return p + (q - p) * 6 * t;\n  if (t < 1 / 2) return q;\n  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n  return p;\n}\n\nclass Color {\n  constructor(...inputs) {\n    this.init(...inputs);\n  } // Test if given value is a color\n\n\n  static isColor(color) {\n    return color && (color instanceof Color || this.isRgb(color) || this.test(color));\n  } // Test if given value is an rgb object\n\n\n  static isRgb(color) {\n    return color && typeof color.r === 'number' && typeof color.g === 'number' && typeof color.b === 'number';\n  }\n  /*\r\n  Generating random colors\r\n  */\n\n\n  static random(mode = 'vibrant', t, u) {\n    // Get the math modules\n    const {\n      random,\n      round,\n      sin,\n      PI: pi\n    } = Math; // Run the correct generator\n\n    if (mode === 'vibrant') {\n      const l = (81 - 57) * random() + 57;\n      const c = (83 - 45) * random() + 45;\n      const h = 360 * random();\n      const color = new Color(l, c, h, 'lch');\n      return color;\n    } else if (mode === 'sine') {\n      t = t == null ? random() : t;\n      const r = round(80 * sin(2 * pi * t / 0.5 + 0.01) + 150);\n      const g = round(50 * sin(2 * pi * t / 0.5 + 4.6) + 200);\n      const b = round(100 * sin(2 * pi * t / 0.5 + 2.3) + 150);\n      const color = new Color(r, g, b);\n      return color;\n    } else if (mode === 'pastel') {\n      const l = (94 - 86) * random() + 86;\n      const c = (26 - 9) * random() + 9;\n      const h = 360 * random();\n      const color = new Color(l, c, h, 'lch');\n      return color;\n    } else if (mode === 'dark') {\n      const l = 10 + 10 * random();\n      const c = (125 - 75) * random() + 86;\n      const h = 360 * random();\n      const color = new Color(l, c, h, 'lch');\n      return color;\n    } else if (mode === 'rgb') {\n      const r = 255 * random();\n      const g = 255 * random();\n      const b = 255 * random();\n      const color = new Color(r, g, b);\n      return color;\n    } else if (mode === 'lab') {\n      const l = 100 * random();\n      const a = 256 * random() - 128;\n      const b = 256 * random() - 128;\n      const color = new Color(l, a, b, 'lab');\n      return color;\n    } else if (mode === 'grey') {\n      const grey = 255 * random();\n      const color = new Color(grey, grey, grey);\n      return color;\n    } else {\n      throw new Error('Unsupported random color mode');\n    }\n  } // Test if given value is a color string\n\n\n  static test(color) {\n    return typeof color === 'string' && (isHex.test(color) || isRgb.test(color));\n  }\n\n  cmyk() {\n    // Get the rgb values for the current color\n    const {\n      _a,\n      _b,\n      _c\n    } = this.rgb();\n    const [r, g, b] = [_a, _b, _c].map(v => v / 255); // Get the cmyk values in an unbounded format\n\n    const k = Math.min(1 - r, 1 - g, 1 - b);\n\n    if (k === 1) {\n      // Catch the black case\n      return new Color(0, 0, 0, 1, 'cmyk');\n    }\n\n    const c = (1 - r - k) / (1 - k);\n    const m = (1 - g - k) / (1 - k);\n    const y = (1 - b - k) / (1 - k); // Construct the new color\n\n    const color = new Color(c, m, y, k, 'cmyk');\n    return color;\n  }\n\n  hsl() {\n    // Get the rgb values\n    const {\n      _a,\n      _b,\n      _c\n    } = this.rgb();\n    const [r, g, b] = [_a, _b, _c].map(v => v / 255); // Find the maximum and minimum values to get the lightness\n\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    const l = (max + min) / 2; // If the r, g, v values are identical then we are grey\n\n    const isGrey = max === min; // Calculate the hue and saturation\n\n    const delta = max - min;\n    const s = isGrey ? 0 : l > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n    const h = isGrey ? 0 : max === r ? ((g - b) / delta + (g < b ? 6 : 0)) / 6 : max === g ? ((b - r) / delta + 2) / 6 : max === b ? ((r - g) / delta + 4) / 6 : 0; // Construct and return the new color\n\n    const color = new Color(360 * h, 100 * s, 100 * l, 'hsl');\n    return color;\n  }\n\n  init(a = 0, b = 0, c = 0, d = 0, space = 'rgb') {\n    // This catches the case when a falsy value is passed like ''\n    a = !a ? 0 : a; // Reset all values in case the init function is rerun with new color space\n\n    if (this.space) {\n      for (const component in this.space) {\n        delete this[this.space[component]];\n      }\n    }\n\n    if (typeof a === 'number') {\n      // Allow for the case that we don't need d...\n      space = typeof d === 'string' ? d : space;\n      d = typeof d === 'string' ? 0 : d; // Assign the values straight to the color\n\n      Object.assign(this, {\n        _a: a,\n        _b: b,\n        _c: c,\n        _d: d,\n        space\n      }); // If the user gave us an array, make the color from it\n    } else if (a instanceof Array) {\n      this.space = b || (typeof a[3] === 'string' ? a[3] : a[4]) || 'rgb';\n      Object.assign(this, {\n        _a: a[0],\n        _b: a[1],\n        _c: a[2],\n        _d: a[3] || 0\n      });\n    } else if (a instanceof Object) {\n      // Set the object up and assign its values directly\n      const values = getParameters(a, b);\n      Object.assign(this, values);\n    } else if (typeof a === 'string') {\n      if (isRgb.test(a)) {\n        const noWhitespace = a.replace(whitespace, '');\n        const [_a, _b, _c] = rgb.exec(noWhitespace).slice(1, 4).map(v => parseInt(v));\n        Object.assign(this, {\n          _a,\n          _b,\n          _c,\n          _d: 0,\n          space: 'rgb'\n        });\n      } else if (isHex.test(a)) {\n        const hexParse = v => parseInt(v, 16);\n\n        const [, _a, _b, _c] = hex.exec(sixDigitHex(a)).map(hexParse);\n        Object.assign(this, {\n          _a,\n          _b,\n          _c,\n          _d: 0,\n          space: 'rgb'\n        });\n      } else throw Error('Unsupported string format, can\\'t construct Color');\n    } // Now add the components as a convenience\n\n\n    const {\n      _a,\n      _b,\n      _c,\n      _d\n    } = this;\n    const components = this.space === 'rgb' ? {\n      r: _a,\n      g: _b,\n      b: _c\n    } : this.space === 'xyz' ? {\n      x: _a,\n      y: _b,\n      z: _c\n    } : this.space === 'hsl' ? {\n      h: _a,\n      s: _b,\n      l: _c\n    } : this.space === 'lab' ? {\n      l: _a,\n      a: _b,\n      b: _c\n    } : this.space === 'lch' ? {\n      l: _a,\n      c: _b,\n      h: _c\n    } : this.space === 'cmyk' ? {\n      c: _a,\n      m: _b,\n      y: _c,\n      k: _d\n    } : {};\n    Object.assign(this, components);\n  }\n\n  lab() {\n    // Get the xyz color\n    const {\n      x,\n      y,\n      z\n    } = this.xyz(); // Get the lab components\n\n    const l = 116 * y - 16;\n    const a = 500 * (x - y);\n    const b = 200 * (y - z); // Construct and return a new color\n\n    const color = new Color(l, a, b, 'lab');\n    return color;\n  }\n\n  lch() {\n    // Get the lab color directly\n    const {\n      l,\n      a,\n      b\n    } = this.lab(); // Get the chromaticity and the hue using polar coordinates\n\n    const c = Math.sqrt(a ** 2 + b ** 2);\n    let h = 180 * Math.atan2(b, a) / Math.PI;\n\n    if (h < 0) {\n      h *= -1;\n      h = 360 - h;\n    } // Make a new color and return it\n\n\n    const color = new Color(l, c, h, 'lch');\n    return color;\n  }\n  /*\r\n  Conversion Methods\r\n  */\n\n\n  rgb() {\n    if (this.space === 'rgb') {\n      return this;\n    } else if (cieSpace(this.space)) {\n      // Convert to the xyz color space\n      let {\n        x,\n        y,\n        z\n      } = this;\n\n      if (this.space === 'lab' || this.space === 'lch') {\n        // Get the values in the lab space\n        let {\n          l,\n          a,\n          b\n        } = this;\n\n        if (this.space === 'lch') {\n          const {\n            c,\n            h\n          } = this;\n          const dToR = Math.PI / 180;\n          a = c * Math.cos(dToR * h);\n          b = c * Math.sin(dToR * h);\n        } // Undo the nonlinear function\n\n\n        const yL = (l + 16) / 116;\n        const xL = a / 500 + yL;\n        const zL = yL - b / 200; // Get the xyz values\n\n        const ct = 16 / 116;\n        const mx = 0.008856;\n        const nm = 7.787;\n        x = 0.95047 * (xL ** 3 > mx ? xL ** 3 : (xL - ct) / nm);\n        y = 1.00000 * (yL ** 3 > mx ? yL ** 3 : (yL - ct) / nm);\n        z = 1.08883 * (zL ** 3 > mx ? zL ** 3 : (zL - ct) / nm);\n      } // Convert xyz to unbounded rgb values\n\n\n      const rU = x * 3.2406 + y * -1.5372 + z * -0.4986;\n      const gU = x * -0.9689 + y * 1.8758 + z * 0.0415;\n      const bU = x * 0.0557 + y * -0.2040 + z * 1.0570; // Convert the values to true rgb values\n\n      const pow = Math.pow;\n      const bd = 0.0031308;\n      const r = rU > bd ? 1.055 * pow(rU, 1 / 2.4) - 0.055 : 12.92 * rU;\n      const g = gU > bd ? 1.055 * pow(gU, 1 / 2.4) - 0.055 : 12.92 * gU;\n      const b = bU > bd ? 1.055 * pow(bU, 1 / 2.4) - 0.055 : 12.92 * bU; // Make and return the color\n\n      const color = new Color(255 * r, 255 * g, 255 * b);\n      return color;\n    } else if (this.space === 'hsl') {\n      // https://bgrins.github.io/TinyColor/docs/tinycolor.html\n      // Get the current hsl values\n      let {\n        h,\n        s,\n        l\n      } = this;\n      h /= 360;\n      s /= 100;\n      l /= 100; // If we are grey, then just make the color directly\n\n      if (s === 0) {\n        l *= 255;\n        const color = new Color(l, l, l);\n        return color;\n      } // TODO I have no idea what this does :D If you figure it out, tell me!\n\n\n      const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      const p = 2 * l - q; // Get the rgb values\n\n      const r = 255 * hueToRgb(p, q, h + 1 / 3);\n      const g = 255 * hueToRgb(p, q, h);\n      const b = 255 * hueToRgb(p, q, h - 1 / 3); // Make a new color\n\n      const color = new Color(r, g, b);\n      return color;\n    } else if (this.space === 'cmyk') {\n      // https://gist.github.com/felipesabino/5066336\n      // Get the normalised cmyk values\n      const {\n        c,\n        m,\n        y,\n        k\n      } = this; // Get the rgb values\n\n      const r = 255 * (1 - Math.min(1, c * (1 - k) + k));\n      const g = 255 * (1 - Math.min(1, m * (1 - k) + k));\n      const b = 255 * (1 - Math.min(1, y * (1 - k) + k)); // Form the color and return it\n\n      const color = new Color(r, g, b);\n      return color;\n    } else {\n      return this;\n    }\n  }\n\n  toArray() {\n    const {\n      _a,\n      _b,\n      _c,\n      _d,\n      space\n    } = this;\n    return [_a, _b, _c, _d, space];\n  }\n\n  toHex() {\n    const [r, g, b] = this._clamped().map(componentHex);\n\n    return `#${r}${g}${b}`;\n  }\n\n  toRgb() {\n    const [rV, gV, bV] = this._clamped();\n\n    const string = `rgb(${rV},${gV},${bV})`;\n    return string;\n  }\n\n  toString() {\n    return this.toHex();\n  }\n\n  xyz() {\n    // Normalise the red, green and blue values\n    const {\n      _a: r255,\n      _b: g255,\n      _c: b255\n    } = this.rgb();\n    const [r, g, b] = [r255, g255, b255].map(v => v / 255); // Convert to the lab rgb space\n\n    const rL = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\n    const gL = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\n    const bL = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92; // Convert to the xyz color space without bounding the values\n\n    const xU = (rL * 0.4124 + gL * 0.3576 + bL * 0.1805) / 0.95047;\n    const yU = (rL * 0.2126 + gL * 0.7152 + bL * 0.0722) / 1.00000;\n    const zU = (rL * 0.0193 + gL * 0.1192 + bL * 0.9505) / 1.08883; // Get the proper xyz values by applying the bounding\n\n    const x = xU > 0.008856 ? Math.pow(xU, 1 / 3) : 7.787 * xU + 16 / 116;\n    const y = yU > 0.008856 ? Math.pow(yU, 1 / 3) : 7.787 * yU + 16 / 116;\n    const z = zU > 0.008856 ? Math.pow(zU, 1 / 3) : 7.787 * zU + 16 / 116; // Make and return the color\n\n    const color = new Color(x, y, z, 'xyz');\n    return color;\n  }\n  /*\r\n  Input and Output methods\r\n  */\n\n\n  _clamped() {\n    const {\n      _a,\n      _b,\n      _c\n    } = this.rgb();\n    const {\n      max,\n      min,\n      round\n    } = Math;\n\n    const format = v => max(0, min(round(v), 255));\n\n    return [_a, _b, _c].map(format);\n  }\n  /*\r\n  Constructing colors\r\n  */\n\n\n}\n\nclass Point {\n  // Initialize\n  constructor(...args) {\n    this.init(...args);\n  } // Clone point\n\n\n  clone() {\n    return new Point(this);\n  }\n\n  init(x, y) {\n    const base = {\n      x: 0,\n      y: 0\n    }; // ensure source as object\n\n    const source = Array.isArray(x) ? {\n      x: x[0],\n      y: x[1]\n    } : typeof x === 'object' ? {\n      x: x.x,\n      y: x.y\n    } : {\n      x: x,\n      y: y\n    }; // merge source\n\n    this.x = source.x == null ? base.x : source.x;\n    this.y = source.y == null ? base.y : source.y;\n    return this;\n  }\n\n  toArray() {\n    return [this.x, this.y];\n  }\n\n  transform(m) {\n    return this.clone().transformO(m);\n  } // Transform point with matrix\n\n\n  transformO(m) {\n    if (!Matrix.isMatrixLike(m)) {\n      m = new Matrix(m);\n    }\n\n    const {\n      x,\n      y\n    } = this; // Perform the matrix multiplication\n\n    this.x = m.a * x + m.c * y + m.e;\n    this.y = m.b * x + m.d * y + m.f;\n    return this;\n  }\n\n}\nfunction point(x, y) {\n  return new Point(x, y).transform(this.screenCTM().inverse());\n}\n\nfunction closeEnough(a, b, threshold) {\n  return Math.abs(b - a) < (threshold || 1e-6);\n}\n\nclass Matrix {\n  constructor(...args) {\n    this.init(...args);\n  }\n\n  static formatTransforms(o) {\n    // Get all of the parameters required to form the matrix\n    const flipBoth = o.flip === 'both' || o.flip === true;\n    const flipX = o.flip && (flipBoth || o.flip === 'x') ? -1 : 1;\n    const flipY = o.flip && (flipBoth || o.flip === 'y') ? -1 : 1;\n    const skewX = o.skew && o.skew.length ? o.skew[0] : isFinite(o.skew) ? o.skew : isFinite(o.skewX) ? o.skewX : 0;\n    const skewY = o.skew && o.skew.length ? o.skew[1] : isFinite(o.skew) ? o.skew : isFinite(o.skewY) ? o.skewY : 0;\n    const scaleX = o.scale && o.scale.length ? o.scale[0] * flipX : isFinite(o.scale) ? o.scale * flipX : isFinite(o.scaleX) ? o.scaleX * flipX : flipX;\n    const scaleY = o.scale && o.scale.length ? o.scale[1] * flipY : isFinite(o.scale) ? o.scale * flipY : isFinite(o.scaleY) ? o.scaleY * flipY : flipY;\n    const shear = o.shear || 0;\n    const theta = o.rotate || o.theta || 0;\n    const origin = new Point(o.origin || o.around || o.ox || o.originX, o.oy || o.originY);\n    const ox = origin.x;\n    const oy = origin.y; // We need Point to be invalid if nothing was passed because we cannot default to 0 here. Thats why NaN\n\n    const position = new Point(o.position || o.px || o.positionX || NaN, o.py || o.positionY || NaN);\n    const px = position.x;\n    const py = position.y;\n    const translate = new Point(o.translate || o.tx || o.translateX, o.ty || o.translateY);\n    const tx = translate.x;\n    const ty = translate.y;\n    const relative = new Point(o.relative || o.rx || o.relativeX, o.ry || o.relativeY);\n    const rx = relative.x;\n    const ry = relative.y; // Populate all of the values\n\n    return {\n      scaleX,\n      scaleY,\n      skewX,\n      skewY,\n      shear,\n      theta,\n      rx,\n      ry,\n      tx,\n      ty,\n      ox,\n      oy,\n      px,\n      py\n    };\n  }\n\n  static fromArray(a) {\n    return {\n      a: a[0],\n      b: a[1],\n      c: a[2],\n      d: a[3],\n      e: a[4],\n      f: a[5]\n    };\n  }\n\n  static isMatrixLike(o) {\n    return o.a != null || o.b != null || o.c != null || o.d != null || o.e != null || o.f != null;\n  } // left matrix, right matrix, target matrix which is overwritten\n\n\n  static matrixMultiply(l, r, o) {\n    // Work out the product directly\n    const a = l.a * r.a + l.c * r.b;\n    const b = l.b * r.a + l.d * r.b;\n    const c = l.a * r.c + l.c * r.d;\n    const d = l.b * r.c + l.d * r.d;\n    const e = l.e + l.a * r.e + l.c * r.f;\n    const f = l.f + l.b * r.e + l.d * r.f; // make sure to use local variables because l/r and o could be the same\n\n    o.a = a;\n    o.b = b;\n    o.c = c;\n    o.d = d;\n    o.e = e;\n    o.f = f;\n    return o;\n  }\n\n  around(cx, cy, matrix) {\n    return this.clone().aroundO(cx, cy, matrix);\n  } // Transform around a center point\n\n\n  aroundO(cx, cy, matrix) {\n    const dx = cx || 0;\n    const dy = cy || 0;\n    return this.translateO(-dx, -dy).lmultiplyO(matrix).translateO(dx, dy);\n  } // Clones this matrix\n\n\n  clone() {\n    return new Matrix(this);\n  } // Decomposes this matrix into its affine parameters\n\n\n  decompose(cx = 0, cy = 0) {\n    // Get the parameters from the matrix\n    const a = this.a;\n    const b = this.b;\n    const c = this.c;\n    const d = this.d;\n    const e = this.e;\n    const f = this.f; // Figure out if the winding direction is clockwise or counterclockwise\n\n    const determinant = a * d - b * c;\n    const ccw = determinant > 0 ? 1 : -1; // Since we only shear in x, we can use the x basis to get the x scale\n    // and the rotation of the resulting matrix\n\n    const sx = ccw * Math.sqrt(a * a + b * b);\n    const thetaRad = Math.atan2(ccw * b, ccw * a);\n    const theta = 180 / Math.PI * thetaRad;\n    const ct = Math.cos(thetaRad);\n    const st = Math.sin(thetaRad); // We can then solve the y basis vector simultaneously to get the other\n    // two affine parameters directly from these parameters\n\n    const lam = (a * c + b * d) / determinant;\n    const sy = c * sx / (lam * a - b) || d * sx / (lam * b + a); // Use the translations\n\n    const tx = e - cx + cx * ct * sx + cy * (lam * ct * sx - st * sy);\n    const ty = f - cy + cx * st * sx + cy * (lam * st * sx + ct * sy); // Construct the decomposition and return it\n\n    return {\n      // Return the affine parameters\n      scaleX: sx,\n      scaleY: sy,\n      shear: lam,\n      rotate: theta,\n      translateX: tx,\n      translateY: ty,\n      originX: cx,\n      originY: cy,\n      // Return the matrix parameters\n      a: this.a,\n      b: this.b,\n      c: this.c,\n      d: this.d,\n      e: this.e,\n      f: this.f\n    };\n  } // Check if two matrices are equal\n\n\n  equals(other) {\n    if (other === this) return true;\n    const comp = new Matrix(other);\n    return closeEnough(this.a, comp.a) && closeEnough(this.b, comp.b) && closeEnough(this.c, comp.c) && closeEnough(this.d, comp.d) && closeEnough(this.e, comp.e) && closeEnough(this.f, comp.f);\n  } // Flip matrix on x or y, at a given offset\n\n\n  flip(axis, around) {\n    return this.clone().flipO(axis, around);\n  }\n\n  flipO(axis, around) {\n    return axis === 'x' ? this.scaleO(-1, 1, around, 0) : axis === 'y' ? this.scaleO(1, -1, 0, around) : this.scaleO(-1, -1, axis, around || axis); // Define an x, y flip point\n  } // Initialize\n\n\n  init(source) {\n    const base = Matrix.fromArray([1, 0, 0, 1, 0, 0]); // ensure source as object\n\n    source = source instanceof Element ? source.matrixify() : typeof source === 'string' ? Matrix.fromArray(source.split(delimiter).map(parseFloat)) : Array.isArray(source) ? Matrix.fromArray(source) : typeof source === 'object' && Matrix.isMatrixLike(source) ? source : typeof source === 'object' ? new Matrix().transform(source) : arguments.length === 6 ? Matrix.fromArray([].slice.call(arguments)) : base; // Merge the source matrix with the base matrix\n\n    this.a = source.a != null ? source.a : base.a;\n    this.b = source.b != null ? source.b : base.b;\n    this.c = source.c != null ? source.c : base.c;\n    this.d = source.d != null ? source.d : base.d;\n    this.e = source.e != null ? source.e : base.e;\n    this.f = source.f != null ? source.f : base.f;\n    return this;\n  }\n\n  inverse() {\n    return this.clone().inverseO();\n  } // Inverses matrix\n\n\n  inverseO() {\n    // Get the current parameters out of the matrix\n    const a = this.a;\n    const b = this.b;\n    const c = this.c;\n    const d = this.d;\n    const e = this.e;\n    const f = this.f; // Invert the 2x2 matrix in the top left\n\n    const det = a * d - b * c;\n    if (!det) throw new Error('Cannot invert ' + this); // Calculate the top 2x2 matrix\n\n    const na = d / det;\n    const nb = -b / det;\n    const nc = -c / det;\n    const nd = a / det; // Apply the inverted matrix to the top right\n\n    const ne = -(na * e + nc * f);\n    const nf = -(nb * e + nd * f); // Construct the inverted matrix\n\n    this.a = na;\n    this.b = nb;\n    this.c = nc;\n    this.d = nd;\n    this.e = ne;\n    this.f = nf;\n    return this;\n  }\n\n  lmultiply(matrix) {\n    return this.clone().lmultiplyO(matrix);\n  }\n\n  lmultiplyO(matrix) {\n    const r = this;\n    const l = matrix instanceof Matrix ? matrix : new Matrix(matrix);\n    return Matrix.matrixMultiply(l, r, this);\n  } // Left multiplies by the given matrix\n\n\n  multiply(matrix) {\n    return this.clone().multiplyO(matrix);\n  }\n\n  multiplyO(matrix) {\n    // Get the matrices\n    const l = this;\n    const r = matrix instanceof Matrix ? matrix : new Matrix(matrix);\n    return Matrix.matrixMultiply(l, r, this);\n  } // Rotate matrix\n\n\n  rotate(r, cx, cy) {\n    return this.clone().rotateO(r, cx, cy);\n  }\n\n  rotateO(r, cx = 0, cy = 0) {\n    // Convert degrees to radians\n    r = radians(r);\n    const cos = Math.cos(r);\n    const sin = Math.sin(r);\n    const {\n      a,\n      b,\n      c,\n      d,\n      e,\n      f\n    } = this;\n    this.a = a * cos - b * sin;\n    this.b = b * cos + a * sin;\n    this.c = c * cos - d * sin;\n    this.d = d * cos + c * sin;\n    this.e = e * cos - f * sin + cy * sin - cx * cos + cx;\n    this.f = f * cos + e * sin - cx * sin - cy * cos + cy;\n    return this;\n  } // Scale matrix\n\n\n  scale(x, y, cx, cy) {\n    return this.clone().scaleO(...arguments);\n  }\n\n  scaleO(x, y = x, cx = 0, cy = 0) {\n    // Support uniform scaling\n    if (arguments.length === 3) {\n      cy = cx;\n      cx = y;\n      y = x;\n    }\n\n    const {\n      a,\n      b,\n      c,\n      d,\n      e,\n      f\n    } = this;\n    this.a = a * x;\n    this.b = b * y;\n    this.c = c * x;\n    this.d = d * y;\n    this.e = e * x - cx * x + cx;\n    this.f = f * y - cy * y + cy;\n    return this;\n  } // Shear matrix\n\n\n  shear(a, cx, cy) {\n    return this.clone().shearO(a, cx, cy);\n  }\n\n  shearO(lx, cx = 0, cy = 0) {\n    const {\n      a,\n      b,\n      c,\n      d,\n      e,\n      f\n    } = this;\n    this.a = a + b * lx;\n    this.c = c + d * lx;\n    this.e = e + f * lx - cy * lx;\n    return this;\n  } // Skew Matrix\n\n\n  skew(x, y, cx, cy) {\n    return this.clone().skewO(...arguments);\n  }\n\n  skewO(x, y = x, cx = 0, cy = 0) {\n    // support uniformal skew\n    if (arguments.length === 3) {\n      cy = cx;\n      cx = y;\n      y = x;\n    } // Convert degrees to radians\n\n\n    x = radians(x);\n    y = radians(y);\n    const lx = Math.tan(x);\n    const ly = Math.tan(y);\n    const {\n      a,\n      b,\n      c,\n      d,\n      e,\n      f\n    } = this;\n    this.a = a + b * lx;\n    this.b = b + a * ly;\n    this.c = c + d * lx;\n    this.d = d + c * ly;\n    this.e = e + f * lx - cy * lx;\n    this.f = f + e * ly - cx * ly;\n    return this;\n  } // SkewX\n\n\n  skewX(x, cx, cy) {\n    return this.skew(x, 0, cx, cy);\n  } // SkewY\n\n\n  skewY(y, cx, cy) {\n    return this.skew(0, y, cx, cy);\n  }\n\n  toArray() {\n    return [this.a, this.b, this.c, this.d, this.e, this.f];\n  } // Convert matrix to string\n\n\n  toString() {\n    return 'matrix(' + this.a + ',' + this.b + ',' + this.c + ',' + this.d + ',' + this.e + ',' + this.f + ')';\n  } // Transform a matrix into another matrix by manipulating the space\n\n\n  transform(o) {\n    // Check if o is a matrix and then left multiply it directly\n    if (Matrix.isMatrixLike(o)) {\n      const matrix = new Matrix(o);\n      return matrix.multiplyO(this);\n    } // Get the proposed transformations and the current transformations\n\n\n    const t = Matrix.formatTransforms(o);\n    const current = this;\n    const {\n      x: ox,\n      y: oy\n    } = new Point(t.ox, t.oy).transform(current); // Construct the resulting matrix\n\n    const transformer = new Matrix().translateO(t.rx, t.ry).lmultiplyO(current).translateO(-ox, -oy).scaleO(t.scaleX, t.scaleY).skewO(t.skewX, t.skewY).shearO(t.shear).rotateO(t.theta).translateO(ox, oy); // If we want the origin at a particular place, we force it there\n\n    if (isFinite(t.px) || isFinite(t.py)) {\n      const origin = new Point(ox, oy).transform(transformer); // TODO: Replace t.px with isFinite(t.px)\n      // Doesnt work because t.px is also 0 if it wasnt passed\n\n      const dx = isFinite(t.px) ? t.px - origin.x : 0;\n      const dy = isFinite(t.py) ? t.py - origin.y : 0;\n      transformer.translateO(dx, dy);\n    } // Translate now after positioning\n\n\n    transformer.translateO(t.tx, t.ty);\n    return transformer;\n  } // Translate matrix\n\n\n  translate(x, y) {\n    return this.clone().translateO(x, y);\n  }\n\n  translateO(x, y) {\n    this.e += x || 0;\n    this.f += y || 0;\n    return this;\n  }\n\n  valueOf() {\n    return {\n      a: this.a,\n      b: this.b,\n      c: this.c,\n      d: this.d,\n      e: this.e,\n      f: this.f\n    };\n  }\n\n}\nfunction ctm() {\n  return new Matrix(this.node.getCTM());\n}\nfunction screenCTM() {\n  /* https://bugzilla.mozilla.org/show_bug.cgi?id=1344537\r\n     This is needed because FF does not return the transformation matrix\r\n     for the inner coordinate system when getScreenCTM() is called on nested svgs.\r\n     However all other Browsers do that */\n  if (typeof this.isRoot === 'function' && !this.isRoot()) {\n    const rect = this.rect(1, 1);\n    const m = rect.node.getScreenCTM();\n    rect.remove();\n    return new Matrix(m);\n  }\n\n  return new Matrix(this.node.getScreenCTM());\n}\nregister(Matrix, 'Matrix');\n\nfunction parser() {\n  // Reuse cached element if possible\n  if (!parser.nodes) {\n    const svg = makeInstance().size(2, 0);\n    svg.node.style.cssText = ['opacity: 0', 'position: absolute', 'left: -100%', 'top: -100%', 'overflow: hidden'].join(';');\n    svg.attr('focusable', 'false');\n    svg.attr('aria-hidden', 'true');\n    const path = svg.path().node;\n    parser.nodes = {\n      svg,\n      path\n    };\n  }\n\n  if (!parser.nodes.svg.node.parentNode) {\n    const b = globals.document.body || globals.document.documentElement;\n    parser.nodes.svg.addTo(b);\n  }\n\n  return parser.nodes;\n}\n\nfunction isNulledBox(box) {\n  return !box.width && !box.height && !box.x && !box.y;\n}\nfunction domContains(node) {\n  return node === globals.document || (globals.document.documentElement.contains || function (node) {\n    // This is IE - it does not support contains() for top-level SVGs\n    while (node.parentNode) {\n      node = node.parentNode;\n    }\n\n    return node === globals.document;\n  }).call(globals.document.documentElement, node);\n}\nclass Box {\n  constructor(...args) {\n    this.init(...args);\n  }\n\n  addOffset() {\n    // offset by window scroll position, because getBoundingClientRect changes when window is scrolled\n    this.x += globals.window.pageXOffset;\n    this.y += globals.window.pageYOffset;\n    return new Box(this);\n  }\n\n  init(source) {\n    const base = [0, 0, 0, 0];\n    source = typeof source === 'string' ? source.split(delimiter).map(parseFloat) : Array.isArray(source) ? source : typeof source === 'object' ? [source.left != null ? source.left : source.x, source.top != null ? source.top : source.y, source.width, source.height] : arguments.length === 4 ? [].slice.call(arguments) : base;\n    this.x = source[0] || 0;\n    this.y = source[1] || 0;\n    this.width = this.w = source[2] || 0;\n    this.height = this.h = source[3] || 0; // Add more bounding box properties\n\n    this.x2 = this.x + this.w;\n    this.y2 = this.y + this.h;\n    this.cx = this.x + this.w / 2;\n    this.cy = this.y + this.h / 2;\n    return this;\n  }\n\n  isNulled() {\n    return isNulledBox(this);\n  } // Merge rect box with another, return a new instance\n\n\n  merge(box) {\n    const x = Math.min(this.x, box.x);\n    const y = Math.min(this.y, box.y);\n    const width = Math.max(this.x + this.width, box.x + box.width) - x;\n    const height = Math.max(this.y + this.height, box.y + box.height) - y;\n    return new Box(x, y, width, height);\n  }\n\n  toArray() {\n    return [this.x, this.y, this.width, this.height];\n  }\n\n  toString() {\n    return this.x + ' ' + this.y + ' ' + this.width + ' ' + this.height;\n  }\n\n  transform(m) {\n    if (!(m instanceof Matrix)) {\n      m = new Matrix(m);\n    }\n\n    let xMin = Infinity;\n    let xMax = -Infinity;\n    let yMin = Infinity;\n    let yMax = -Infinity;\n    const pts = [new Point(this.x, this.y), new Point(this.x2, this.y), new Point(this.x, this.y2), new Point(this.x2, this.y2)];\n    pts.forEach(function (p) {\n      p = p.transform(m);\n      xMin = Math.min(xMin, p.x);\n      xMax = Math.max(xMax, p.x);\n      yMin = Math.min(yMin, p.y);\n      yMax = Math.max(yMax, p.y);\n    });\n    return new Box(xMin, yMin, xMax - xMin, yMax - yMin);\n  }\n\n}\n\nfunction getBox(el, getBBoxFn, retry) {\n  let box;\n\n  try {\n    // Try to get the box with the provided function\n    box = getBBoxFn(el.node); // If the box is worthless and not even in the dom, retry\n    // by throwing an error here...\n\n    if (isNulledBox(box) && !domContains(el.node)) {\n      throw new Error('Element not in the dom');\n    }\n  } catch (e) {\n    // ... and calling the retry handler here\n    box = retry(el);\n  }\n\n  return box;\n}\n\nfunction bbox() {\n  // Function to get bbox is getBBox()\n  const getBBox = node => node.getBBox(); // Take all measures so that a stupid browser renders the element\n  // so we can get the bbox from it when we try again\n\n\n  const retry = el => {\n    try {\n      const clone = el.clone().addTo(parser().svg).show();\n      const box = clone.node.getBBox();\n      clone.remove();\n      return box;\n    } catch (e) {\n      // We give up...\n      throw new Error(`Getting bbox of element \"${el.node.nodeName}\" is not possible: ${e.toString()}`);\n    }\n  };\n\n  const box = getBox(this, getBBox, retry);\n  const bbox = new Box(box);\n  return bbox;\n}\nfunction rbox(el) {\n  const getRBox = node => node.getBoundingClientRect();\n\n  const retry = el => {\n    // There is no point in trying tricks here because if we insert the element into the dom ourselves\n    // it obviously will be at the wrong position\n    throw new Error(`Getting rbox of element \"${el.node.nodeName}\" is not possible`);\n  };\n\n  const box = getBox(this, getRBox, retry);\n  const rbox = new Box(box); // If an element was passed, we want the bbox in the coordinate system of that element\n\n  if (el) {\n    return rbox.transform(el.screenCTM().inverseO());\n  } // Else we want it in absolute screen coordinates\n  // Therefore we need to add the scrollOffset\n\n\n  return rbox.addOffset();\n} // Checks whether the given point is inside the bounding box\n\nfunction inside(x, y) {\n  const box = this.bbox();\n  return x > box.x && y > box.y && x < box.x + box.width && y < box.y + box.height;\n}\nregisterMethods({\n  viewbox: {\n    viewbox(x, y, width, height) {\n      // act as getter\n      if (x == null) return new Box(this.attr('viewBox')); // act as setter\n\n      return this.attr('viewBox', new Box(x, y, width, height));\n    },\n\n    zoom(level, point) {\n      // Its best to rely on the attributes here and here is why:\n      // clientXYZ: Doesn't work on non-root svgs because they dont have a CSSBox (silly!)\n      // getBoundingClientRect: Doesn't work because Chrome just ignores width and height of nested svgs completely\n      //                        that means, their clientRect is always as big as the content.\n      //                        Furthermore this size is incorrect if the element is further transformed by its parents\n      // computedStyle: Only returns meaningful values if css was used with px. We dont go this route here!\n      // getBBox: returns the bounding box of its content - that doesnt help!\n      let {\n        width,\n        height\n      } = this.attr(['width', 'height']); // Width and height is a string when a number with a unit is present which we can't use\n      // So we try clientXYZ\n\n      if (!width && !height || typeof width === 'string' || typeof height === 'string') {\n        width = this.node.clientWidth;\n        height = this.node.clientHeight;\n      } // Giving up...\n\n\n      if (!width || !height) {\n        throw new Error('Impossible to get absolute width and height. Please provide an absolute width and height attribute on the zooming element');\n      }\n\n      const v = this.viewbox();\n      const zoomX = width / v.width;\n      const zoomY = height / v.height;\n      const zoom = Math.min(zoomX, zoomY);\n\n      if (level == null) {\n        return zoom;\n      }\n\n      let zoomAmount = zoom / level; // Set the zoomAmount to the highest value which is safe to process and recover from\n      // The * 100 is a bit of wiggle room for the matrix transformation\n\n      if (zoomAmount === Infinity) zoomAmount = Number.MAX_SAFE_INTEGER / 100;\n      point = point || new Point(width / 2 / zoomX + v.x, height / 2 / zoomY + v.y);\n      const box = new Box(v).transform(new Matrix({\n        scale: zoomAmount,\n        origin: point\n      }));\n      return this.viewbox(box);\n    }\n\n  }\n});\nregister(Box, 'Box');\n\nclass List extends Array {\n  constructor(arr = [], ...args) {\n    super(arr, ...args);\n    if (typeof arr === 'number') return this;\n    this.length = 0;\n    this.push(...arr);\n  }\n\n}\nextend([List], {\n  each(fnOrMethodName, ...args) {\n    if (typeof fnOrMethodName === 'function') {\n      return this.map((el, i, arr) => {\n        return fnOrMethodName.call(el, el, i, arr);\n      });\n    } else {\n      return this.map(el => {\n        return el[fnOrMethodName](...args);\n      });\n    }\n  },\n\n  toArray() {\n    return Array.prototype.concat.apply([], this);\n  }\n\n});\nconst reserved = ['toArray', 'constructor', 'each'];\n\nList.extend = function (methods) {\n  methods = methods.reduce((obj, name) => {\n    // Don't overwrite own methods\n    if (reserved.includes(name)) return obj; // Don't add private methods\n\n    if (name[0] === '_') return obj; // Relay every call to each()\n\n    obj[name] = function (...attrs) {\n      return this.each(name, ...attrs);\n    };\n\n    return obj;\n  }, {});\n  extend([List], methods);\n};\n\nfunction baseFind(query, parent) {\n  return new List(map((parent || globals.document).querySelectorAll(query), function (node) {\n    return adopt(node);\n  }));\n} // Scoped find method\n\nfunction find(query) {\n  return baseFind(query, this.node);\n}\nfunction findOne(query) {\n  return adopt(this.node.querySelector(query));\n}\n\nlet listenerId = 0;\nconst windowEvents = {};\nfunction getEvents(instance) {\n  let n = instance.getEventHolder(); // We dont want to save events in global space\n\n  if (n === globals.window) n = windowEvents;\n  if (!n.events) n.events = {};\n  return n.events;\n}\nfunction getEventTarget(instance) {\n  return instance.getEventTarget();\n}\nfunction clearEvents(instance) {\n  let n = instance.getEventHolder();\n  if (n === globals.window) n = windowEvents;\n  if (n.events) n.events = {};\n} // Add event binder in the SVG namespace\n\nfunction on(node, events, listener, binding, options) {\n  const l = listener.bind(binding || node);\n  const instance = makeInstance(node);\n  const bag = getEvents(instance);\n  const n = getEventTarget(instance); // events can be an array of events or a string of events\n\n  events = Array.isArray(events) ? events : events.split(delimiter); // add id to listener\n\n  if (!listener._svgjsListenerId) {\n    listener._svgjsListenerId = ++listenerId;\n  }\n\n  events.forEach(function (event) {\n    const ev = event.split('.')[0];\n    const ns = event.split('.')[1] || '*'; // ensure valid object\n\n    bag[ev] = bag[ev] || {};\n    bag[ev][ns] = bag[ev][ns] || {}; // reference listener\n\n    bag[ev][ns][listener._svgjsListenerId] = l; // add listener\n\n    n.addEventListener(ev, l, options || false);\n  });\n} // Add event unbinder in the SVG namespace\n\nfunction off(node, events, listener, options) {\n  const instance = makeInstance(node);\n  const bag = getEvents(instance);\n  const n = getEventTarget(instance); // listener can be a function or a number\n\n  if (typeof listener === 'function') {\n    listener = listener._svgjsListenerId;\n    if (!listener) return;\n  } // events can be an array of events or a string or undefined\n\n\n  events = Array.isArray(events) ? events : (events || '').split(delimiter);\n  events.forEach(function (event) {\n    const ev = event && event.split('.')[0];\n    const ns = event && event.split('.')[1];\n    let namespace, l;\n\n    if (listener) {\n      // remove listener reference\n      if (bag[ev] && bag[ev][ns || '*']) {\n        // removeListener\n        n.removeEventListener(ev, bag[ev][ns || '*'][listener], options || false);\n        delete bag[ev][ns || '*'][listener];\n      }\n    } else if (ev && ns) {\n      // remove all listeners for a namespaced event\n      if (bag[ev] && bag[ev][ns]) {\n        for (l in bag[ev][ns]) {\n          off(n, [ev, ns].join('.'), l);\n        }\n\n        delete bag[ev][ns];\n      }\n    } else if (ns) {\n      // remove all listeners for a specific namespace\n      for (event in bag) {\n        for (namespace in bag[event]) {\n          if (ns === namespace) {\n            off(n, [event, ns].join('.'));\n          }\n        }\n      }\n    } else if (ev) {\n      // remove all listeners for the event\n      if (bag[ev]) {\n        for (namespace in bag[ev]) {\n          off(n, [ev, namespace].join('.'));\n        }\n\n        delete bag[ev];\n      }\n    } else {\n      // remove all listeners on a given node\n      for (event in bag) {\n        off(n, event);\n      }\n\n      clearEvents(instance);\n    }\n  });\n}\nfunction dispatch(node, event, data, options) {\n  const n = getEventTarget(node); // Dispatch event\n\n  if (event instanceof globals.window.Event) {\n    n.dispatchEvent(event);\n  } else {\n    event = new globals.window.CustomEvent(event, {\n      detail: data,\n      cancelable: true,\n      ...options\n    });\n    n.dispatchEvent(event);\n  }\n\n  return event;\n}\n\nclass EventTarget extends Base {\n  addEventListener() {}\n\n  dispatch(event, data, options) {\n    return dispatch(this, event, data, options);\n  }\n\n  dispatchEvent(event) {\n    const bag = this.getEventHolder().events;\n    if (!bag) return true;\n    const events = bag[event.type];\n\n    for (const i in events) {\n      for (const j in events[i]) {\n        events[i][j](event);\n      }\n    }\n\n    return !event.defaultPrevented;\n  } // Fire given event\n\n\n  fire(event, data, options) {\n    this.dispatch(event, data, options);\n    return this;\n  }\n\n  getEventHolder() {\n    return this;\n  }\n\n  getEventTarget() {\n    return this;\n  } // Unbind event from listener\n\n\n  off(event, listener, options) {\n    off(this, event, listener, options);\n    return this;\n  } // Bind given event to listener\n\n\n  on(event, listener, binding, options) {\n    on(this, event, listener, binding, options);\n    return this;\n  }\n\n  removeEventListener() {}\n\n}\nregister(EventTarget, 'EventTarget');\n\nfunction noop() {} // Default animation values\n\nconst timeline = {\n  duration: 400,\n  ease: '>',\n  delay: 0\n}; // Default attribute values\n\nconst attrs = {\n  // fill and stroke\n  'fill-opacity': 1,\n  'stroke-opacity': 1,\n  'stroke-width': 0,\n  'stroke-linejoin': 'miter',\n  'stroke-linecap': 'butt',\n  fill: '#000000',\n  stroke: '#000000',\n  opacity: 1,\n  // position\n  x: 0,\n  y: 0,\n  cx: 0,\n  cy: 0,\n  // size\n  width: 0,\n  height: 0,\n  // radius\n  r: 0,\n  rx: 0,\n  ry: 0,\n  // gradient\n  offset: 0,\n  'stop-opacity': 1,\n  'stop-color': '#000000',\n  // text\n  'text-anchor': 'start'\n};\n\nvar defaults = {\n  __proto__: null,\n  noop: noop,\n  timeline: timeline,\n  attrs: attrs\n};\n\nclass SVGArray extends Array {\n  constructor(...args) {\n    super(...args);\n    this.init(...args);\n  }\n\n  clone() {\n    return new this.constructor(this);\n  }\n\n  init(arr) {\n    // This catches the case, that native map tries to create an array with new Array(1)\n    if (typeof arr === 'number') return this;\n    this.length = 0;\n    this.push(...this.parse(arr));\n    return this;\n  } // Parse whitespace separated string\n\n\n  parse(array = []) {\n    // If already is an array, no need to parse it\n    if (array instanceof Array) return array;\n    return array.trim().split(delimiter).map(parseFloat);\n  }\n\n  toArray() {\n    return Array.prototype.concat.apply([], this);\n  }\n\n  toSet() {\n    return new Set(this);\n  }\n\n  toString() {\n    return this.join(' ');\n  } // Flattens the array if needed\n\n\n  valueOf() {\n    const ret = [];\n    ret.push(...this);\n    return ret;\n  }\n\n}\n\nclass SVGNumber {\n  // Initialize\n  constructor(...args) {\n    this.init(...args);\n  }\n\n  convert(unit) {\n    return new SVGNumber(this.value, unit);\n  } // Divide number\n\n\n  divide(number) {\n    number = new SVGNumber(number);\n    return new SVGNumber(this / number, this.unit || number.unit);\n  }\n\n  init(value, unit) {\n    unit = Array.isArray(value) ? value[1] : unit;\n    value = Array.isArray(value) ? value[0] : value; // initialize defaults\n\n    this.value = 0;\n    this.unit = unit || ''; // parse value\n\n    if (typeof value === 'number') {\n      // ensure a valid numeric value\n      this.value = isNaN(value) ? 0 : !isFinite(value) ? value < 0 ? -3.4e+38 : +3.4e+38 : value;\n    } else if (typeof value === 'string') {\n      unit = value.match(numberAndUnit);\n\n      if (unit) {\n        // make value numeric\n        this.value = parseFloat(unit[1]); // normalize\n\n        if (unit[5] === '%') {\n          this.value /= 100;\n        } else if (unit[5] === 's') {\n          this.value *= 1000;\n        } // store unit\n\n\n        this.unit = unit[5];\n      }\n    } else {\n      if (value instanceof SVGNumber) {\n        this.value = value.valueOf();\n        this.unit = value.unit;\n      }\n    }\n\n    return this;\n  } // Subtract number\n\n\n  minus(number) {\n    number = new SVGNumber(number);\n    return new SVGNumber(this - number, this.unit || number.unit);\n  } // Add number\n\n\n  plus(number) {\n    number = new SVGNumber(number);\n    return new SVGNumber(this + number, this.unit || number.unit);\n  } // Multiply number\n\n\n  times(number) {\n    number = new SVGNumber(number);\n    return new SVGNumber(this * number, this.unit || number.unit);\n  }\n\n  toArray() {\n    return [this.value, this.unit];\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n\n  toString() {\n    return (this.unit === '%' ? ~~(this.value * 1e8) / 1e6 : this.unit === 's' ? this.value / 1e3 : this.value) + this.unit;\n  }\n\n  valueOf() {\n    return this.value;\n  }\n\n}\n\nconst hooks = [];\nfunction registerAttrHook(fn) {\n  hooks.push(fn);\n} // Set svg element attribute\n\nfunction attr(attr, val, ns) {\n  // act as full getter\n  if (attr == null) {\n    // get an object of attributes\n    attr = {};\n    val = this.node.attributes;\n\n    for (const node of val) {\n      attr[node.nodeName] = isNumber.test(node.nodeValue) ? parseFloat(node.nodeValue) : node.nodeValue;\n    }\n\n    return attr;\n  } else if (attr instanceof Array) {\n    // loop through array and get all values\n    return attr.reduce((last, curr) => {\n      last[curr] = this.attr(curr);\n      return last;\n    }, {});\n  } else if (typeof attr === 'object' && attr.constructor === Object) {\n    // apply every attribute individually if an object is passed\n    for (val in attr) this.attr(val, attr[val]);\n  } else if (val === null) {\n    // remove value\n    this.node.removeAttribute(attr);\n  } else if (val == null) {\n    // act as a getter if the first and only argument is not an object\n    val = this.node.getAttribute(attr);\n    return val == null ? attrs[attr] : isNumber.test(val) ? parseFloat(val) : val;\n  } else {\n    // Loop through hooks and execute them to convert value\n    val = hooks.reduce((_val, hook) => {\n      return hook(attr, _val, this);\n    }, val); // ensure correct numeric values (also accepts NaN and Infinity)\n\n    if (typeof val === 'number') {\n      val = new SVGNumber(val);\n    } else if (Color.isColor(val)) {\n      // ensure full hex color\n      val = new Color(val);\n    } else if (val.constructor === Array) {\n      // Check for plain arrays and parse array values\n      val = new SVGArray(val);\n    } // if the passed attribute is leading...\n\n\n    if (attr === 'leading') {\n      // ... call the leading method instead\n      if (this.leading) {\n        this.leading(val);\n      }\n    } else {\n      // set given attribute on node\n      typeof ns === 'string' ? this.node.setAttributeNS(ns, attr, val.toString()) : this.node.setAttribute(attr, val.toString());\n    } // rebuild if required\n\n\n    if (this.rebuild && (attr === 'font-size' || attr === 'x')) {\n      this.rebuild();\n    }\n  }\n\n  return this;\n}\n\nclass Dom extends EventTarget {\n  constructor(node, attrs) {\n    super();\n    this.node = node;\n    this.type = node.nodeName;\n\n    if (attrs && node !== attrs) {\n      this.attr(attrs);\n    }\n  } // Add given element at a position\n\n\n  add(element, i) {\n    element = makeInstance(element); // If non-root svg nodes are added we have to remove their namespaces\n\n    if (element.removeNamespace && this.node instanceof globals.window.SVGElement) {\n      element.removeNamespace();\n    }\n\n    if (i == null) {\n      this.node.appendChild(element.node);\n    } else if (element.node !== this.node.childNodes[i]) {\n      this.node.insertBefore(element.node, this.node.childNodes[i]);\n    }\n\n    return this;\n  } // Add element to given container and return self\n\n\n  addTo(parent, i) {\n    return makeInstance(parent).put(this, i);\n  } // Returns all child elements\n\n\n  children() {\n    return new List(map(this.node.children, function (node) {\n      return adopt(node);\n    }));\n  } // Remove all elements in this container\n\n\n  clear() {\n    // remove children\n    while (this.node.hasChildNodes()) {\n      this.node.removeChild(this.node.lastChild);\n    }\n\n    return this;\n  } // Clone element\n\n\n  clone(deep = true) {\n    // write dom data to the dom so the clone can pickup the data\n    this.writeDataToDom(); // clone element and assign new id\n\n    return new this.constructor(assignNewId(this.node.cloneNode(deep)));\n  } // Iterates over all children and invokes a given block\n\n\n  each(block, deep) {\n    const children = this.children();\n    let i, il;\n\n    for (i = 0, il = children.length; i < il; i++) {\n      block.apply(children[i], [i, children]);\n\n      if (deep) {\n        children[i].each(block, deep);\n      }\n    }\n\n    return this;\n  }\n\n  element(nodeName, attrs) {\n    return this.put(new Dom(create(nodeName), attrs));\n  } // Get first child\n\n\n  first() {\n    return adopt(this.node.firstChild);\n  } // Get a element at the given index\n\n\n  get(i) {\n    return adopt(this.node.childNodes[i]);\n  }\n\n  getEventHolder() {\n    return this.node;\n  }\n\n  getEventTarget() {\n    return this.node;\n  } // Checks if the given element is a child\n\n\n  has(element) {\n    return this.index(element) >= 0;\n  }\n\n  html(htmlOrFn, outerHTML) {\n    return this.xml(htmlOrFn, outerHTML, html);\n  } // Get / set id\n\n\n  id(id) {\n    // generate new id if no id set\n    if (typeof id === 'undefined' && !this.node.id) {\n      this.node.id = eid(this.type);\n    } // don't set directly with this.node.id to make `null` work correctly\n\n\n    return this.attr('id', id);\n  } // Gets index of given element\n\n\n  index(element) {\n    return [].slice.call(this.node.childNodes).indexOf(element.node);\n  } // Get the last child\n\n\n  last() {\n    return adopt(this.node.lastChild);\n  } // matches the element vs a css selector\n\n\n  matches(selector) {\n    const el = this.node;\n    const matcher = el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector || null;\n    return matcher && matcher.call(el, selector);\n  } // Returns the parent element instance\n\n\n  parent(type) {\n    let parent = this; // check for parent\n\n    if (!parent.node.parentNode) return null; // get parent element\n\n    parent = adopt(parent.node.parentNode);\n    if (!type) return parent; // loop trough ancestors if type is given\n\n    do {\n      if (typeof type === 'string' ? parent.matches(type) : parent instanceof type) return parent;\n    } while (parent = adopt(parent.node.parentNode));\n\n    return parent;\n  } // Basically does the same as `add()` but returns the added element instead\n\n\n  put(element, i) {\n    element = makeInstance(element);\n    this.add(element, i);\n    return element;\n  } // Add element to given container and return container\n\n\n  putIn(parent, i) {\n    return makeInstance(parent).add(this, i);\n  } // Remove element\n\n\n  remove() {\n    if (this.parent()) {\n      this.parent().removeElement(this);\n    }\n\n    return this;\n  } // Remove a given child\n\n\n  removeElement(element) {\n    this.node.removeChild(element.node);\n    return this;\n  } // Replace this with element\n\n\n  replace(element) {\n    element = makeInstance(element);\n\n    if (this.node.parentNode) {\n      this.node.parentNode.replaceChild(element.node, this.node);\n    }\n\n    return element;\n  }\n\n  round(precision = 2, map = null) {\n    const factor = 10 ** precision;\n    const attrs = this.attr(map);\n\n    for (const i in attrs) {\n      if (typeof attrs[i] === 'number') {\n        attrs[i] = Math.round(attrs[i] * factor) / factor;\n      }\n    }\n\n    this.attr(attrs);\n    return this;\n  } // Import / Export raw svg\n\n\n  svg(svgOrFn, outerSVG) {\n    return this.xml(svgOrFn, outerSVG, svg);\n  } // Return id on string conversion\n\n\n  toString() {\n    return this.id();\n  }\n\n  words(text) {\n    // This is faster than removing all children and adding a new one\n    this.node.textContent = text;\n    return this;\n  }\n\n  wrap(node) {\n    const parent = this.parent();\n\n    if (!parent) {\n      return this.addTo(node);\n    }\n\n    const position = parent.index(this);\n    return parent.put(node, position).put(this);\n  } // write svgjs data to the dom\n\n\n  writeDataToDom() {\n    // dump variables recursively\n    this.each(function () {\n      this.writeDataToDom();\n    });\n    return this;\n  } // Import / Export raw svg\n\n\n  xml(xmlOrFn, outerXML, ns) {\n    if (typeof xmlOrFn === 'boolean') {\n      ns = outerXML;\n      outerXML = xmlOrFn;\n      xmlOrFn = null;\n    } // act as getter if no svg string is given\n\n\n    if (xmlOrFn == null || typeof xmlOrFn === 'function') {\n      // The default for exports is, that the outerNode is included\n      outerXML = outerXML == null ? true : outerXML; // write svgjs data to the dom\n\n      this.writeDataToDom();\n      let current = this; // An export modifier was passed\n\n      if (xmlOrFn != null) {\n        current = adopt(current.node.cloneNode(true)); // If the user wants outerHTML we need to process this node, too\n\n        if (outerXML) {\n          const result = xmlOrFn(current);\n          current = result || current; // The user does not want this node? Well, then he gets nothing\n\n          if (result === false) return '';\n        } // Deep loop through all children and apply modifier\n\n\n        current.each(function () {\n          const result = xmlOrFn(this);\n\n          const _this = result || this; // If modifier returns false, discard node\n\n\n          if (result === false) {\n            this.remove(); // If modifier returns new node, use it\n          } else if (result && this !== _this) {\n            this.replace(_this);\n          }\n        }, true);\n      } // Return outer or inner content\n\n\n      return outerXML ? current.node.outerHTML : current.node.innerHTML;\n    } // Act as setter if we got a string\n    // The default for import is, that the current node is not replaced\n\n\n    outerXML = outerXML == null ? false : outerXML; // Create temporary holder\n\n    const well = create('wrapper', ns);\n    const fragment = globals.document.createDocumentFragment(); // Dump raw svg\n\n    well.innerHTML = xmlOrFn; // Transplant nodes into the fragment\n\n    for (let len = well.children.length; len--;) {\n      fragment.appendChild(well.firstElementChild);\n    }\n\n    const parent = this.parent(); // Add the whole fragment at once\n\n    return outerXML ? this.replace(fragment) && parent : this.add(fragment);\n  }\n\n}\nextend(Dom, {\n  attr,\n  find,\n  findOne\n});\nregister(Dom, 'Dom');\n\nclass Element extends Dom {\n  constructor(node, attrs) {\n    super(node, attrs); // initialize data object\n\n    this.dom = {}; // create circular reference\n\n    this.node.instance = this;\n\n    if (node.hasAttribute('svgjs:data')) {\n      // pull svgjs data from the dom (getAttributeNS doesn't work in html5)\n      this.setData(JSON.parse(node.getAttribute('svgjs:data')) || {});\n    }\n  } // Move element by its center\n\n\n  center(x, y) {\n    return this.cx(x).cy(y);\n  } // Move by center over x-axis\n\n\n  cx(x) {\n    return x == null ? this.x() + this.width() / 2 : this.x(x - this.width() / 2);\n  } // Move by center over y-axis\n\n\n  cy(y) {\n    return y == null ? this.y() + this.height() / 2 : this.y(y - this.height() / 2);\n  } // Get defs\n\n\n  defs() {\n    const root = this.root();\n    return root && root.defs();\n  } // Relative move over x and y axes\n\n\n  dmove(x, y) {\n    return this.dx(x).dy(y);\n  } // Relative move over x axis\n\n\n  dx(x = 0) {\n    return this.x(new SVGNumber(x).plus(this.x()));\n  } // Relative move over y axis\n\n\n  dy(y = 0) {\n    return this.y(new SVGNumber(y).plus(this.y()));\n  }\n\n  getEventHolder() {\n    return this;\n  } // Set height of element\n\n\n  height(height) {\n    return this.attr('height', height);\n  } // Move element to given x and y values\n\n\n  move(x, y) {\n    return this.x(x).y(y);\n  } // return array of all ancestors of given type up to the root svg\n\n\n  parents(until = this.root()) {\n    const isSelector = typeof until === 'string';\n\n    if (!isSelector) {\n      until = makeInstance(until);\n    }\n\n    const parents = new List();\n    let parent = this;\n\n    while ((parent = parent.parent()) && parent.node !== globals.document && parent.nodeName !== '#document-fragment') {\n      parents.push(parent);\n\n      if (!isSelector && parent.node === until.node) {\n        break;\n      }\n\n      if (isSelector && parent.matches(until)) {\n        break;\n      }\n\n      if (parent.node === this.root().node) {\n        // We worked our way to the root and didn't match `until`\n        return null;\n      }\n    }\n\n    return parents;\n  } // Get referenced element form attribute value\n\n\n  reference(attr) {\n    attr = this.attr(attr);\n    if (!attr) return null;\n    const m = (attr + '').match(reference);\n    return m ? makeInstance(m[1]) : null;\n  } // Get parent document\n\n\n  root() {\n    const p = this.parent(getClass(root));\n    return p && p.root();\n  } // set given data to the elements data property\n\n\n  setData(o) {\n    this.dom = o;\n    return this;\n  } // Set element size to given width and height\n\n\n  size(width, height) {\n    const p = proportionalSize(this, width, height);\n    return this.width(new SVGNumber(p.width)).height(new SVGNumber(p.height));\n  } // Set width of element\n\n\n  width(width) {\n    return this.attr('width', width);\n  } // write svgjs data to the dom\n\n\n  writeDataToDom() {\n    // remove previously set data\n    this.node.removeAttribute('svgjs:data');\n\n    if (Object.keys(this.dom).length) {\n      this.node.setAttribute('svgjs:data', JSON.stringify(this.dom)); // see #428\n    }\n\n    return super.writeDataToDom();\n  } // Move over x-axis\n\n\n  x(x) {\n    return this.attr('x', x);\n  } // Move over y-axis\n\n\n  y(y) {\n    return this.attr('y', y);\n  }\n\n}\nextend(Element, {\n  bbox,\n  rbox,\n  inside,\n  point,\n  ctm,\n  screenCTM\n});\nregister(Element, 'Element');\n\nconst sugar = {\n  stroke: ['color', 'width', 'opacity', 'linecap', 'linejoin', 'miterlimit', 'dasharray', 'dashoffset'],\n  fill: ['color', 'opacity', 'rule'],\n  prefix: function (t, a) {\n    return a === 'color' ? t : t + '-' + a;\n  }\n} // Add sugar for fill and stroke\n;\n['fill', 'stroke'].forEach(function (m) {\n  const extension = {};\n  let i;\n\n  extension[m] = function (o) {\n    if (typeof o === 'undefined') {\n      return this.attr(m);\n    }\n\n    if (typeof o === 'string' || o instanceof Color || Color.isRgb(o) || o instanceof Element) {\n      this.attr(m, o);\n    } else {\n      // set all attributes from sugar.fill and sugar.stroke list\n      for (i = sugar[m].length - 1; i >= 0; i--) {\n        if (o[sugar[m][i]] != null) {\n          this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]]);\n        }\n      }\n    }\n\n    return this;\n  };\n\n  registerMethods(['Element', 'Runner'], extension);\n});\nregisterMethods(['Element', 'Runner'], {\n  // Let the user set the matrix directly\n  matrix: function (mat, b, c, d, e, f) {\n    // Act as a getter\n    if (mat == null) {\n      return new Matrix(this);\n    } // Act as a setter, the user can pass a matrix or a set of numbers\n\n\n    return this.attr('transform', new Matrix(mat, b, c, d, e, f));\n  },\n  // Map rotation to transform\n  rotate: function (angle, cx, cy) {\n    return this.transform({\n      rotate: angle,\n      ox: cx,\n      oy: cy\n    }, true);\n  },\n  // Map skew to transform\n  skew: function (x, y, cx, cy) {\n    return arguments.length === 1 || arguments.length === 3 ? this.transform({\n      skew: x,\n      ox: y,\n      oy: cx\n    }, true) : this.transform({\n      skew: [x, y],\n      ox: cx,\n      oy: cy\n    }, true);\n  },\n  shear: function (lam, cx, cy) {\n    return this.transform({\n      shear: lam,\n      ox: cx,\n      oy: cy\n    }, true);\n  },\n  // Map scale to transform\n  scale: function (x, y, cx, cy) {\n    return arguments.length === 1 || arguments.length === 3 ? this.transform({\n      scale: x,\n      ox: y,\n      oy: cx\n    }, true) : this.transform({\n      scale: [x, y],\n      ox: cx,\n      oy: cy\n    }, true);\n  },\n  // Map translate to transform\n  translate: function (x, y) {\n    return this.transform({\n      translate: [x, y]\n    }, true);\n  },\n  // Map relative translations to transform\n  relative: function (x, y) {\n    return this.transform({\n      relative: [x, y]\n    }, true);\n  },\n  // Map flip to transform\n  flip: function (direction = 'both', origin = 'center') {\n    if ('xybothtrue'.indexOf(direction) === -1) {\n      origin = direction;\n      direction = 'both';\n    }\n\n    return this.transform({\n      flip: direction,\n      origin: origin\n    }, true);\n  },\n  // Opacity\n  opacity: function (value) {\n    return this.attr('opacity', value);\n  }\n});\nregisterMethods('radius', {\n  // Add x and y radius\n  radius: function (x, y = x) {\n    const type = (this._element || this).type;\n    return type === 'radialGradient' ? this.attr('r', new SVGNumber(x)) : this.rx(x).ry(y);\n  }\n});\nregisterMethods('Path', {\n  // Get path length\n  length: function () {\n    return this.node.getTotalLength();\n  },\n  // Get point at length\n  pointAt: function (length) {\n    return new Point(this.node.getPointAtLength(length));\n  }\n});\nregisterMethods(['Element', 'Runner'], {\n  // Set font\n  font: function (a, v) {\n    if (typeof a === 'object') {\n      for (v in a) this.font(v, a[v]);\n\n      return this;\n    }\n\n    return a === 'leading' ? this.leading(v) : a === 'anchor' ? this.attr('text-anchor', v) : a === 'size' || a === 'family' || a === 'weight' || a === 'stretch' || a === 'variant' || a === 'style' ? this.attr('font-' + a, v) : this.attr(a, v);\n  }\n}); // Add events to elements\n\nconst methods = ['click', 'dblclick', 'mousedown', 'mouseup', 'mouseover', 'mouseout', 'mousemove', 'mouseenter', 'mouseleave', 'touchstart', 'touchmove', 'touchleave', 'touchend', 'touchcancel'].reduce(function (last, event) {\n  // add event to Element\n  const fn = function (f) {\n    if (f === null) {\n      this.off(event);\n    } else {\n      this.on(event, f);\n    }\n\n    return this;\n  };\n\n  last[event] = fn;\n  return last;\n}, {});\nregisterMethods('Element', methods);\n\nfunction untransform() {\n  return this.attr('transform', null);\n} // merge the whole transformation chain into one matrix and returns it\n\nfunction matrixify() {\n  const matrix = (this.attr('transform') || '' // split transformations\n  ).split(transforms).slice(0, -1).map(function (str) {\n    // generate key => value pairs\n    const kv = str.trim().split('(');\n    return [kv[0], kv[1].split(delimiter).map(function (str) {\n      return parseFloat(str);\n    })];\n  }).reverse() // merge every transformation into one matrix\n  .reduce(function (matrix, transform) {\n    if (transform[0] === 'matrix') {\n      return matrix.lmultiply(Matrix.fromArray(transform[1]));\n    }\n\n    return matrix[transform[0]].apply(matrix, transform[1]);\n  }, new Matrix());\n  return matrix;\n} // add an element to another parent without changing the visual representation on the screen\n\nfunction toParent(parent, i) {\n  if (this === parent) return this;\n  const ctm = this.screenCTM();\n  const pCtm = parent.screenCTM().inverse();\n  this.addTo(parent, i).untransform().transform(pCtm.multiply(ctm));\n  return this;\n} // same as above with parent equals root-svg\n\nfunction toRoot(i) {\n  return this.toParent(this.root(), i);\n} // Add transformations\n\nfunction transform(o, relative) {\n  // Act as a getter if no object was passed\n  if (o == null || typeof o === 'string') {\n    const decomposed = new Matrix(this).decompose();\n    return o == null ? decomposed : decomposed[o];\n  }\n\n  if (!Matrix.isMatrixLike(o)) {\n    // Set the origin according to the defined transform\n    o = { ...o,\n      origin: getOrigin(o, this)\n    };\n  } // The user can pass a boolean, an Element or an Matrix or nothing\n\n\n  const cleanRelative = relative === true ? this : relative || false;\n  const result = new Matrix(cleanRelative).transform(o);\n  return this.attr('transform', result);\n}\nregisterMethods('Element', {\n  untransform,\n  matrixify,\n  toParent,\n  toRoot,\n  transform\n});\n\nclass Container extends Element {\n  flatten(parent = this, index) {\n    this.each(function () {\n      if (this instanceof Container) {\n        return this.flatten().ungroup();\n      }\n    });\n    return this;\n  }\n\n  ungroup(parent = this.parent(), index = parent.index(this)) {\n    // when parent != this, we want append all elements to the end\n    index = index === -1 ? parent.children().length : index;\n    this.each(function (i, children) {\n      // reverse each\n      return children[children.length - i - 1].toParent(parent, index);\n    });\n    return this.remove();\n  }\n\n}\nregister(Container, 'Container');\n\nclass Defs extends Container {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('defs', node), attrs);\n  }\n\n  flatten() {\n    return this;\n  }\n\n  ungroup() {\n    return this;\n  }\n\n}\nregister(Defs, 'Defs');\n\nclass Shape extends Element {}\nregister(Shape, 'Shape');\n\nfunction rx(rx) {\n  return this.attr('rx', rx);\n} // Radius y value\n\nfunction ry(ry) {\n  return this.attr('ry', ry);\n} // Move over x-axis\n\nfunction x$3(x) {\n  return x == null ? this.cx() - this.rx() : this.cx(x + this.rx());\n} // Move over y-axis\n\nfunction y$3(y) {\n  return y == null ? this.cy() - this.ry() : this.cy(y + this.ry());\n} // Move by center over x-axis\n\nfunction cx$1(x) {\n  return this.attr('cx', x);\n} // Move by center over y-axis\n\nfunction cy$1(y) {\n  return this.attr('cy', y);\n} // Set width of element\n\nfunction width$2(width) {\n  return width == null ? this.rx() * 2 : this.rx(new SVGNumber(width).divide(2));\n} // Set height of element\n\nfunction height$2(height) {\n  return height == null ? this.ry() * 2 : this.ry(new SVGNumber(height).divide(2));\n}\n\nvar circled = {\n  __proto__: null,\n  rx: rx,\n  ry: ry,\n  x: x$3,\n  y: y$3,\n  cx: cx$1,\n  cy: cy$1,\n  width: width$2,\n  height: height$2\n};\n\nclass Ellipse extends Shape {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('ellipse', node), attrs);\n  }\n\n  size(width, height) {\n    const p = proportionalSize(this, width, height);\n    return this.rx(new SVGNumber(p.width).divide(2)).ry(new SVGNumber(p.height).divide(2));\n  }\n\n}\nextend(Ellipse, circled);\nregisterMethods('Container', {\n  // Create an ellipse\n  ellipse: wrapWithAttrCheck(function (width = 0, height = width) {\n    return this.put(new Ellipse()).size(width, height).move(0, 0);\n  })\n});\nregister(Ellipse, 'Ellipse');\n\nclass Fragment extends Dom {\n  constructor(node = globals.document.createDocumentFragment()) {\n    super(node);\n  } // Import / Export raw xml\n\n\n  xml(xmlOrFn, outerXML, ns) {\n    if (typeof xmlOrFn === 'boolean') {\n      ns = outerXML;\n      outerXML = xmlOrFn;\n      xmlOrFn = null;\n    } // because this is a fragment we have to put all elements into a wrapper first\n    // before we can get the innerXML from it\n\n\n    if (xmlOrFn == null || typeof xmlOrFn === 'function') {\n      const wrapper = new Dom(create('wrapper', ns));\n      wrapper.add(this.node.cloneNode(true));\n      return wrapper.xml(false, ns);\n    } // Act as setter if we got a string\n\n\n    return super.xml(xmlOrFn, false, ns);\n  }\n\n}\n\nregister(Fragment, 'Fragment');\n\nfunction from(x, y) {\n  return (this._element || this).type === 'radialGradient' ? this.attr({\n    fx: new SVGNumber(x),\n    fy: new SVGNumber(y)\n  }) : this.attr({\n    x1: new SVGNumber(x),\n    y1: new SVGNumber(y)\n  });\n}\nfunction to(x, y) {\n  return (this._element || this).type === 'radialGradient' ? this.attr({\n    cx: new SVGNumber(x),\n    cy: new SVGNumber(y)\n  }) : this.attr({\n    x2: new SVGNumber(x),\n    y2: new SVGNumber(y)\n  });\n}\n\nvar gradiented = {\n  __proto__: null,\n  from: from,\n  to: to\n};\n\nclass Gradient extends Container {\n  constructor(type, attrs) {\n    super(nodeOrNew(type + 'Gradient', typeof type === 'string' ? null : type), attrs);\n  } // custom attr to handle transform\n\n\n  attr(a, b, c) {\n    if (a === 'transform') a = 'gradientTransform';\n    return super.attr(a, b, c);\n  }\n\n  bbox() {\n    return new Box();\n  }\n\n  targets() {\n    return baseFind('svg [fill*=\"' + this.id() + '\"]');\n  } // Alias string conversion to fill\n\n\n  toString() {\n    return this.url();\n  } // Update gradient\n\n\n  update(block) {\n    // remove all stops\n    this.clear(); // invoke passed block\n\n    if (typeof block === 'function') {\n      block.call(this, this);\n    }\n\n    return this;\n  } // Return the fill id\n\n\n  url() {\n    return 'url(\"#' + this.id() + '\")';\n  }\n\n}\nextend(Gradient, gradiented);\nregisterMethods({\n  Container: {\n    // Create gradient element in defs\n    gradient(...args) {\n      return this.defs().gradient(...args);\n    }\n\n  },\n  // define gradient\n  Defs: {\n    gradient: wrapWithAttrCheck(function (type, block) {\n      return this.put(new Gradient(type)).update(block);\n    })\n  }\n});\nregister(Gradient, 'Gradient');\n\nclass Pattern extends Container {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('pattern', node), attrs);\n  } // custom attr to handle transform\n\n\n  attr(a, b, c) {\n    if (a === 'transform') a = 'patternTransform';\n    return super.attr(a, b, c);\n  }\n\n  bbox() {\n    return new Box();\n  }\n\n  targets() {\n    return baseFind('svg [fill*=\"' + this.id() + '\"]');\n  } // Alias string conversion to fill\n\n\n  toString() {\n    return this.url();\n  } // Update pattern by rebuilding\n\n\n  update(block) {\n    // remove content\n    this.clear(); // invoke passed block\n\n    if (typeof block === 'function') {\n      block.call(this, this);\n    }\n\n    return this;\n  } // Return the fill id\n\n\n  url() {\n    return 'url(\"#' + this.id() + '\")';\n  }\n\n}\nregisterMethods({\n  Container: {\n    // Create pattern element in defs\n    pattern(...args) {\n      return this.defs().pattern(...args);\n    }\n\n  },\n  Defs: {\n    pattern: wrapWithAttrCheck(function (width, height, block) {\n      return this.put(new Pattern()).update(block).attr({\n        x: 0,\n        y: 0,\n        width: width,\n        height: height,\n        patternUnits: 'userSpaceOnUse'\n      });\n    })\n  }\n});\nregister(Pattern, 'Pattern');\n\nclass Image extends Shape {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('image', node), attrs);\n  } // (re)load image\n\n\n  load(url, callback) {\n    if (!url) return this;\n    const img = new globals.window.Image();\n    on(img, 'load', function (e) {\n      const p = this.parent(Pattern); // ensure image size\n\n      if (this.width() === 0 && this.height() === 0) {\n        this.size(img.width, img.height);\n      }\n\n      if (p instanceof Pattern) {\n        // ensure pattern size if not set\n        if (p.width() === 0 && p.height() === 0) {\n          p.size(this.width(), this.height());\n        }\n      }\n\n      if (typeof callback === 'function') {\n        callback.call(this, e);\n      }\n    }, this);\n    on(img, 'load error', function () {\n      // dont forget to unbind memory leaking events\n      off(img);\n    });\n    return this.attr('href', img.src = url, xlink);\n  }\n\n}\nregisterAttrHook(function (attr, val, _this) {\n  // convert image fill and stroke to patterns\n  if (attr === 'fill' || attr === 'stroke') {\n    if (isImage.test(val)) {\n      val = _this.root().defs().image(val);\n    }\n  }\n\n  if (val instanceof Image) {\n    val = _this.root().defs().pattern(0, 0, pattern => {\n      pattern.add(val);\n    });\n  }\n\n  return val;\n});\nregisterMethods({\n  Container: {\n    // create image element, load image and set its size\n    image: wrapWithAttrCheck(function (source, callback) {\n      return this.put(new Image()).size(0, 0).load(source, callback);\n    })\n  }\n});\nregister(Image, 'Image');\n\nclass PointArray extends SVGArray {\n  // Get bounding box of points\n  bbox() {\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n    let minX = Infinity;\n    let minY = Infinity;\n    this.forEach(function (el) {\n      maxX = Math.max(el[0], maxX);\n      maxY = Math.max(el[1], maxY);\n      minX = Math.min(el[0], minX);\n      minY = Math.min(el[1], minY);\n    });\n    return new Box(minX, minY, maxX - minX, maxY - minY);\n  } // Move point string\n\n\n  move(x, y) {\n    const box = this.bbox(); // get relative offset\n\n    x -= box.x;\n    y -= box.y; // move every point\n\n    if (!isNaN(x) && !isNaN(y)) {\n      for (let i = this.length - 1; i >= 0; i--) {\n        this[i] = [this[i][0] + x, this[i][1] + y];\n      }\n    }\n\n    return this;\n  } // Parse point string and flat array\n\n\n  parse(array = [0, 0]) {\n    const points = []; // if it is an array, we flatten it and therefore clone it to 1 depths\n\n    if (array instanceof Array) {\n      array = Array.prototype.concat.apply([], array);\n    } else {\n      // Else, it is considered as a string\n      // parse points\n      array = array.trim().split(delimiter).map(parseFloat);\n    } // validate points - https://svgwg.org/svg2-draft/shapes.html#DataTypePoints\n    // Odd number of coordinates is an error. In such cases, drop the last odd coordinate.\n\n\n    if (array.length % 2 !== 0) array.pop(); // wrap points in two-tuples\n\n    for (let i = 0, len = array.length; i < len; i = i + 2) {\n      points.push([array[i], array[i + 1]]);\n    }\n\n    return points;\n  } // Resize poly string\n\n\n  size(width, height) {\n    let i;\n    const box = this.bbox(); // recalculate position of all points according to new size\n\n    for (i = this.length - 1; i >= 0; i--) {\n      if (box.width) this[i][0] = (this[i][0] - box.x) * width / box.width + box.x;\n      if (box.height) this[i][1] = (this[i][1] - box.y) * height / box.height + box.y;\n    }\n\n    return this;\n  } // Convert array to line object\n\n\n  toLine() {\n    return {\n      x1: this[0][0],\n      y1: this[0][1],\n      x2: this[1][0],\n      y2: this[1][1]\n    };\n  } // Convert array to string\n\n\n  toString() {\n    const array = []; // convert to a poly point string\n\n    for (let i = 0, il = this.length; i < il; i++) {\n      array.push(this[i].join(','));\n    }\n\n    return array.join(' ');\n  }\n\n  transform(m) {\n    return this.clone().transformO(m);\n  } // transform points with matrix (similar to Point.transform)\n\n\n  transformO(m) {\n    if (!Matrix.isMatrixLike(m)) {\n      m = new Matrix(m);\n    }\n\n    for (let i = this.length; i--;) {\n      // Perform the matrix multiplication\n      const [x, y] = this[i];\n      this[i][0] = m.a * x + m.c * y + m.e;\n      this[i][1] = m.b * x + m.d * y + m.f;\n    }\n\n    return this;\n  }\n\n}\n\nconst MorphArray = PointArray; // Move by left top corner over x-axis\n\nfunction x$2(x) {\n  return x == null ? this.bbox().x : this.move(x, this.bbox().y);\n} // Move by left top corner over y-axis\n\nfunction y$2(y) {\n  return y == null ? this.bbox().y : this.move(this.bbox().x, y);\n} // Set width of element\n\nfunction width$1(width) {\n  const b = this.bbox();\n  return width == null ? b.width : this.size(width, b.height);\n} // Set height of element\n\nfunction height$1(height) {\n  const b = this.bbox();\n  return height == null ? b.height : this.size(b.width, height);\n}\n\nvar pointed = {\n  __proto__: null,\n  MorphArray: MorphArray,\n  x: x$2,\n  y: y$2,\n  width: width$1,\n  height: height$1\n};\n\nclass Line extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('line', node), attrs);\n  } // Get array\n\n\n  array() {\n    return new PointArray([[this.attr('x1'), this.attr('y1')], [this.attr('x2'), this.attr('y2')]]);\n  } // Move by left top corner\n\n\n  move(x, y) {\n    return this.attr(this.array().move(x, y).toLine());\n  } // Overwrite native plot() method\n\n\n  plot(x1, y1, x2, y2) {\n    if (x1 == null) {\n      return this.array();\n    } else if (typeof y1 !== 'undefined') {\n      x1 = {\n        x1,\n        y1,\n        x2,\n        y2\n      };\n    } else {\n      x1 = new PointArray(x1).toLine();\n    }\n\n    return this.attr(x1);\n  } // Set element size to given width and height\n\n\n  size(width, height) {\n    const p = proportionalSize(this, width, height);\n    return this.attr(this.array().size(p.width, p.height).toLine());\n  }\n\n}\nextend(Line, pointed);\nregisterMethods({\n  Container: {\n    // Create a line element\n    line: wrapWithAttrCheck(function (...args) {\n      // make sure plot is called as a setter\n      // x1 is not necessarily a number, it can also be an array, a string and a PointArray\n      return Line.prototype.plot.apply(this.put(new Line()), args[0] != null ? args : [0, 0, 0, 0]);\n    })\n  }\n});\nregister(Line, 'Line');\n\nclass Marker extends Container {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('marker', node), attrs);\n  } // Set height of element\n\n\n  height(height) {\n    return this.attr('markerHeight', height);\n  }\n\n  orient(orient) {\n    return this.attr('orient', orient);\n  } // Set marker refX and refY\n\n\n  ref(x, y) {\n    return this.attr('refX', x).attr('refY', y);\n  } // Return the fill id\n\n\n  toString() {\n    return 'url(#' + this.id() + ')';\n  } // Update marker\n\n\n  update(block) {\n    // remove all content\n    this.clear(); // invoke passed block\n\n    if (typeof block === 'function') {\n      block.call(this, this);\n    }\n\n    return this;\n  } // Set width of element\n\n\n  width(width) {\n    return this.attr('markerWidth', width);\n  }\n\n}\nregisterMethods({\n  Container: {\n    marker(...args) {\n      // Create marker element in defs\n      return this.defs().marker(...args);\n    }\n\n  },\n  Defs: {\n    // Create marker\n    marker: wrapWithAttrCheck(function (width, height, block) {\n      // Set default viewbox to match the width and height, set ref to cx and cy and set orient to auto\n      return this.put(new Marker()).size(width, height).ref(width / 2, height / 2).viewbox(0, 0, width, height).attr('orient', 'auto').update(block);\n    })\n  },\n  marker: {\n    // Create and attach markers\n    marker(marker, width, height, block) {\n      let attr = ['marker']; // Build attribute name\n\n      if (marker !== 'all') attr.push(marker);\n      attr = attr.join('-'); // Set marker attribute\n\n      marker = arguments[1] instanceof Marker ? arguments[1] : this.defs().marker(width, height, block);\n      return this.attr(attr, marker);\n    }\n\n  }\n});\nregister(Marker, 'Marker');\n\n/***\r\nBase Class\r\n==========\r\nThe base stepper class that will be\r\n***/\n\nfunction makeSetterGetter(k, f) {\n  return function (v) {\n    if (v == null) return this[k];\n    this[k] = v;\n    if (f) f.call(this);\n    return this;\n  };\n}\n\nconst easing = {\n  '-': function (pos) {\n    return pos;\n  },\n  '<>': function (pos) {\n    return -Math.cos(pos * Math.PI) / 2 + 0.5;\n  },\n  '>': function (pos) {\n    return Math.sin(pos * Math.PI / 2);\n  },\n  '<': function (pos) {\n    return -Math.cos(pos * Math.PI / 2) + 1;\n  },\n  bezier: function (x1, y1, x2, y2) {\n    // see https://www.w3.org/TR/css-easing-1/#cubic-bezier-algo\n    return function (t) {\n      if (t < 0) {\n        if (x1 > 0) {\n          return y1 / x1 * t;\n        } else if (x2 > 0) {\n          return y2 / x2 * t;\n        } else {\n          return 0;\n        }\n      } else if (t > 1) {\n        if (x2 < 1) {\n          return (1 - y2) / (1 - x2) * t + (y2 - x2) / (1 - x2);\n        } else if (x1 < 1) {\n          return (1 - y1) / (1 - x1) * t + (y1 - x1) / (1 - x1);\n        } else {\n          return 1;\n        }\n      } else {\n        return 3 * t * (1 - t) ** 2 * y1 + 3 * t ** 2 * (1 - t) * y2 + t ** 3;\n      }\n    };\n  },\n  // see https://www.w3.org/TR/css-easing-1/#step-timing-function-algo\n  steps: function (steps, stepPosition = 'end') {\n    // deal with \"jump-\" prefix\n    stepPosition = stepPosition.split('-').reverse()[0];\n    let jumps = steps;\n\n    if (stepPosition === 'none') {\n      --jumps;\n    } else if (stepPosition === 'both') {\n      ++jumps;\n    } // The beforeFlag is essentially useless\n\n\n    return (t, beforeFlag = false) => {\n      // Step is called currentStep in referenced url\n      let step = Math.floor(t * steps);\n      const jumping = t * step % 1 === 0;\n\n      if (stepPosition === 'start' || stepPosition === 'both') {\n        ++step;\n      }\n\n      if (beforeFlag && jumping) {\n        --step;\n      }\n\n      if (t >= 0 && step < 0) {\n        step = 0;\n      }\n\n      if (t <= 1 && step > jumps) {\n        step = jumps;\n      }\n\n      return step / jumps;\n    };\n  }\n};\nclass Stepper {\n  done() {\n    return false;\n  }\n\n}\n/***\r\nEasing Functions\r\n================\r\n***/\n\nclass Ease extends Stepper {\n  constructor(fn = timeline.ease) {\n    super();\n    this.ease = easing[fn] || fn;\n  }\n\n  step(from, to, pos) {\n    if (typeof from !== 'number') {\n      return pos < 1 ? from : to;\n    }\n\n    return from + (to - from) * this.ease(pos);\n  }\n\n}\n/***\r\nController Types\r\n================\r\n***/\n\nclass Controller extends Stepper {\n  constructor(fn) {\n    super();\n    this.stepper = fn;\n  }\n\n  done(c) {\n    return c.done;\n  }\n\n  step(current, target, dt, c) {\n    return this.stepper(current, target, dt, c);\n  }\n\n}\n\nfunction recalculate() {\n  // Apply the default parameters\n  const duration = (this._duration || 500) / 1000;\n  const overshoot = this._overshoot || 0; // Calculate the PID natural response\n\n  const eps = 1e-10;\n  const pi = Math.PI;\n  const os = Math.log(overshoot / 100 + eps);\n  const zeta = -os / Math.sqrt(pi * pi + os * os);\n  const wn = 3.9 / (zeta * duration); // Calculate the Spring values\n\n  this.d = 2 * zeta * wn;\n  this.k = wn * wn;\n}\n\nclass Spring extends Controller {\n  constructor(duration = 500, overshoot = 0) {\n    super();\n    this.duration(duration).overshoot(overshoot);\n  }\n\n  step(current, target, dt, c) {\n    if (typeof current === 'string') return current;\n    c.done = dt === Infinity;\n    if (dt === Infinity) return target;\n    if (dt === 0) return current;\n    if (dt > 100) dt = 16;\n    dt /= 1000; // Get the previous velocity\n\n    const velocity = c.velocity || 0; // Apply the control to get the new position and store it\n\n    const acceleration = -this.d * velocity - this.k * (current - target);\n    const newPosition = current + velocity * dt + acceleration * dt * dt / 2; // Store the velocity\n\n    c.velocity = velocity + acceleration * dt; // Figure out if we have converged, and if so, pass the value\n\n    c.done = Math.abs(target - newPosition) + Math.abs(velocity) < 0.002;\n    return c.done ? target : newPosition;\n  }\n\n}\nextend(Spring, {\n  duration: makeSetterGetter('_duration', recalculate),\n  overshoot: makeSetterGetter('_overshoot', recalculate)\n});\nclass PID extends Controller {\n  constructor(p = 0.1, i = 0.01, d = 0, windup = 1000) {\n    super();\n    this.p(p).i(i).d(d).windup(windup);\n  }\n\n  step(current, target, dt, c) {\n    if (typeof current === 'string') return current;\n    c.done = dt === Infinity;\n    if (dt === Infinity) return target;\n    if (dt === 0) return current;\n    const p = target - current;\n    let i = (c.integral || 0) + p * dt;\n    const d = (p - (c.error || 0)) / dt;\n    const windup = this._windup; // antiwindup\n\n    if (windup !== false) {\n      i = Math.max(-windup, Math.min(i, windup));\n    }\n\n    c.error = p;\n    c.integral = i;\n    c.done = Math.abs(p) < 0.001;\n    return c.done ? target : current + (this.P * p + this.I * i + this.D * d);\n  }\n\n}\nextend(PID, {\n  windup: makeSetterGetter('_windup'),\n  p: makeSetterGetter('P'),\n  i: makeSetterGetter('I'),\n  d: makeSetterGetter('D')\n});\n\nconst segmentParameters = {\n  M: 2,\n  L: 2,\n  H: 1,\n  V: 1,\n  C: 6,\n  S: 4,\n  Q: 4,\n  T: 2,\n  A: 7,\n  Z: 0\n};\nconst pathHandlers = {\n  M: function (c, p, p0) {\n    p.x = p0.x = c[0];\n    p.y = p0.y = c[1];\n    return ['M', p.x, p.y];\n  },\n  L: function (c, p) {\n    p.x = c[0];\n    p.y = c[1];\n    return ['L', c[0], c[1]];\n  },\n  H: function (c, p) {\n    p.x = c[0];\n    return ['H', c[0]];\n  },\n  V: function (c, p) {\n    p.y = c[0];\n    return ['V', c[0]];\n  },\n  C: function (c, p) {\n    p.x = c[4];\n    p.y = c[5];\n    return ['C', c[0], c[1], c[2], c[3], c[4], c[5]];\n  },\n  S: function (c, p) {\n    p.x = c[2];\n    p.y = c[3];\n    return ['S', c[0], c[1], c[2], c[3]];\n  },\n  Q: function (c, p) {\n    p.x = c[2];\n    p.y = c[3];\n    return ['Q', c[0], c[1], c[2], c[3]];\n  },\n  T: function (c, p) {\n    p.x = c[0];\n    p.y = c[1];\n    return ['T', c[0], c[1]];\n  },\n  Z: function (c, p, p0) {\n    p.x = p0.x;\n    p.y = p0.y;\n    return ['Z'];\n  },\n  A: function (c, p) {\n    p.x = c[5];\n    p.y = c[6];\n    return ['A', c[0], c[1], c[2], c[3], c[4], c[5], c[6]];\n  }\n};\nconst mlhvqtcsaz = 'mlhvqtcsaz'.split('');\n\nfor (let i = 0, il = mlhvqtcsaz.length; i < il; ++i) {\n  pathHandlers[mlhvqtcsaz[i]] = function (i) {\n    return function (c, p, p0) {\n      if (i === 'H') c[0] = c[0] + p.x;else if (i === 'V') c[0] = c[0] + p.y;else if (i === 'A') {\n        c[5] = c[5] + p.x;\n        c[6] = c[6] + p.y;\n      } else {\n        for (let j = 0, jl = c.length; j < jl; ++j) {\n          c[j] = c[j] + (j % 2 ? p.y : p.x);\n        }\n      }\n      return pathHandlers[i](c, p, p0);\n    };\n  }(mlhvqtcsaz[i].toUpperCase());\n}\n\nfunction makeAbsolut(parser) {\n  const command = parser.segment[0];\n  return pathHandlers[command](parser.segment.slice(1), parser.p, parser.p0);\n}\n\nfunction segmentComplete(parser) {\n  return parser.segment.length && parser.segment.length - 1 === segmentParameters[parser.segment[0].toUpperCase()];\n}\n\nfunction startNewSegment(parser, token) {\n  parser.inNumber && finalizeNumber(parser, false);\n  const pathLetter = isPathLetter.test(token);\n\n  if (pathLetter) {\n    parser.segment = [token];\n  } else {\n    const lastCommand = parser.lastCommand;\n    const small = lastCommand.toLowerCase();\n    const isSmall = lastCommand === small;\n    parser.segment = [small === 'm' ? isSmall ? 'l' : 'L' : lastCommand];\n  }\n\n  parser.inSegment = true;\n  parser.lastCommand = parser.segment[0];\n  return pathLetter;\n}\n\nfunction finalizeNumber(parser, inNumber) {\n  if (!parser.inNumber) throw new Error('Parser Error');\n  parser.number && parser.segment.push(parseFloat(parser.number));\n  parser.inNumber = inNumber;\n  parser.number = '';\n  parser.pointSeen = false;\n  parser.hasExponent = false;\n\n  if (segmentComplete(parser)) {\n    finalizeSegment(parser);\n  }\n}\n\nfunction finalizeSegment(parser) {\n  parser.inSegment = false;\n\n  if (parser.absolute) {\n    parser.segment = makeAbsolut(parser);\n  }\n\n  parser.segments.push(parser.segment);\n}\n\nfunction isArcFlag(parser) {\n  if (!parser.segment.length) return false;\n  const isArc = parser.segment[0].toUpperCase() === 'A';\n  const length = parser.segment.length;\n  return isArc && (length === 4 || length === 5);\n}\n\nfunction isExponential(parser) {\n  return parser.lastToken.toUpperCase() === 'E';\n}\n\nfunction pathParser(d, toAbsolute = true) {\n  let index = 0;\n  let token = '';\n  const parser = {\n    segment: [],\n    inNumber: false,\n    number: '',\n    lastToken: '',\n    inSegment: false,\n    segments: [],\n    pointSeen: false,\n    hasExponent: false,\n    absolute: toAbsolute,\n    p0: new Point(),\n    p: new Point()\n  };\n\n  while (parser.lastToken = token, token = d.charAt(index++)) {\n    if (!parser.inSegment) {\n      if (startNewSegment(parser, token)) {\n        continue;\n      }\n    }\n\n    if (token === '.') {\n      if (parser.pointSeen || parser.hasExponent) {\n        finalizeNumber(parser, false);\n        --index;\n        continue;\n      }\n\n      parser.inNumber = true;\n      parser.pointSeen = true;\n      parser.number += token;\n      continue;\n    }\n\n    if (!isNaN(parseInt(token))) {\n      if (parser.number === '0' || isArcFlag(parser)) {\n        parser.inNumber = true;\n        parser.number = token;\n        finalizeNumber(parser, true);\n        continue;\n      }\n\n      parser.inNumber = true;\n      parser.number += token;\n      continue;\n    }\n\n    if (token === ' ' || token === ',') {\n      if (parser.inNumber) {\n        finalizeNumber(parser, false);\n      }\n\n      continue;\n    }\n\n    if (token === '-') {\n      if (parser.inNumber && !isExponential(parser)) {\n        finalizeNumber(parser, false);\n        --index;\n        continue;\n      }\n\n      parser.number += token;\n      parser.inNumber = true;\n      continue;\n    }\n\n    if (token.toUpperCase() === 'E') {\n      parser.number += token;\n      parser.hasExponent = true;\n      continue;\n    }\n\n    if (isPathLetter.test(token)) {\n      if (parser.inNumber) {\n        finalizeNumber(parser, false);\n      } else if (!segmentComplete(parser)) {\n        throw new Error('parser Error');\n      } else {\n        finalizeSegment(parser);\n      }\n\n      --index;\n    }\n  }\n\n  if (parser.inNumber) {\n    finalizeNumber(parser, false);\n  }\n\n  if (parser.inSegment && segmentComplete(parser)) {\n    finalizeSegment(parser);\n  }\n\n  return parser.segments;\n}\n\nfunction arrayToString(a) {\n  let s = '';\n\n  for (let i = 0, il = a.length; i < il; i++) {\n    s += a[i][0];\n\n    if (a[i][1] != null) {\n      s += a[i][1];\n\n      if (a[i][2] != null) {\n        s += ' ';\n        s += a[i][2];\n\n        if (a[i][3] != null) {\n          s += ' ';\n          s += a[i][3];\n          s += ' ';\n          s += a[i][4];\n\n          if (a[i][5] != null) {\n            s += ' ';\n            s += a[i][5];\n            s += ' ';\n            s += a[i][6];\n\n            if (a[i][7] != null) {\n              s += ' ';\n              s += a[i][7];\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return s + ' ';\n}\n\nclass PathArray extends SVGArray {\n  // Get bounding box of path\n  bbox() {\n    parser().path.setAttribute('d', this.toString());\n    return new Box(parser.nodes.path.getBBox());\n  } // Move path string\n\n\n  move(x, y) {\n    // get bounding box of current situation\n    const box = this.bbox(); // get relative offset\n\n    x -= box.x;\n    y -= box.y;\n\n    if (!isNaN(x) && !isNaN(y)) {\n      // move every point\n      for (let l, i = this.length - 1; i >= 0; i--) {\n        l = this[i][0];\n\n        if (l === 'M' || l === 'L' || l === 'T') {\n          this[i][1] += x;\n          this[i][2] += y;\n        } else if (l === 'H') {\n          this[i][1] += x;\n        } else if (l === 'V') {\n          this[i][1] += y;\n        } else if (l === 'C' || l === 'S' || l === 'Q') {\n          this[i][1] += x;\n          this[i][2] += y;\n          this[i][3] += x;\n          this[i][4] += y;\n\n          if (l === 'C') {\n            this[i][5] += x;\n            this[i][6] += y;\n          }\n        } else if (l === 'A') {\n          this[i][6] += x;\n          this[i][7] += y;\n        }\n      }\n    }\n\n    return this;\n  } // Absolutize and parse path to array\n\n\n  parse(d = 'M0 0') {\n    if (Array.isArray(d)) {\n      d = Array.prototype.concat.apply([], d).toString();\n    }\n\n    return pathParser(d);\n  } // Resize path string\n\n\n  size(width, height) {\n    // get bounding box of current situation\n    const box = this.bbox();\n    let i, l; // If the box width or height is 0 then we ignore\n    // transformations on the respective axis\n\n    box.width = box.width === 0 ? 1 : box.width;\n    box.height = box.height === 0 ? 1 : box.height; // recalculate position of all points according to new size\n\n    for (i = this.length - 1; i >= 0; i--) {\n      l = this[i][0];\n\n      if (l === 'M' || l === 'L' || l === 'T') {\n        this[i][1] = (this[i][1] - box.x) * width / box.width + box.x;\n        this[i][2] = (this[i][2] - box.y) * height / box.height + box.y;\n      } else if (l === 'H') {\n        this[i][1] = (this[i][1] - box.x) * width / box.width + box.x;\n      } else if (l === 'V') {\n        this[i][1] = (this[i][1] - box.y) * height / box.height + box.y;\n      } else if (l === 'C' || l === 'S' || l === 'Q') {\n        this[i][1] = (this[i][1] - box.x) * width / box.width + box.x;\n        this[i][2] = (this[i][2] - box.y) * height / box.height + box.y;\n        this[i][3] = (this[i][3] - box.x) * width / box.width + box.x;\n        this[i][4] = (this[i][4] - box.y) * height / box.height + box.y;\n\n        if (l === 'C') {\n          this[i][5] = (this[i][5] - box.x) * width / box.width + box.x;\n          this[i][6] = (this[i][6] - box.y) * height / box.height + box.y;\n        }\n      } else if (l === 'A') {\n        // resize radii\n        this[i][1] = this[i][1] * width / box.width;\n        this[i][2] = this[i][2] * height / box.height; // move position values\n\n        this[i][6] = (this[i][6] - box.x) * width / box.width + box.x;\n        this[i][7] = (this[i][7] - box.y) * height / box.height + box.y;\n      }\n    }\n\n    return this;\n  } // Convert array to string\n\n\n  toString() {\n    return arrayToString(this);\n  }\n\n}\n\nconst getClassForType = value => {\n  const type = typeof value;\n\n  if (type === 'number') {\n    return SVGNumber;\n  } else if (type === 'string') {\n    if (Color.isColor(value)) {\n      return Color;\n    } else if (delimiter.test(value)) {\n      return isPathLetter.test(value) ? PathArray : SVGArray;\n    } else if (numberAndUnit.test(value)) {\n      return SVGNumber;\n    } else {\n      return NonMorphable;\n    }\n  } else if (morphableTypes.indexOf(value.constructor) > -1) {\n    return value.constructor;\n  } else if (Array.isArray(value)) {\n    return SVGArray;\n  } else if (type === 'object') {\n    return ObjectBag;\n  } else {\n    return NonMorphable;\n  }\n};\n\nclass Morphable {\n  constructor(stepper) {\n    this._stepper = stepper || new Ease('-');\n    this._from = null;\n    this._to = null;\n    this._type = null;\n    this._context = null;\n    this._morphObj = null;\n  }\n\n  at(pos) {\n    return this._morphObj.morph(this._from, this._to, pos, this._stepper, this._context);\n  }\n\n  done() {\n    const complete = this._context.map(this._stepper.done).reduce(function (last, curr) {\n      return last && curr;\n    }, true);\n\n    return complete;\n  }\n\n  from(val) {\n    if (val == null) {\n      return this._from;\n    }\n\n    this._from = this._set(val);\n    return this;\n  }\n\n  stepper(stepper) {\n    if (stepper == null) return this._stepper;\n    this._stepper = stepper;\n    return this;\n  }\n\n  to(val) {\n    if (val == null) {\n      return this._to;\n    }\n\n    this._to = this._set(val);\n    return this;\n  }\n\n  type(type) {\n    // getter\n    if (type == null) {\n      return this._type;\n    } // setter\n\n\n    this._type = type;\n    return this;\n  }\n\n  _set(value) {\n    if (!this._type) {\n      this.type(getClassForType(value));\n    }\n\n    let result = new this._type(value);\n\n    if (this._type === Color) {\n      result = this._to ? result[this._to[4]]() : this._from ? result[this._from[4]]() : result;\n    }\n\n    if (this._type === ObjectBag) {\n      result = this._to ? result.align(this._to) : this._from ? result.align(this._from) : result;\n    }\n\n    result = result.toConsumable();\n    this._morphObj = this._morphObj || new this._type();\n    this._context = this._context || Array.apply(null, Array(result.length)).map(Object).map(function (o) {\n      o.done = true;\n      return o;\n    });\n    return result;\n  }\n\n}\nclass NonMorphable {\n  constructor(...args) {\n    this.init(...args);\n  }\n\n  init(val) {\n    val = Array.isArray(val) ? val[0] : val;\n    this.value = val;\n    return this;\n  }\n\n  toArray() {\n    return [this.value];\n  }\n\n  valueOf() {\n    return this.value;\n  }\n\n}\nclass TransformBag {\n  constructor(...args) {\n    this.init(...args);\n  }\n\n  init(obj) {\n    if (Array.isArray(obj)) {\n      obj = {\n        scaleX: obj[0],\n        scaleY: obj[1],\n        shear: obj[2],\n        rotate: obj[3],\n        translateX: obj[4],\n        translateY: obj[5],\n        originX: obj[6],\n        originY: obj[7]\n      };\n    }\n\n    Object.assign(this, TransformBag.defaults, obj);\n    return this;\n  }\n\n  toArray() {\n    const v = this;\n    return [v.scaleX, v.scaleY, v.shear, v.rotate, v.translateX, v.translateY, v.originX, v.originY];\n  }\n\n}\nTransformBag.defaults = {\n  scaleX: 1,\n  scaleY: 1,\n  shear: 0,\n  rotate: 0,\n  translateX: 0,\n  translateY: 0,\n  originX: 0,\n  originY: 0\n};\n\nconst sortByKey = (a, b) => {\n  return a[0] < b[0] ? -1 : a[0] > b[0] ? 1 : 0;\n};\n\nclass ObjectBag {\n  constructor(...args) {\n    this.init(...args);\n  }\n\n  align(other) {\n    const values = this.values;\n\n    for (let i = 0, il = values.length; i < il; ++i) {\n      // If the type is the same we only need to check if the color is in the correct format\n      if (values[i + 1] === other[i + 1]) {\n        if (values[i + 1] === Color && other[i + 7] !== values[i + 7]) {\n          const space = other[i + 7];\n          const color = new Color(this.values.splice(i + 3, 5))[space]().toArray();\n          this.values.splice(i + 3, 0, ...color);\n        }\n\n        i += values[i + 2] + 2;\n        continue;\n      }\n\n      if (!other[i + 1]) {\n        return this;\n      } // The types differ, so we overwrite the new type with the old one\n      // And initialize it with the types default (e.g. black for color or 0 for number)\n\n\n      const defaultObject = new other[i + 1]().toArray(); // Than we fix the values array\n\n      const toDelete = values[i + 2] + 3;\n      values.splice(i, toDelete, other[i], other[i + 1], other[i + 2], ...defaultObject);\n      i += values[i + 2] + 2;\n    }\n\n    return this;\n  }\n\n  init(objOrArr) {\n    this.values = [];\n\n    if (Array.isArray(objOrArr)) {\n      this.values = objOrArr.slice();\n      return;\n    }\n\n    objOrArr = objOrArr || {};\n    const entries = [];\n\n    for (const i in objOrArr) {\n      const Type = getClassForType(objOrArr[i]);\n      const val = new Type(objOrArr[i]).toArray();\n      entries.push([i, Type, val.length, ...val]);\n    }\n\n    entries.sort(sortByKey);\n    this.values = entries.reduce((last, curr) => last.concat(curr), []);\n    return this;\n  }\n\n  toArray() {\n    return this.values;\n  }\n\n  valueOf() {\n    const obj = {};\n    const arr = this.values; // for (var i = 0, len = arr.length; i < len; i += 2) {\n\n    while (arr.length) {\n      const key = arr.shift();\n      const Type = arr.shift();\n      const num = arr.shift();\n      const values = arr.splice(0, num);\n      obj[key] = new Type(values); // .valueOf()\n    }\n\n    return obj;\n  }\n\n}\nconst morphableTypes = [NonMorphable, TransformBag, ObjectBag];\nfunction registerMorphableType(type = []) {\n  morphableTypes.push(...[].concat(type));\n}\nfunction makeMorphable() {\n  extend(morphableTypes, {\n    to(val) {\n      return new Morphable().type(this.constructor).from(this.toArray()) // this.valueOf())\n      .to(val);\n    },\n\n    fromArray(arr) {\n      this.init(arr);\n      return this;\n    },\n\n    toConsumable() {\n      return this.toArray();\n    },\n\n    morph(from, to, pos, stepper, context) {\n      const mapper = function (i, index) {\n        return stepper.step(i, to[index], pos, context[index], context);\n      };\n\n      return this.fromArray(from.map(mapper));\n    }\n\n  });\n}\n\nclass Path extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('path', node), attrs);\n  } // Get array\n\n\n  array() {\n    return this._array || (this._array = new PathArray(this.attr('d')));\n  } // Clear array cache\n\n\n  clear() {\n    delete this._array;\n    return this;\n  } // Set height of element\n\n\n  height(height) {\n    return height == null ? this.bbox().height : this.size(this.bbox().width, height);\n  } // Move by left top corner\n\n\n  move(x, y) {\n    return this.attr('d', this.array().move(x, y));\n  } // Plot new path\n\n\n  plot(d) {\n    return d == null ? this.array() : this.clear().attr('d', typeof d === 'string' ? d : this._array = new PathArray(d));\n  } // Set element size to given width and height\n\n\n  size(width, height) {\n    const p = proportionalSize(this, width, height);\n    return this.attr('d', this.array().size(p.width, p.height));\n  } // Set width of element\n\n\n  width(width) {\n    return width == null ? this.bbox().width : this.size(width, this.bbox().height);\n  } // Move by left top corner over x-axis\n\n\n  x(x) {\n    return x == null ? this.bbox().x : this.move(x, this.bbox().y);\n  } // Move by left top corner over y-axis\n\n\n  y(y) {\n    return y == null ? this.bbox().y : this.move(this.bbox().x, y);\n  }\n\n} // Define morphable array\n\nPath.prototype.MorphArray = PathArray; // Add parent method\n\nregisterMethods({\n  Container: {\n    // Create a wrapped path element\n    path: wrapWithAttrCheck(function (d) {\n      // make sure plot is called as a setter\n      return this.put(new Path()).plot(d || new PathArray());\n    })\n  }\n});\nregister(Path, 'Path');\n\nfunction array() {\n  return this._array || (this._array = new PointArray(this.attr('points')));\n} // Clear array cache\n\nfunction clear() {\n  delete this._array;\n  return this;\n} // Move by left top corner\n\nfunction move$2(x, y) {\n  return this.attr('points', this.array().move(x, y));\n} // Plot new path\n\nfunction plot(p) {\n  return p == null ? this.array() : this.clear().attr('points', typeof p === 'string' ? p : this._array = new PointArray(p));\n} // Set element size to given width and height\n\nfunction size$1(width, height) {\n  const p = proportionalSize(this, width, height);\n  return this.attr('points', this.array().size(p.width, p.height));\n}\n\nvar poly = {\n  __proto__: null,\n  array: array,\n  clear: clear,\n  move: move$2,\n  plot: plot,\n  size: size$1\n};\n\nclass Polygon extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('polygon', node), attrs);\n  }\n\n}\nregisterMethods({\n  Container: {\n    // Create a wrapped polygon element\n    polygon: wrapWithAttrCheck(function (p) {\n      // make sure plot is called as a setter\n      return this.put(new Polygon()).plot(p || new PointArray());\n    })\n  }\n});\nextend(Polygon, pointed);\nextend(Polygon, poly);\nregister(Polygon, 'Polygon');\n\nclass Polyline extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('polyline', node), attrs);\n  }\n\n}\nregisterMethods({\n  Container: {\n    // Create a wrapped polygon element\n    polyline: wrapWithAttrCheck(function (p) {\n      // make sure plot is called as a setter\n      return this.put(new Polyline()).plot(p || new PointArray());\n    })\n  }\n});\nextend(Polyline, pointed);\nextend(Polyline, poly);\nregister(Polyline, 'Polyline');\n\nclass Rect extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('rect', node), attrs);\n  }\n\n}\nextend(Rect, {\n  rx,\n  ry\n});\nregisterMethods({\n  Container: {\n    // Create a rect element\n    rect: wrapWithAttrCheck(function (width, height) {\n      return this.put(new Rect()).size(width, height);\n    })\n  }\n});\nregister(Rect, 'Rect');\n\nclass Queue {\n  constructor() {\n    this._first = null;\n    this._last = null;\n  } // Shows us the first item in the list\n\n\n  first() {\n    return this._first && this._first.value;\n  } // Shows us the last item in the list\n\n\n  last() {\n    return this._last && this._last.value;\n  }\n\n  push(value) {\n    // An item stores an id and the provided value\n    const item = typeof value.next !== 'undefined' ? value : {\n      value: value,\n      next: null,\n      prev: null\n    }; // Deal with the queue being empty or populated\n\n    if (this._last) {\n      item.prev = this._last;\n      this._last.next = item;\n      this._last = item;\n    } else {\n      this._last = item;\n      this._first = item;\n    } // Return the current item\n\n\n    return item;\n  } // Removes the item that was returned from the push\n\n\n  remove(item) {\n    // Relink the previous item\n    if (item.prev) item.prev.next = item.next;\n    if (item.next) item.next.prev = item.prev;\n    if (item === this._last) this._last = item.prev;\n    if (item === this._first) this._first = item.next; // Invalidate item\n\n    item.prev = null;\n    item.next = null;\n  }\n\n  shift() {\n    // Check if we have a value\n    const remove = this._first;\n    if (!remove) return null; // If we do, remove it and relink things\n\n    this._first = remove.next;\n    if (this._first) this._first.prev = null;\n    this._last = this._first ? this._last : null;\n    return remove.value;\n  }\n\n}\n\nconst Animator = {\n  nextDraw: null,\n  frames: new Queue(),\n  timeouts: new Queue(),\n  immediates: new Queue(),\n  timer: () => globals.window.performance || globals.window.Date,\n  transforms: [],\n\n  frame(fn) {\n    // Store the node\n    const node = Animator.frames.push({\n      run: fn\n    }); // Request an animation frame if we don't have one\n\n    if (Animator.nextDraw === null) {\n      Animator.nextDraw = globals.window.requestAnimationFrame(Animator._draw);\n    } // Return the node so we can remove it easily\n\n\n    return node;\n  },\n\n  timeout(fn, delay) {\n    delay = delay || 0; // Work out when the event should fire\n\n    const time = Animator.timer().now() + delay; // Add the timeout to the end of the queue\n\n    const node = Animator.timeouts.push({\n      run: fn,\n      time: time\n    }); // Request another animation frame if we need one\n\n    if (Animator.nextDraw === null) {\n      Animator.nextDraw = globals.window.requestAnimationFrame(Animator._draw);\n    }\n\n    return node;\n  },\n\n  immediate(fn) {\n    // Add the immediate fn to the end of the queue\n    const node = Animator.immediates.push(fn); // Request another animation frame if we need one\n\n    if (Animator.nextDraw === null) {\n      Animator.nextDraw = globals.window.requestAnimationFrame(Animator._draw);\n    }\n\n    return node;\n  },\n\n  cancelFrame(node) {\n    node != null && Animator.frames.remove(node);\n  },\n\n  clearTimeout(node) {\n    node != null && Animator.timeouts.remove(node);\n  },\n\n  cancelImmediate(node) {\n    node != null && Animator.immediates.remove(node);\n  },\n\n  _draw(now) {\n    // Run all the timeouts we can run, if they are not ready yet, add them\n    // to the end of the queue immediately! (bad timeouts!!! [sarcasm])\n    let nextTimeout = null;\n    const lastTimeout = Animator.timeouts.last();\n\n    while (nextTimeout = Animator.timeouts.shift()) {\n      // Run the timeout if its time, or push it to the end\n      if (now >= nextTimeout.time) {\n        nextTimeout.run();\n      } else {\n        Animator.timeouts.push(nextTimeout);\n      } // If we hit the last item, we should stop shifting out more items\n\n\n      if (nextTimeout === lastTimeout) break;\n    } // Run all of the animation frames\n\n\n    let nextFrame = null;\n    const lastFrame = Animator.frames.last();\n\n    while (nextFrame !== lastFrame && (nextFrame = Animator.frames.shift())) {\n      nextFrame.run(now);\n    }\n\n    let nextImmediate = null;\n\n    while (nextImmediate = Animator.immediates.shift()) {\n      nextImmediate();\n    } // If we have remaining timeouts or frames, draw until we don't anymore\n\n\n    Animator.nextDraw = Animator.timeouts.first() || Animator.frames.first() ? globals.window.requestAnimationFrame(Animator._draw) : null;\n  }\n\n};\n\nconst makeSchedule = function (runnerInfo) {\n  const start = runnerInfo.start;\n  const duration = runnerInfo.runner.duration();\n  const end = start + duration;\n  return {\n    start: start,\n    duration: duration,\n    end: end,\n    runner: runnerInfo.runner\n  };\n};\n\nconst defaultSource = function () {\n  const w = globals.window;\n  return (w.performance || w.Date).now();\n};\n\nclass Timeline extends EventTarget {\n  // Construct a new timeline on the given element\n  constructor(timeSource = defaultSource) {\n    super();\n    this._timeSource = timeSource; // Store the timing variables\n\n    this._startTime = 0;\n    this._speed = 1.0; // Determines how long a runner is hold in memory. Can be a dt or true/false\n\n    this._persist = 0; // Keep track of the running animations and their starting parameters\n\n    this._nextFrame = null;\n    this._paused = true;\n    this._runners = [];\n    this._runnerIds = [];\n    this._lastRunnerId = -1;\n    this._time = 0;\n    this._lastSourceTime = 0;\n    this._lastStepTime = 0; // Make sure that step is always called in class context\n\n    this._step = this._stepFn.bind(this, false);\n    this._stepImmediate = this._stepFn.bind(this, true);\n  }\n\n  active() {\n    return !!this._nextFrame;\n  }\n\n  finish() {\n    // Go to end and pause\n    this.time(this.getEndTimeOfTimeline() + 1);\n    return this.pause();\n  } // Calculates the end of the timeline\n\n\n  getEndTime() {\n    const lastRunnerInfo = this.getLastRunnerInfo();\n    const lastDuration = lastRunnerInfo ? lastRunnerInfo.runner.duration() : 0;\n    const lastStartTime = lastRunnerInfo ? lastRunnerInfo.start : this._time;\n    return lastStartTime + lastDuration;\n  }\n\n  getEndTimeOfTimeline() {\n    const endTimes = this._runners.map(i => i.start + i.runner.duration());\n\n    return Math.max(0, ...endTimes);\n  }\n\n  getLastRunnerInfo() {\n    return this.getRunnerInfoById(this._lastRunnerId);\n  }\n\n  getRunnerInfoById(id) {\n    return this._runners[this._runnerIds.indexOf(id)] || null;\n  }\n\n  pause() {\n    this._paused = true;\n    return this._continue();\n  }\n\n  persist(dtOrForever) {\n    if (dtOrForever == null) return this._persist;\n    this._persist = dtOrForever;\n    return this;\n  }\n\n  play() {\n    // Now make sure we are not paused and continue the animation\n    this._paused = false;\n    return this.updateTime()._continue();\n  }\n\n  reverse(yes) {\n    const currentSpeed = this.speed();\n    if (yes == null) return this.speed(-currentSpeed);\n    const positive = Math.abs(currentSpeed);\n    return this.speed(yes ? -positive : positive);\n  } // schedules a runner on the timeline\n\n\n  schedule(runner, delay, when) {\n    if (runner == null) {\n      return this._runners.map(makeSchedule);\n    } // The start time for the next animation can either be given explicitly,\n    // derived from the current timeline time or it can be relative to the\n    // last start time to chain animations directly\n\n\n    let absoluteStartTime = 0;\n    const endTime = this.getEndTime();\n    delay = delay || 0; // Work out when to start the animation\n\n    if (when == null || when === 'last' || when === 'after') {\n      // Take the last time and increment\n      absoluteStartTime = endTime;\n    } else if (when === 'absolute' || when === 'start') {\n      absoluteStartTime = delay;\n      delay = 0;\n    } else if (when === 'now') {\n      absoluteStartTime = this._time;\n    } else if (when === 'relative') {\n      const runnerInfo = this.getRunnerInfoById(runner.id);\n\n      if (runnerInfo) {\n        absoluteStartTime = runnerInfo.start + delay;\n        delay = 0;\n      }\n    } else if (when === 'with-last') {\n      const lastRunnerInfo = this.getLastRunnerInfo();\n      const lastStartTime = lastRunnerInfo ? lastRunnerInfo.start : this._time;\n      absoluteStartTime = lastStartTime;\n    } else {\n      throw new Error('Invalid value for the \"when\" parameter');\n    } // Manage runner\n\n\n    runner.unschedule();\n    runner.timeline(this);\n    const persist = runner.persist();\n    const runnerInfo = {\n      persist: persist === null ? this._persist : persist,\n      start: absoluteStartTime + delay,\n      runner\n    };\n    this._lastRunnerId = runner.id;\n\n    this._runners.push(runnerInfo);\n\n    this._runners.sort((a, b) => a.start - b.start);\n\n    this._runnerIds = this._runners.map(info => info.runner.id);\n\n    this.updateTime()._continue();\n\n    return this;\n  }\n\n  seek(dt) {\n    return this.time(this._time + dt);\n  }\n\n  source(fn) {\n    if (fn == null) return this._timeSource;\n    this._timeSource = fn;\n    return this;\n  }\n\n  speed(speed) {\n    if (speed == null) return this._speed;\n    this._speed = speed;\n    return this;\n  }\n\n  stop() {\n    // Go to start and pause\n    this.time(0);\n    return this.pause();\n  }\n\n  time(time) {\n    if (time == null) return this._time;\n    this._time = time;\n    return this._continue(true);\n  } // Remove the runner from this timeline\n\n\n  unschedule(runner) {\n    const index = this._runnerIds.indexOf(runner.id);\n\n    if (index < 0) return this;\n\n    this._runners.splice(index, 1);\n\n    this._runnerIds.splice(index, 1);\n\n    runner.timeline(null);\n    return this;\n  } // Makes sure, that after pausing the time doesn't jump\n\n\n  updateTime() {\n    if (!this.active()) {\n      this._lastSourceTime = this._timeSource();\n    }\n\n    return this;\n  } // Checks if we are running and continues the animation\n\n\n  _continue(immediateStep = false) {\n    Animator.cancelFrame(this._nextFrame);\n    this._nextFrame = null;\n    if (immediateStep) return this._stepImmediate();\n    if (this._paused) return this;\n    this._nextFrame = Animator.frame(this._step);\n    return this;\n  }\n\n  _stepFn(immediateStep = false) {\n    // Get the time delta from the last time and update the time\n    const time = this._timeSource();\n\n    let dtSource = time - this._lastSourceTime;\n    if (immediateStep) dtSource = 0;\n    const dtTime = this._speed * dtSource + (this._time - this._lastStepTime);\n    this._lastSourceTime = time; // Only update the time if we use the timeSource.\n    // Otherwise use the current time\n\n    if (!immediateStep) {\n      // Update the time\n      this._time += dtTime;\n      this._time = this._time < 0 ? 0 : this._time;\n    }\n\n    this._lastStepTime = this._time;\n    this.fire('time', this._time); // This is for the case that the timeline was seeked so that the time\n    // is now before the startTime of the runner. Thats why we need to set\n    // the runner to position 0\n    // FIXME:\n    // However, reseting in insertion order leads to bugs. Considering the case,\n    // where 2 runners change the same attribute but in different times,\n    // reseting both of them will lead to the case where the later defined\n    // runner always wins the reset even if the other runner started earlier\n    // and therefore should win the attribute battle\n    // this can be solved by reseting them backwards\n\n    for (let k = this._runners.length; k--;) {\n      // Get and run the current runner and ignore it if its inactive\n      const runnerInfo = this._runners[k];\n      const runner = runnerInfo.runner; // Make sure that we give the actual difference\n      // between runner start time and now\n\n      const dtToStart = this._time - runnerInfo.start; // Dont run runner if not started yet\n      // and try to reset it\n\n      if (dtToStart <= 0) {\n        runner.reset();\n      }\n    } // Run all of the runners directly\n\n\n    let runnersLeft = false;\n\n    for (let i = 0, len = this._runners.length; i < len; i++) {\n      // Get and run the current runner and ignore it if its inactive\n      const runnerInfo = this._runners[i];\n      const runner = runnerInfo.runner;\n      let dt = dtTime; // Make sure that we give the actual difference\n      // between runner start time and now\n\n      const dtToStart = this._time - runnerInfo.start; // Dont run runner if not started yet\n\n      if (dtToStart <= 0) {\n        runnersLeft = true;\n        continue;\n      } else if (dtToStart < dt) {\n        // Adjust dt to make sure that animation is on point\n        dt = dtToStart;\n      }\n\n      if (!runner.active()) continue; // If this runner is still going, signal that we need another animation\n      // frame, otherwise, remove the completed runner\n\n      const finished = runner.step(dt).done;\n\n      if (!finished) {\n        runnersLeft = true; // continue\n      } else if (runnerInfo.persist !== true) {\n        // runner is finished. And runner might get removed\n        const endTime = runner.duration() - runner.time() + this._time;\n\n        if (endTime + runnerInfo.persist < this._time) {\n          // Delete runner and correct index\n          runner.unschedule();\n          --i;\n          --len;\n        }\n      }\n    } // Basically: we continue when there are runners right from us in time\n    // when -->, and when runners are left from us when <--\n\n\n    if (runnersLeft && !(this._speed < 0 && this._time === 0) || this._runnerIds.length && this._speed < 0 && this._time > 0) {\n      this._continue();\n    } else {\n      this.pause();\n      this.fire('finished');\n    }\n\n    return this;\n  }\n\n}\nregisterMethods({\n  Element: {\n    timeline: function (timeline) {\n      if (timeline == null) {\n        this._timeline = this._timeline || new Timeline();\n        return this._timeline;\n      } else {\n        this._timeline = timeline;\n        return this;\n      }\n    }\n  }\n});\n\nclass Runner extends EventTarget {\n  constructor(options) {\n    super(); // Store a unique id on the runner, so that we can identify it later\n\n    this.id = Runner.id++; // Ensure a default value\n\n    options = options == null ? timeline.duration : options; // Ensure that we get a controller\n\n    options = typeof options === 'function' ? new Controller(options) : options; // Declare all of the variables\n\n    this._element = null;\n    this._timeline = null;\n    this.done = false;\n    this._queue = []; // Work out the stepper and the duration\n\n    this._duration = typeof options === 'number' && options;\n    this._isDeclarative = options instanceof Controller;\n    this._stepper = this._isDeclarative ? options : new Ease(); // We copy the current values from the timeline because they can change\n\n    this._history = {}; // Store the state of the runner\n\n    this.enabled = true;\n    this._time = 0;\n    this._lastTime = 0; // At creation, the runner is in reseted state\n\n    this._reseted = true; // Save transforms applied to this runner\n\n    this.transforms = new Matrix();\n    this.transformId = 1; // Looping variables\n\n    this._haveReversed = false;\n    this._reverse = false;\n    this._loopsDone = 0;\n    this._swing = false;\n    this._wait = 0;\n    this._times = 1;\n    this._frameId = null; // Stores how long a runner is stored after beeing done\n\n    this._persist = this._isDeclarative ? true : null;\n  }\n\n  static sanitise(duration, delay, when) {\n    // Initialise the default parameters\n    let times = 1;\n    let swing = false;\n    let wait = 0;\n    duration = duration || timeline.duration;\n    delay = delay || timeline.delay;\n    when = when || 'last'; // If we have an object, unpack the values\n\n    if (typeof duration === 'object' && !(duration instanceof Stepper)) {\n      delay = duration.delay || delay;\n      when = duration.when || when;\n      swing = duration.swing || swing;\n      times = duration.times || times;\n      wait = duration.wait || wait;\n      duration = duration.duration || timeline.duration;\n    }\n\n    return {\n      duration: duration,\n      delay: delay,\n      swing: swing,\n      times: times,\n      wait: wait,\n      when: when\n    };\n  }\n\n  active(enabled) {\n    if (enabled == null) return this.enabled;\n    this.enabled = enabled;\n    return this;\n  }\n  /*\r\n  Private Methods\r\n  ===============\r\n  Methods that shouldn't be used externally\r\n  */\n\n\n  addTransform(transform, index) {\n    this.transforms.lmultiplyO(transform);\n    return this;\n  }\n\n  after(fn) {\n    return this.on('finished', fn);\n  }\n\n  animate(duration, delay, when) {\n    const o = Runner.sanitise(duration, delay, when);\n    const runner = new Runner(o.duration);\n    if (this._timeline) runner.timeline(this._timeline);\n    if (this._element) runner.element(this._element);\n    return runner.loop(o).schedule(o.delay, o.when);\n  }\n\n  clearTransform() {\n    this.transforms = new Matrix();\n    return this;\n  } // TODO: Keep track of all transformations so that deletion is faster\n\n\n  clearTransformsFromQueue() {\n    if (!this.done || !this._timeline || !this._timeline._runnerIds.includes(this.id)) {\n      this._queue = this._queue.filter(item => {\n        return !item.isTransform;\n      });\n    }\n  }\n\n  delay(delay) {\n    return this.animate(0, delay);\n  }\n\n  duration() {\n    return this._times * (this._wait + this._duration) - this._wait;\n  }\n\n  during(fn) {\n    return this.queue(null, fn);\n  }\n\n  ease(fn) {\n    this._stepper = new Ease(fn);\n    return this;\n  }\n  /*\r\n  Runner Definitions\r\n  ==================\r\n  These methods help us define the runtime behaviour of the Runner or they\r\n  help us make new runners from the current runner\r\n  */\n\n\n  element(element) {\n    if (element == null) return this._element;\n    this._element = element;\n\n    element._prepareRunner();\n\n    return this;\n  }\n\n  finish() {\n    return this.step(Infinity);\n  }\n\n  loop(times, swing, wait) {\n    // Deal with the user passing in an object\n    if (typeof times === 'object') {\n      swing = times.swing;\n      wait = times.wait;\n      times = times.times;\n    } // Sanitise the values and store them\n\n\n    this._times = times || Infinity;\n    this._swing = swing || false;\n    this._wait = wait || 0; // Allow true to be passed\n\n    if (this._times === true) {\n      this._times = Infinity;\n    }\n\n    return this;\n  }\n\n  loops(p) {\n    const loopDuration = this._duration + this._wait;\n\n    if (p == null) {\n      const loopsDone = Math.floor(this._time / loopDuration);\n      const relativeTime = this._time - loopsDone * loopDuration;\n      const position = relativeTime / this._duration;\n      return Math.min(loopsDone + position, this._times);\n    }\n\n    const whole = Math.floor(p);\n    const partial = p % 1;\n    const time = loopDuration * whole + this._duration * partial;\n    return this.time(time);\n  }\n\n  persist(dtOrForever) {\n    if (dtOrForever == null) return this._persist;\n    this._persist = dtOrForever;\n    return this;\n  }\n\n  position(p) {\n    // Get all of the variables we need\n    const x = this._time;\n    const d = this._duration;\n    const w = this._wait;\n    const t = this._times;\n    const s = this._swing;\n    const r = this._reverse;\n    let position;\n\n    if (p == null) {\n      /*\r\n      This function converts a time to a position in the range [0, 1]\r\n      The full explanation can be found in this desmos demonstration\r\n        https://www.desmos.com/calculator/u4fbavgche\r\n      The logic is slightly simplified here because we can use booleans\r\n      */\n      // Figure out the value without thinking about the start or end time\n      const f = function (x) {\n        const swinging = s * Math.floor(x % (2 * (w + d)) / (w + d));\n        const backwards = swinging && !r || !swinging && r;\n        const uncliped = Math.pow(-1, backwards) * (x % (w + d)) / d + backwards;\n        const clipped = Math.max(Math.min(uncliped, 1), 0);\n        return clipped;\n      }; // Figure out the value by incorporating the start time\n\n\n      const endTime = t * (w + d) - w;\n      position = x <= 0 ? Math.round(f(1e-5)) : x < endTime ? f(x) : Math.round(f(endTime - 1e-5));\n      return position;\n    } // Work out the loops done and add the position to the loops done\n\n\n    const loopsDone = Math.floor(this.loops());\n    const swingForward = s && loopsDone % 2 === 0;\n    const forwards = swingForward && !r || r && swingForward;\n    position = loopsDone + (forwards ? p : 1 - p);\n    return this.loops(position);\n  }\n\n  progress(p) {\n    if (p == null) {\n      return Math.min(1, this._time / this.duration());\n    }\n\n    return this.time(p * this.duration());\n  }\n  /*\r\n  Basic Functionality\r\n  ===================\r\n  These methods allow us to attach basic functions to the runner directly\r\n  */\n\n\n  queue(initFn, runFn, retargetFn, isTransform) {\n    this._queue.push({\n      initialiser: initFn || noop,\n      runner: runFn || noop,\n      retarget: retargetFn,\n      isTransform: isTransform,\n      initialised: false,\n      finished: false\n    });\n\n    const timeline = this.timeline();\n    timeline && this.timeline()._continue();\n    return this;\n  }\n\n  reset() {\n    if (this._reseted) return this;\n    this.time(0);\n    this._reseted = true;\n    return this;\n  }\n\n  reverse(reverse) {\n    this._reverse = reverse == null ? !this._reverse : reverse;\n    return this;\n  }\n\n  schedule(timeline, delay, when) {\n    // The user doesn't need to pass a timeline if we already have one\n    if (!(timeline instanceof Timeline)) {\n      when = delay;\n      delay = timeline;\n      timeline = this.timeline();\n    } // If there is no timeline, yell at the user...\n\n\n    if (!timeline) {\n      throw Error('Runner cannot be scheduled without timeline');\n    } // Schedule the runner on the timeline provided\n\n\n    timeline.schedule(this, delay, when);\n    return this;\n  }\n\n  step(dt) {\n    // If we are inactive, this stepper just gets skipped\n    if (!this.enabled) return this; // Update the time and get the new position\n\n    dt = dt == null ? 16 : dt;\n    this._time += dt;\n    const position = this.position(); // Figure out if we need to run the stepper in this frame\n\n    const running = this._lastPosition !== position && this._time >= 0;\n    this._lastPosition = position; // Figure out if we just started\n\n    const duration = this.duration();\n    const justStarted = this._lastTime <= 0 && this._time > 0;\n    const justFinished = this._lastTime < duration && this._time >= duration;\n    this._lastTime = this._time;\n\n    if (justStarted) {\n      this.fire('start', this);\n    } // Work out if the runner is finished set the done flag here so animations\n    // know, that they are running in the last step (this is good for\n    // transformations which can be merged)\n\n\n    const declarative = this._isDeclarative;\n    this.done = !declarative && !justFinished && this._time >= duration; // Runner is running. So its not in reseted state anymore\n\n    this._reseted = false;\n    let converged = false; // Call initialise and the run function\n\n    if (running || declarative) {\n      this._initialise(running); // clear the transforms on this runner so they dont get added again and again\n\n\n      this.transforms = new Matrix();\n      converged = this._run(declarative ? dt : position);\n      this.fire('step', this);\n    } // correct the done flag here\n    // declaritive animations itself know when they converged\n\n\n    this.done = this.done || converged && declarative;\n\n    if (justFinished) {\n      this.fire('finished', this);\n    }\n\n    return this;\n  }\n  /*\r\n  Runner animation methods\r\n  ========================\r\n  Control how the animation plays\r\n  */\n\n\n  time(time) {\n    if (time == null) {\n      return this._time;\n    }\n\n    const dt = time - this._time;\n    this.step(dt);\n    return this;\n  }\n\n  timeline(timeline) {\n    // check explicitly for undefined so we can set the timeline to null\n    if (typeof timeline === 'undefined') return this._timeline;\n    this._timeline = timeline;\n    return this;\n  }\n\n  unschedule() {\n    const timeline = this.timeline();\n    timeline && timeline.unschedule(this);\n    return this;\n  } // Run each initialise function in the runner if required\n\n\n  _initialise(running) {\n    // If we aren't running, we shouldn't initialise when not declarative\n    if (!running && !this._isDeclarative) return; // Loop through all of the initialisers\n\n    for (let i = 0, len = this._queue.length; i < len; ++i) {\n      // Get the current initialiser\n      const current = this._queue[i]; // Determine whether we need to initialise\n\n      const needsIt = this._isDeclarative || !current.initialised && running;\n      running = !current.finished; // Call the initialiser if we need to\n\n      if (needsIt && running) {\n        current.initialiser.call(this);\n        current.initialised = true;\n      }\n    }\n  } // Save a morpher to the morpher list so that we can retarget it later\n\n\n  _rememberMorpher(method, morpher) {\n    this._history[method] = {\n      morpher: morpher,\n      caller: this._queue[this._queue.length - 1]\n    }; // We have to resume the timeline in case a controller\n    // is already done without being ever run\n    // This can happen when e.g. this is done:\n    //    anim = el.animate(new SVG.Spring)\n    // and later\n    //    anim.move(...)\n\n    if (this._isDeclarative) {\n      const timeline = this.timeline();\n      timeline && timeline.play();\n    }\n  } // Try to set the target for a morpher if the morpher exists, otherwise\n  // Run each run function for the position or dt given\n\n\n  _run(positionOrDt) {\n    // Run all of the _queue directly\n    let allfinished = true;\n\n    for (let i = 0, len = this._queue.length; i < len; ++i) {\n      // Get the current function to run\n      const current = this._queue[i]; // Run the function if its not finished, we keep track of the finished\n      // flag for the sake of declarative _queue\n\n      const converged = current.runner.call(this, positionOrDt);\n      current.finished = current.finished || converged === true;\n      allfinished = allfinished && current.finished;\n    } // We report when all of the constructors are finished\n\n\n    return allfinished;\n  } // do nothing and return false\n\n\n  _tryRetarget(method, target, extra) {\n    if (this._history[method]) {\n      // if the last method wasnt even initialised, throw it away\n      if (!this._history[method].caller.initialised) {\n        const index = this._queue.indexOf(this._history[method].caller);\n\n        this._queue.splice(index, 1);\n\n        return false;\n      } // for the case of transformations, we use the special retarget function\n      // which has access to the outer scope\n\n\n      if (this._history[method].caller.retarget) {\n        this._history[method].caller.retarget.call(this, target, extra); // for everything else a simple morpher change is sufficient\n\n      } else {\n        this._history[method].morpher.to(target);\n      }\n\n      this._history[method].caller.finished = false;\n      const timeline = this.timeline();\n      timeline && timeline.play();\n      return true;\n    }\n\n    return false;\n  }\n\n}\nRunner.id = 0;\nclass FakeRunner {\n  constructor(transforms = new Matrix(), id = -1, done = true) {\n    this.transforms = transforms;\n    this.id = id;\n    this.done = done;\n  }\n\n  clearTransformsFromQueue() {}\n\n}\nextend([Runner, FakeRunner], {\n  mergeWith(runner) {\n    return new FakeRunner(runner.transforms.lmultiply(this.transforms), runner.id);\n  }\n\n}); // FakeRunner.emptyRunner = new FakeRunner()\n\nconst lmultiply = (last, curr) => last.lmultiplyO(curr);\n\nconst getRunnerTransform = runner => runner.transforms;\n\nfunction mergeTransforms() {\n  // Find the matrix to apply to the element and apply it\n  const runners = this._transformationRunners.runners;\n  const netTransform = runners.map(getRunnerTransform).reduce(lmultiply, new Matrix());\n  this.transform(netTransform);\n\n  this._transformationRunners.merge();\n\n  if (this._transformationRunners.length() === 1) {\n    this._frameId = null;\n  }\n}\n\nclass RunnerArray {\n  constructor() {\n    this.runners = [];\n    this.ids = [];\n  }\n\n  add(runner) {\n    if (this.runners.includes(runner)) return;\n    const id = runner.id + 1;\n    this.runners.push(runner);\n    this.ids.push(id);\n    return this;\n  }\n\n  clearBefore(id) {\n    const deleteCnt = this.ids.indexOf(id + 1) || 1;\n    this.ids.splice(0, deleteCnt, 0);\n    this.runners.splice(0, deleteCnt, new FakeRunner()).forEach(r => r.clearTransformsFromQueue());\n    return this;\n  }\n\n  edit(id, newRunner) {\n    const index = this.ids.indexOf(id + 1);\n    this.ids.splice(index, 1, id + 1);\n    this.runners.splice(index, 1, newRunner);\n    return this;\n  }\n\n  getByID(id) {\n    return this.runners[this.ids.indexOf(id + 1)];\n  }\n\n  length() {\n    return this.ids.length;\n  }\n\n  merge() {\n    let lastRunner = null;\n\n    for (let i = 0; i < this.runners.length; ++i) {\n      const runner = this.runners[i];\n      const condition = lastRunner && runner.done && lastRunner.done // don't merge runner when persisted on timeline\n      && (!runner._timeline || !runner._timeline._runnerIds.includes(runner.id)) && (!lastRunner._timeline || !lastRunner._timeline._runnerIds.includes(lastRunner.id));\n\n      if (condition) {\n        // the +1 happens in the function\n        this.remove(runner.id);\n        const newRunner = runner.mergeWith(lastRunner);\n        this.edit(lastRunner.id, newRunner);\n        lastRunner = newRunner;\n        --i;\n      } else {\n        lastRunner = runner;\n      }\n    }\n\n    return this;\n  }\n\n  remove(id) {\n    const index = this.ids.indexOf(id + 1);\n    this.ids.splice(index, 1);\n    this.runners.splice(index, 1);\n    return this;\n  }\n\n}\nregisterMethods({\n  Element: {\n    animate(duration, delay, when) {\n      const o = Runner.sanitise(duration, delay, when);\n      const timeline = this.timeline();\n      return new Runner(o.duration).loop(o).element(this).timeline(timeline.play()).schedule(o.delay, o.when);\n    },\n\n    delay(by, when) {\n      return this.animate(0, by, when);\n    },\n\n    // this function searches for all runners on the element and deletes the ones\n    // which run before the current one. This is because absolute transformations\n    // overwfrite anything anyway so there is no need to waste time computing\n    // other runners\n    _clearTransformRunnersBefore(currentRunner) {\n      this._transformationRunners.clearBefore(currentRunner.id);\n    },\n\n    _currentTransform(current) {\n      return this._transformationRunners.runners // we need the equal sign here to make sure, that also transformations\n      // on the same runner which execute before the current transformation are\n      // taken into account\n      .filter(runner => runner.id <= current.id).map(getRunnerTransform).reduce(lmultiply, new Matrix());\n    },\n\n    _addRunner(runner) {\n      this._transformationRunners.add(runner); // Make sure that the runner merge is executed at the very end of\n      // all Animator functions. Thats why we use immediate here to execute\n      // the merge right after all frames are run\n\n\n      Animator.cancelImmediate(this._frameId);\n      this._frameId = Animator.immediate(mergeTransforms.bind(this));\n    },\n\n    _prepareRunner() {\n      if (this._frameId == null) {\n        this._transformationRunners = new RunnerArray().add(new FakeRunner(new Matrix(this)));\n      }\n    }\n\n  }\n}); // Will output the elements from array A that are not in the array B\n\nconst difference = (a, b) => a.filter(x => !b.includes(x));\n\nextend(Runner, {\n  attr(a, v) {\n    return this.styleAttr('attr', a, v);\n  },\n\n  // Add animatable styles\n  css(s, v) {\n    return this.styleAttr('css', s, v);\n  },\n\n  styleAttr(type, nameOrAttrs, val) {\n    if (typeof nameOrAttrs === 'string') {\n      return this.styleAttr(type, {\n        [nameOrAttrs]: val\n      });\n    }\n\n    let attrs = nameOrAttrs;\n    if (this._tryRetarget(type, attrs)) return this;\n    let morpher = new Morphable(this._stepper).to(attrs);\n    let keys = Object.keys(attrs);\n    this.queue(function () {\n      morpher = morpher.from(this.element()[type](keys));\n    }, function (pos) {\n      this.element()[type](morpher.at(pos).valueOf());\n      return morpher.done();\n    }, function (newToAttrs) {\n      // Check if any new keys were added\n      const newKeys = Object.keys(newToAttrs);\n      const differences = difference(newKeys, keys); // If their are new keys, initialize them and add them to morpher\n\n      if (differences.length) {\n        // Get the values\n        const addedFromAttrs = this.element()[type](differences); // Get the already initialized values\n\n        const oldFromAttrs = new ObjectBag(morpher.from()).valueOf(); // Merge old and new\n\n        Object.assign(oldFromAttrs, addedFromAttrs);\n        morpher.from(oldFromAttrs);\n      } // Get the object from the morpher\n\n\n      const oldToAttrs = new ObjectBag(morpher.to()).valueOf(); // Merge in new attributes\n\n      Object.assign(oldToAttrs, newToAttrs); // Change morpher target\n\n      morpher.to(oldToAttrs); // Make sure that we save the work we did so we don't need it to do again\n\n      keys = newKeys;\n      attrs = newToAttrs;\n    });\n\n    this._rememberMorpher(type, morpher);\n\n    return this;\n  },\n\n  zoom(level, point) {\n    if (this._tryRetarget('zoom', level, point)) return this;\n    let morpher = new Morphable(this._stepper).to(new SVGNumber(level));\n    this.queue(function () {\n      morpher = morpher.from(this.element().zoom());\n    }, function (pos) {\n      this.element().zoom(morpher.at(pos), point);\n      return morpher.done();\n    }, function (newLevel, newPoint) {\n      point = newPoint;\n      morpher.to(newLevel);\n    });\n\n    this._rememberMorpher('zoom', morpher);\n\n    return this;\n  },\n\n  /**\r\n   ** absolute transformations\r\n   **/\n  //\n  // M v -----|-----(D M v = F v)------|----->  T v\n  //\n  // 1. define the final state (T) and decompose it (once)\n  //    t = [tx, ty, the, lam, sy, sx]\n  // 2. on every frame: pull the current state of all previous transforms\n  //    (M - m can change)\n  //   and then write this as m = [tx0, ty0, the0, lam0, sy0, sx0]\n  // 3. Find the interpolated matrix F(pos) = m + pos * (t - m)\n  //   - Note F(0) = M\n  //   - Note F(1) = T\n  // 4. Now you get the delta matrix as a result: D = F * inv(M)\n  transform(transforms, relative, affine) {\n    // If we have a declarative function, we should retarget it if possible\n    relative = transforms.relative || relative;\n\n    if (this._isDeclarative && !relative && this._tryRetarget('transform', transforms)) {\n      return this;\n    } // Parse the parameters\n\n\n    const isMatrix = Matrix.isMatrixLike(transforms);\n    affine = transforms.affine != null ? transforms.affine : affine != null ? affine : !isMatrix; // Create a morepher and set its type\n\n    const morpher = new Morphable(this._stepper).type(affine ? TransformBag : Matrix);\n    let origin;\n    let element;\n    let current;\n    let currentAngle;\n    let startTransform;\n\n    function setup() {\n      // make sure element and origin is defined\n      element = element || this.element();\n      origin = origin || getOrigin(transforms, element);\n      startTransform = new Matrix(relative ? undefined : element); // add the runner to the element so it can merge transformations\n\n      element._addRunner(this); // Deactivate all transforms that have run so far if we are absolute\n\n\n      if (!relative) {\n        element._clearTransformRunnersBefore(this);\n      }\n    }\n\n    function run(pos) {\n      // clear all other transforms before this in case something is saved\n      // on this runner. We are absolute. We dont need these!\n      if (!relative) this.clearTransform();\n      const {\n        x,\n        y\n      } = new Point(origin).transform(element._currentTransform(this));\n      let target = new Matrix({ ...transforms,\n        origin: [x, y]\n      });\n      let start = this._isDeclarative && current ? current : startTransform;\n\n      if (affine) {\n        target = target.decompose(x, y);\n        start = start.decompose(x, y); // Get the current and target angle as it was set\n\n        const rTarget = target.rotate;\n        const rCurrent = start.rotate; // Figure out the shortest path to rotate directly\n\n        const possibilities = [rTarget - 360, rTarget, rTarget + 360];\n        const distances = possibilities.map(a => Math.abs(a - rCurrent));\n        const shortest = Math.min(...distances);\n        const index = distances.indexOf(shortest);\n        target.rotate = possibilities[index];\n      }\n\n      if (relative) {\n        // we have to be careful here not to overwrite the rotation\n        // with the rotate method of Matrix\n        if (!isMatrix) {\n          target.rotate = transforms.rotate || 0;\n        }\n\n        if (this._isDeclarative && currentAngle) {\n          start.rotate = currentAngle;\n        }\n      }\n\n      morpher.from(start);\n      morpher.to(target);\n      const affineParameters = morpher.at(pos);\n      currentAngle = affineParameters.rotate;\n      current = new Matrix(affineParameters);\n      this.addTransform(current);\n\n      element._addRunner(this);\n\n      return morpher.done();\n    }\n\n    function retarget(newTransforms) {\n      // only get a new origin if it changed since the last call\n      if ((newTransforms.origin || 'center').toString() !== (transforms.origin || 'center').toString()) {\n        origin = getOrigin(newTransforms, element);\n      } // overwrite the old transformations with the new ones\n\n\n      transforms = { ...newTransforms,\n        origin\n      };\n    }\n\n    this.queue(setup, run, retarget, true);\n    this._isDeclarative && this._rememberMorpher('transform', morpher);\n    return this;\n  },\n\n  // Animatable x-axis\n  x(x, relative) {\n    return this._queueNumber('x', x);\n  },\n\n  // Animatable y-axis\n  y(y) {\n    return this._queueNumber('y', y);\n  },\n\n  dx(x = 0) {\n    return this._queueNumberDelta('x', x);\n  },\n\n  dy(y = 0) {\n    return this._queueNumberDelta('y', y);\n  },\n\n  dmove(x, y) {\n    return this.dx(x).dy(y);\n  },\n\n  _queueNumberDelta(method, to) {\n    to = new SVGNumber(to); // Try to change the target if we have this method already registerd\n\n    if (this._tryRetarget(method, to)) return this; // Make a morpher and queue the animation\n\n    const morpher = new Morphable(this._stepper).to(to);\n    let from = null;\n    this.queue(function () {\n      from = this.element()[method]();\n      morpher.from(from);\n      morpher.to(from + to);\n    }, function (pos) {\n      this.element()[method](morpher.at(pos));\n      return morpher.done();\n    }, function (newTo) {\n      morpher.to(from + new SVGNumber(newTo));\n    }); // Register the morpher so that if it is changed again, we can retarget it\n\n    this._rememberMorpher(method, morpher);\n\n    return this;\n  },\n\n  _queueObject(method, to) {\n    // Try to change the target if we have this method already registerd\n    if (this._tryRetarget(method, to)) return this; // Make a morpher and queue the animation\n\n    const morpher = new Morphable(this._stepper).to(to);\n    this.queue(function () {\n      morpher.from(this.element()[method]());\n    }, function (pos) {\n      this.element()[method](morpher.at(pos));\n      return morpher.done();\n    }); // Register the morpher so that if it is changed again, we can retarget it\n\n    this._rememberMorpher(method, morpher);\n\n    return this;\n  },\n\n  _queueNumber(method, value) {\n    return this._queueObject(method, new SVGNumber(value));\n  },\n\n  // Animatable center x-axis\n  cx(x) {\n    return this._queueNumber('cx', x);\n  },\n\n  // Animatable center y-axis\n  cy(y) {\n    return this._queueNumber('cy', y);\n  },\n\n  // Add animatable move\n  move(x, y) {\n    return this.x(x).y(y);\n  },\n\n  // Add animatable center\n  center(x, y) {\n    return this.cx(x).cy(y);\n  },\n\n  // Add animatable size\n  size(width, height) {\n    // animate bbox based size for all other elements\n    let box;\n\n    if (!width || !height) {\n      box = this._element.bbox();\n    }\n\n    if (!width) {\n      width = box.width / box.height * height;\n    }\n\n    if (!height) {\n      height = box.height / box.width * width;\n    }\n\n    return this.width(width).height(height);\n  },\n\n  // Add animatable width\n  width(width) {\n    return this._queueNumber('width', width);\n  },\n\n  // Add animatable height\n  height(height) {\n    return this._queueNumber('height', height);\n  },\n\n  // Add animatable plot\n  plot(a, b, c, d) {\n    // Lines can be plotted with 4 arguments\n    if (arguments.length === 4) {\n      return this.plot([a, b, c, d]);\n    }\n\n    if (this._tryRetarget('plot', a)) return this;\n    const morpher = new Morphable(this._stepper).type(this._element.MorphArray).to(a);\n    this.queue(function () {\n      morpher.from(this._element.array());\n    }, function (pos) {\n      this._element.plot(morpher.at(pos));\n\n      return morpher.done();\n    });\n\n    this._rememberMorpher('plot', morpher);\n\n    return this;\n  },\n\n  // Add leading method\n  leading(value) {\n    return this._queueNumber('leading', value);\n  },\n\n  // Add animatable viewbox\n  viewbox(x, y, width, height) {\n    return this._queueObject('viewbox', new Box(x, y, width, height));\n  },\n\n  update(o) {\n    if (typeof o !== 'object') {\n      return this.update({\n        offset: arguments[0],\n        color: arguments[1],\n        opacity: arguments[2]\n      });\n    }\n\n    if (o.opacity != null) this.attr('stop-opacity', o.opacity);\n    if (o.color != null) this.attr('stop-color', o.color);\n    if (o.offset != null) this.attr('offset', o.offset);\n    return this;\n  }\n\n});\nextend(Runner, {\n  rx,\n  ry,\n  from,\n  to\n});\nregister(Runner, 'Runner');\n\nclass Svg extends Container {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('svg', node), attrs);\n    this.namespace();\n  } // Creates and returns defs element\n\n\n  defs() {\n    if (!this.isRoot()) return this.root().defs();\n    return adopt(this.node.querySelector('defs')) || this.put(new Defs());\n  }\n\n  isRoot() {\n    return !this.node.parentNode || !(this.node.parentNode instanceof globals.window.SVGElement) && this.node.parentNode.nodeName !== '#document-fragment';\n  } // Add namespaces\n\n\n  namespace() {\n    if (!this.isRoot()) return this.root().namespace();\n    return this.attr({\n      xmlns: svg,\n      version: '1.1'\n    }).attr('xmlns:xlink', xlink, xmlns).attr('xmlns:svgjs', svgjs, xmlns);\n  }\n\n  removeNamespace() {\n    return this.attr({\n      xmlns: null,\n      version: null\n    }).attr('xmlns:xlink', null, xmlns).attr('xmlns:svgjs', null, xmlns);\n  } // Check if this is a root svg\n  // If not, call root() from this element\n\n\n  root() {\n    if (this.isRoot()) return this;\n    return super.root();\n  }\n\n}\nregisterMethods({\n  Container: {\n    // Create nested svg document\n    nested: wrapWithAttrCheck(function () {\n      return this.put(new Svg());\n    })\n  }\n});\nregister(Svg, 'Svg', true);\n\nclass Symbol extends Container {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('symbol', node), attrs);\n  }\n\n}\nregisterMethods({\n  Container: {\n    symbol: wrapWithAttrCheck(function () {\n      return this.put(new Symbol());\n    })\n  }\n});\nregister(Symbol, 'Symbol');\n\nfunction plain(text) {\n  // clear if build mode is disabled\n  if (this._build === false) {\n    this.clear();\n  } // create text node\n\n\n  this.node.appendChild(globals.document.createTextNode(text));\n  return this;\n} // Get length of text element\n\nfunction length() {\n  return this.node.getComputedTextLength();\n} // Move over x-axis\n// Text is moved by its bounding box\n// text-anchor does NOT matter\n\nfunction x$1(x, box = this.bbox()) {\n  if (x == null) {\n    return box.x;\n  }\n\n  return this.attr('x', this.attr('x') + x - box.x);\n} // Move over y-axis\n\nfunction y$1(y, box = this.bbox()) {\n  if (y == null) {\n    return box.y;\n  }\n\n  return this.attr('y', this.attr('y') + y - box.y);\n}\nfunction move$1(x, y, box = this.bbox()) {\n  return this.x(x, box).y(y, box);\n} // Move center over x-axis\n\nfunction cx(x, box = this.bbox()) {\n  if (x == null) {\n    return box.cx;\n  }\n\n  return this.attr('x', this.attr('x') + x - box.cx);\n} // Move center over y-axis\n\nfunction cy(y, box = this.bbox()) {\n  if (y == null) {\n    return box.cy;\n  }\n\n  return this.attr('y', this.attr('y') + y - box.cy);\n}\nfunction center(x, y, box = this.bbox()) {\n  return this.cx(x, box).cy(y, box);\n}\nfunction ax(x) {\n  return this.attr('x', x);\n}\nfunction ay(y) {\n  return this.attr('y', y);\n}\nfunction amove(x, y) {\n  return this.ax(x).ay(y);\n} // Enable / disable build mode\n\nfunction build(build) {\n  this._build = !!build;\n  return this;\n}\n\nvar textable = {\n  __proto__: null,\n  plain: plain,\n  length: length,\n  x: x$1,\n  y: y$1,\n  move: move$1,\n  cx: cx,\n  cy: cy,\n  center: center,\n  ax: ax,\n  ay: ay,\n  amove: amove,\n  build: build\n};\n\nclass Text extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('text', node), attrs);\n    this.dom.leading = new SVGNumber(1.3); // store leading value for rebuilding\n\n    this._rebuild = true; // enable automatic updating of dy values\n\n    this._build = false; // disable build mode for adding multiple lines\n  } // Set / get leading\n\n\n  leading(value) {\n    // act as getter\n    if (value == null) {\n      return this.dom.leading;\n    } // act as setter\n\n\n    this.dom.leading = new SVGNumber(value);\n    return this.rebuild();\n  } // Rebuild appearance type\n\n\n  rebuild(rebuild) {\n    // store new rebuild flag if given\n    if (typeof rebuild === 'boolean') {\n      this._rebuild = rebuild;\n    } // define position of all lines\n\n\n    if (this._rebuild) {\n      const self = this;\n      let blankLineOffset = 0;\n      const leading = this.dom.leading;\n      this.each(function (i) {\n        const fontSize = globals.window.getComputedStyle(this.node).getPropertyValue('font-size');\n        const dy = leading * new SVGNumber(fontSize);\n\n        if (this.dom.newLined) {\n          this.attr('x', self.attr('x'));\n\n          if (this.text() === '\\n') {\n            blankLineOffset += dy;\n          } else {\n            this.attr('dy', i ? dy + blankLineOffset : 0);\n            blankLineOffset = 0;\n          }\n        }\n      });\n      this.fire('rebuild');\n    }\n\n    return this;\n  } // overwrite method from parent to set data properly\n\n\n  setData(o) {\n    this.dom = o;\n    this.dom.leading = new SVGNumber(o.leading || 1.3);\n    return this;\n  } // Set the text content\n\n\n  text(text) {\n    // act as getter\n    if (text === undefined) {\n      const children = this.node.childNodes;\n      let firstLine = 0;\n      text = '';\n\n      for (let i = 0, len = children.length; i < len; ++i) {\n        // skip textPaths - they are no lines\n        if (children[i].nodeName === 'textPath') {\n          if (i === 0) firstLine = 1;\n          continue;\n        } // add newline if its not the first child and newLined is set to true\n\n\n        if (i !== firstLine && children[i].nodeType !== 3 && adopt(children[i]).dom.newLined === true) {\n          text += '\\n';\n        } // add content of this node\n\n\n        text += children[i].textContent;\n      }\n\n      return text;\n    } // remove existing content\n\n\n    this.clear().build(true);\n\n    if (typeof text === 'function') {\n      // call block\n      text.call(this, this);\n    } else {\n      // store text and make sure text is not blank\n      text = (text + '').split('\\n'); // build new lines\n\n      for (let j = 0, jl = text.length; j < jl; j++) {\n        this.newLine(text[j]);\n      }\n    } // disable build mode and rebuild lines\n\n\n    return this.build(false).rebuild();\n  }\n\n}\nextend(Text, textable);\nregisterMethods({\n  Container: {\n    // Create text element\n    text: wrapWithAttrCheck(function (text = '') {\n      return this.put(new Text()).text(text);\n    }),\n    // Create plain text element\n    plain: wrapWithAttrCheck(function (text = '') {\n      return this.put(new Text()).plain(text);\n    })\n  }\n});\nregister(Text, 'Text');\n\nclass Tspan extends Shape {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('tspan', node), attrs);\n    this._build = false; // disable build mode for adding multiple lines\n  } // Shortcut dx\n\n\n  dx(dx) {\n    return this.attr('dx', dx);\n  } // Shortcut dy\n\n\n  dy(dy) {\n    return this.attr('dy', dy);\n  } // Create new line\n\n\n  newLine() {\n    // mark new line\n    this.dom.newLined = true; // fetch parent\n\n    const text = this.parent(); // early return in case we are not in a text element\n\n    if (!(text instanceof Text)) {\n      return this;\n    }\n\n    const i = text.index(this);\n    const fontSize = globals.window.getComputedStyle(this.node).getPropertyValue('font-size');\n    const dy = text.dom.leading * new SVGNumber(fontSize); // apply new position\n\n    return this.dy(i ? dy : 0).attr('x', text.x());\n  } // Set text content\n\n\n  text(text) {\n    if (text == null) return this.node.textContent + (this.dom.newLined ? '\\n' : '');\n\n    if (typeof text === 'function') {\n      this.clear().build(true);\n      text.call(this, this);\n      this.build(false);\n    } else {\n      this.plain(text);\n    }\n\n    return this;\n  }\n\n}\nextend(Tspan, textable);\nregisterMethods({\n  Tspan: {\n    tspan: wrapWithAttrCheck(function (text = '') {\n      const tspan = new Tspan(); // clear if build mode is disabled\n\n      if (!this._build) {\n        this.clear();\n      } // add new tspan\n\n\n      return this.put(tspan).text(text);\n    })\n  },\n  Text: {\n    newLine: function (text = '') {\n      return this.tspan(text).newLine();\n    }\n  }\n});\nregister(Tspan, 'Tspan');\n\nclass Circle extends Shape {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('circle', node), attrs);\n  }\n\n  radius(r) {\n    return this.attr('r', r);\n  } // Radius x value\n\n\n  rx(rx) {\n    return this.attr('r', rx);\n  } // Alias radius x value\n\n\n  ry(ry) {\n    return this.rx(ry);\n  }\n\n  size(size) {\n    return this.radius(new SVGNumber(size).divide(2));\n  }\n\n}\nextend(Circle, {\n  x: x$3,\n  y: y$3,\n  cx: cx$1,\n  cy: cy$1,\n  width: width$2,\n  height: height$2\n});\nregisterMethods({\n  Container: {\n    // Create circle element\n    circle: wrapWithAttrCheck(function (size = 0) {\n      return this.put(new Circle()).size(size).move(0, 0);\n    })\n  }\n});\nregister(Circle, 'Circle');\n\nclass ClipPath extends Container {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('clipPath', node), attrs);\n  } // Unclip all clipped elements and remove itself\n\n\n  remove() {\n    // unclip all targets\n    this.targets().forEach(function (el) {\n      el.unclip();\n    }); // remove clipPath from parent\n\n    return super.remove();\n  }\n\n  targets() {\n    return baseFind('svg [clip-path*=\"' + this.id() + '\"]');\n  }\n\n}\nregisterMethods({\n  Container: {\n    // Create clipping element\n    clip: wrapWithAttrCheck(function () {\n      return this.defs().put(new ClipPath());\n    })\n  },\n  Element: {\n    // Distribute clipPath to svg element\n    clipper() {\n      return this.reference('clip-path');\n    },\n\n    clipWith(element) {\n      // use given clip or create a new one\n      const clipper = element instanceof ClipPath ? element : this.parent().clip().add(element); // apply mask\n\n      return this.attr('clip-path', 'url(\"#' + clipper.id() + '\")');\n    },\n\n    // Unclip element\n    unclip() {\n      return this.attr('clip-path', null);\n    }\n\n  }\n});\nregister(ClipPath, 'ClipPath');\n\nclass ForeignObject extends Element {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('foreignObject', node), attrs);\n  }\n\n}\nregisterMethods({\n  Container: {\n    foreignObject: wrapWithAttrCheck(function (width, height) {\n      return this.put(new ForeignObject()).size(width, height);\n    })\n  }\n});\nregister(ForeignObject, 'ForeignObject');\n\nfunction dmove(dx, dy) {\n  this.children().forEach((child, i) => {\n    let bbox; // We have to wrap this for elements that dont have a bbox\n    // e.g. title and other descriptive elements\n\n    try {\n      // Get the childs bbox\n      bbox = child.bbox();\n    } catch (e) {\n      return;\n    } // Get childs matrix\n\n\n    const m = new Matrix(child); // Translate childs matrix by amount and\n    // transform it back into parents space\n\n    const matrix = m.translate(dx, dy).transform(m.inverse()); // Calculate new x and y from old box\n\n    const p = new Point(bbox.x, bbox.y).transform(matrix); // Move element\n\n    child.move(p.x, p.y);\n  });\n  return this;\n}\nfunction dx(dx) {\n  return this.dmove(dx, 0);\n}\nfunction dy(dy) {\n  return this.dmove(0, dy);\n}\nfunction height(height, box = this.bbox()) {\n  if (height == null) return box.height;\n  return this.size(box.width, height, box);\n}\nfunction move(x = 0, y = 0, box = this.bbox()) {\n  const dx = x - box.x;\n  const dy = y - box.y;\n  return this.dmove(dx, dy);\n}\nfunction size(width, height, box = this.bbox()) {\n  const p = proportionalSize(this, width, height, box);\n  const scaleX = p.width / box.width;\n  const scaleY = p.height / box.height;\n  this.children().forEach((child, i) => {\n    const o = new Point(box).transform(new Matrix(child).inverse());\n    child.scale(scaleX, scaleY, o.x, o.y);\n  });\n  return this;\n}\nfunction width(width, box = this.bbox()) {\n  if (width == null) return box.width;\n  return this.size(width, box.height, box);\n}\nfunction x(x, box = this.bbox()) {\n  if (x == null) return box.x;\n  return this.move(x, box.y, box);\n}\nfunction y(y, box = this.bbox()) {\n  if (y == null) return box.y;\n  return this.move(box.x, y, box);\n}\n\nvar containerGeometry = {\n  __proto__: null,\n  dmove: dmove,\n  dx: dx,\n  dy: dy,\n  height: height,\n  move: move,\n  size: size,\n  width: width,\n  x: x,\n  y: y\n};\n\nclass G extends Container {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('g', node), attrs);\n  }\n\n}\nextend(G, containerGeometry);\nregisterMethods({\n  Container: {\n    // Create a group element\n    group: wrapWithAttrCheck(function () {\n      return this.put(new G());\n    })\n  }\n});\nregister(G, 'G');\n\nclass A extends Container {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('a', node), attrs);\n  } // Link target attribute\n\n\n  target(target) {\n    return this.attr('target', target);\n  } // Link url\n\n\n  to(url) {\n    return this.attr('href', url, xlink);\n  }\n\n}\nextend(A, containerGeometry);\nregisterMethods({\n  Container: {\n    // Create a hyperlink element\n    link: wrapWithAttrCheck(function (url) {\n      return this.put(new A()).to(url);\n    })\n  },\n  Element: {\n    unlink() {\n      const link = this.linker();\n      if (!link) return this;\n      const parent = link.parent();\n\n      if (!parent) {\n        return this.remove();\n      }\n\n      const index = parent.index(link);\n      parent.add(this, index);\n      link.remove();\n      return this;\n    },\n\n    linkTo(url) {\n      // reuse old link if possible\n      let link = this.linker();\n\n      if (!link) {\n        link = new A();\n        this.wrap(link);\n      }\n\n      if (typeof url === 'function') {\n        url.call(link, link);\n      } else {\n        link.to(url);\n      }\n\n      return this;\n    },\n\n    linker() {\n      const link = this.parent();\n\n      if (link && link.node.nodeName.toLowerCase() === 'a') {\n        return link;\n      }\n\n      return null;\n    }\n\n  }\n});\nregister(A, 'A');\n\nclass Mask extends Container {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('mask', node), attrs);\n  } // Unmask all masked elements and remove itself\n\n\n  remove() {\n    // unmask all targets\n    this.targets().forEach(function (el) {\n      el.unmask();\n    }); // remove mask from parent\n\n    return super.remove();\n  }\n\n  targets() {\n    return baseFind('svg [mask*=\"' + this.id() + '\"]');\n  }\n\n}\nregisterMethods({\n  Container: {\n    mask: wrapWithAttrCheck(function () {\n      return this.defs().put(new Mask());\n    })\n  },\n  Element: {\n    // Distribute mask to svg element\n    masker() {\n      return this.reference('mask');\n    },\n\n    maskWith(element) {\n      // use given mask or create a new one\n      const masker = element instanceof Mask ? element : this.parent().mask().add(element); // apply mask\n\n      return this.attr('mask', 'url(\"#' + masker.id() + '\")');\n    },\n\n    // Unmask element\n    unmask() {\n      return this.attr('mask', null);\n    }\n\n  }\n});\nregister(Mask, 'Mask');\n\nclass Stop extends Element {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('stop', node), attrs);\n  } // add color stops\n\n\n  update(o) {\n    if (typeof o === 'number' || o instanceof SVGNumber) {\n      o = {\n        offset: arguments[0],\n        color: arguments[1],\n        opacity: arguments[2]\n      };\n    } // set attributes\n\n\n    if (o.opacity != null) this.attr('stop-opacity', o.opacity);\n    if (o.color != null) this.attr('stop-color', o.color);\n    if (o.offset != null) this.attr('offset', new SVGNumber(o.offset));\n    return this;\n  }\n\n}\nregisterMethods({\n  Gradient: {\n    // Add a color stop\n    stop: function (offset, color, opacity) {\n      return this.put(new Stop()).update(offset, color, opacity);\n    }\n  }\n});\nregister(Stop, 'Stop');\n\nfunction cssRule(selector, rule) {\n  if (!selector) return '';\n  if (!rule) return selector;\n  let ret = selector + '{';\n\n  for (const i in rule) {\n    ret += unCamelCase(i) + ':' + rule[i] + ';';\n  }\n\n  ret += '}';\n  return ret;\n}\n\nclass Style extends Element {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('style', node), attrs);\n  }\n\n  addText(w = '') {\n    this.node.textContent += w;\n    return this;\n  }\n\n  font(name, src, params = {}) {\n    return this.rule('@font-face', {\n      fontFamily: name,\n      src: src,\n      ...params\n    });\n  }\n\n  rule(selector, obj) {\n    return this.addText(cssRule(selector, obj));\n  }\n\n}\nregisterMethods('Dom', {\n  style(selector, obj) {\n    return this.put(new Style()).rule(selector, obj);\n  },\n\n  fontface(name, src, params) {\n    return this.put(new Style()).font(name, src, params);\n  }\n\n});\nregister(Style, 'Style');\n\nclass TextPath extends Text {\n  // Initialize node\n  constructor(node, attrs = node) {\n    super(nodeOrNew('textPath', node), attrs);\n  } // return the array of the path track element\n\n\n  array() {\n    const track = this.track();\n    return track ? track.array() : null;\n  } // Plot path if any\n\n\n  plot(d) {\n    const track = this.track();\n    let pathArray = null;\n\n    if (track) {\n      pathArray = track.plot(d);\n    }\n\n    return d == null ? pathArray : this;\n  } // Get the path element\n\n\n  track() {\n    return this.reference('href');\n  }\n\n}\nregisterMethods({\n  Container: {\n    textPath: wrapWithAttrCheck(function (text, path) {\n      // Convert text to instance if needed\n      if (!(text instanceof Text)) {\n        text = this.text(text);\n      }\n\n      return text.path(path);\n    })\n  },\n  Text: {\n    // Create path for text to run on\n    path: wrapWithAttrCheck(function (track, importNodes = true) {\n      const textPath = new TextPath(); // if track is a path, reuse it\n\n      if (!(track instanceof Path)) {\n        // create path element\n        track = this.defs().path(track);\n      } // link textPath to path and add content\n\n\n      textPath.attr('href', '#' + track, xlink); // Transplant all nodes from text to textPath\n\n      let node;\n\n      if (importNodes) {\n        while (node = this.node.firstChild) {\n          textPath.node.appendChild(node);\n        }\n      } // add textPath element as child node and return textPath\n\n\n      return this.put(textPath);\n    }),\n\n    // Get the textPath children\n    textPath() {\n      return this.findOne('textPath');\n    }\n\n  },\n  Path: {\n    // creates a textPath from this path\n    text: wrapWithAttrCheck(function (text) {\n      // Convert text to instance if needed\n      if (!(text instanceof Text)) {\n        text = new Text().addTo(this.parent()).text(text);\n      } // Create textPath from text and path and return\n\n\n      return text.path(this);\n    }),\n\n    targets() {\n      return baseFind('svg textPath').filter(node => {\n        return (node.attr('href') || '').includes(this.id());\n      }); // Does not work in IE11. Use when IE support is dropped\n      // return baseFind('svg textPath[*|href*=\"' + this.id() + '\"]')\n    }\n\n  }\n});\nTextPath.prototype.MorphArray = PathArray;\nregister(TextPath, 'TextPath');\n\nclass Use extends Shape {\n  constructor(node, attrs = node) {\n    super(nodeOrNew('use', node), attrs);\n  } // Use element as a reference\n\n\n  use(element, file) {\n    // Set lined element\n    return this.attr('href', (file || '') + '#' + element, xlink);\n  }\n\n}\nregisterMethods({\n  Container: {\n    // Create a use element\n    use: wrapWithAttrCheck(function (element, file) {\n      return this.put(new Use()).use(element, file);\n    })\n  }\n});\nregister(Use, 'Use');\n\n/* Optional Modules */\nconst SVG = makeInstance;\nextend([Svg, Symbol, Image, Pattern, Marker], getMethodsFor('viewbox'));\nextend([Line, Polyline, Polygon, Path], getMethodsFor('marker'));\nextend(Text, getMethodsFor('Text'));\nextend(Path, getMethodsFor('Path'));\nextend(Defs, getMethodsFor('Defs'));\nextend([Text, Tspan], getMethodsFor('Tspan'));\nextend([Rect, Ellipse, Gradient, Runner], getMethodsFor('radius'));\nextend(EventTarget, getMethodsFor('EventTarget'));\nextend(Dom, getMethodsFor('Dom'));\nextend(Element, getMethodsFor('Element'));\nextend(Shape, getMethodsFor('Shape'));\nextend([Container, Fragment], getMethodsFor('Container'));\nextend(Gradient, getMethodsFor('Gradient'));\nextend(Runner, getMethodsFor('Runner'));\nList.extend(getMethodNames());\nregisterMorphableType([SVGNumber, Color, Box, Matrix, SVGArray, PointArray, PathArray, Point]);\nmakeMorphable();\n\n\n//# sourceMappingURL=svg.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@svgdotjs/svg.js/dist/svg.esm.js\n");

/***/ }),

/***/ "./node_modules/amator/index.js":
/*!**************************************!*\
  !*** ./node_modules/amator/index.js ***!
  \**************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("var BezierEasing = __webpack_require__(/*! bezier-easing */ \"./node_modules/bezier-easing/src/index.js\")\n\n// Predefined set of animations. Similar to CSS easing functions\nvar animations = {\n  ease:  BezierEasing(0.25, 0.1, 0.25, 1),\n  easeIn: BezierEasing(0.42, 0, 1, 1),\n  easeOut: BezierEasing(0, 0, 0.58, 1),\n  easeInOut: BezierEasing(0.42, 0, 0.58, 1),\n  linear: BezierEasing(0, 0, 1, 1)\n}\n\n\nmodule.exports = animate;\nmodule.exports.makeAggregateRaf = makeAggregateRaf;\nmodule.exports.sharedScheduler = makeAggregateRaf();\n\n\nfunction animate(source, target, options) {\n  var start = Object.create(null)\n  var diff = Object.create(null)\n  options = options || {}\n  // We let clients specify their own easing function\n  var easing = (typeof options.easing === 'function') ? options.easing : animations[options.easing]\n\n  // if nothing is specified, default to ease (similar to CSS animations)\n  if (!easing) {\n    if (options.easing) {\n      console.warn('Unknown easing function in amator: ' + options.easing);\n    }\n    easing = animations.ease\n  }\n\n  var step = typeof options.step === 'function' ? options.step : noop\n  var done = typeof options.done === 'function' ? options.done : noop\n\n  var scheduler = getScheduler(options.scheduler)\n\n  var keys = Object.keys(target)\n  keys.forEach(function(key) {\n    start[key] = source[key]\n    diff[key] = target[key] - source[key]\n  })\n\n  var durationInMs = typeof options.duration === 'number' ? options.duration : 400\n  var durationInFrames = Math.max(1, durationInMs * 0.06) // 0.06 because 60 frames pers 1,000 ms\n  var previousAnimationId\n  var frame = 0\n\n  previousAnimationId = scheduler.next(loop)\n\n  return {\n    cancel: cancel\n  }\n\n  function cancel() {\n    scheduler.cancel(previousAnimationId)\n    previousAnimationId = 0\n  }\n\n  function loop() {\n    var t = easing(frame/durationInFrames)\n    frame += 1\n    setValues(t)\n    if (frame <= durationInFrames) {\n      previousAnimationId = scheduler.next(loop)\n      step(source)\n    } else {\n      previousAnimationId = 0\n      setTimeout(function() { done(source) }, 0)\n    }\n  }\n\n  function setValues(t) {\n    keys.forEach(function(key) {\n      source[key] = diff[key] * t + start[key]\n    })\n  }\n}\n\nfunction noop() { }\n\nfunction getScheduler(scheduler) {\n  if (!scheduler) {\n    var canRaf = typeof window !== 'undefined' && window.requestAnimationFrame\n    return canRaf ? rafScheduler() : timeoutScheduler()\n  }\n  if (typeof scheduler.next !== 'function') throw new Error('Scheduler is supposed to have next(cb) function')\n  if (typeof scheduler.cancel !== 'function') throw new Error('Scheduler is supposed to have cancel(handle) function')\n\n  return scheduler\n}\n\nfunction rafScheduler() {\n  return {\n    next: window.requestAnimationFrame.bind(window),\n    cancel: window.cancelAnimationFrame.bind(window)\n  }\n}\n\nfunction timeoutScheduler() {\n  return {\n    next: function(cb) {\n      return setTimeout(cb, 1000/60)\n    },\n    cancel: function (id) {\n      return clearTimeout(id)\n    }\n  }\n}\n\nfunction makeAggregateRaf() {\n  var frontBuffer = new Set();\n  var backBuffer = new Set();\n  var frameToken = 0;\n\n  return {\n    next: next,\n    cancel: next,\n    clearAll: clearAll\n  }\n\n  function clearAll() {\n    frontBuffer.clear();\n    backBuffer.clear();\n    cancelAnimationFrame(frameToken);\n    frameToken = 0;\n  }\n\n  function next(callback) {\n    backBuffer.add(callback);\n    renderNextFrame();\n  }\n\n  function renderNextFrame() {\n    if (!frameToken) frameToken = requestAnimationFrame(renderFrame);\n  }\n\n  function renderFrame() {\n    frameToken = 0;\n\n    var t = backBuffer;\n    backBuffer = frontBuffer;\n    frontBuffer = t;\r\n\n    frontBuffer.forEach(function(callback) {\n      callback();\n    });\n    frontBuffer.clear();\n  }\n\n  function cancel(callback) {\n    backBuffer.delete(callback);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYW1hdG9yL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBLG1CQUFtQixtQkFBTyxDQUFDLGdFQUFlOztBQUUxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBLCtCQUErQjtBQUMvQiw4QkFBOEI7OztBQUc5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsOEJBQThCLGNBQWM7QUFDNUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2FtYXRvci9pbmRleC5qcz83MTEyIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBCZXppZXJFYXNpbmcgPSByZXF1aXJlKCdiZXppZXItZWFzaW5nJylcblxuLy8gUHJlZGVmaW5lZCBzZXQgb2YgYW5pbWF0aW9ucy4gU2ltaWxhciB0byBDU1MgZWFzaW5nIGZ1bmN0aW9uc1xudmFyIGFuaW1hdGlvbnMgPSB7XG4gIGVhc2U6ICBCZXppZXJFYXNpbmcoMC4yNSwgMC4xLCAwLjI1LCAxKSxcbiAgZWFzZUluOiBCZXppZXJFYXNpbmcoMC40MiwgMCwgMSwgMSksXG4gIGVhc2VPdXQ6IEJlemllckVhc2luZygwLCAwLCAwLjU4LCAxKSxcbiAgZWFzZUluT3V0OiBCZXppZXJFYXNpbmcoMC40MiwgMCwgMC41OCwgMSksXG4gIGxpbmVhcjogQmV6aWVyRWFzaW5nKDAsIDAsIDEsIDEpXG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBhbmltYXRlO1xubW9kdWxlLmV4cG9ydHMubWFrZUFnZ3JlZ2F0ZVJhZiA9IG1ha2VBZ2dyZWdhdGVSYWY7XG5tb2R1bGUuZXhwb3J0cy5zaGFyZWRTY2hlZHVsZXIgPSBtYWtlQWdncmVnYXRlUmFmKCk7XG5cblxuZnVuY3Rpb24gYW5pbWF0ZShzb3VyY2UsIHRhcmdldCwgb3B0aW9ucykge1xuICB2YXIgc3RhcnQgPSBPYmplY3QuY3JlYXRlKG51bGwpXG4gIHZhciBkaWZmID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICAvLyBXZSBsZXQgY2xpZW50cyBzcGVjaWZ5IHRoZWlyIG93biBlYXNpbmcgZnVuY3Rpb25cbiAgdmFyIGVhc2luZyA9ICh0eXBlb2Ygb3B0aW9ucy5lYXNpbmcgPT09ICdmdW5jdGlvbicpID8gb3B0aW9ucy5lYXNpbmcgOiBhbmltYXRpb25zW29wdGlvbnMuZWFzaW5nXVxuXG4gIC8vIGlmIG5vdGhpbmcgaXMgc3BlY2lmaWVkLCBkZWZhdWx0IHRvIGVhc2UgKHNpbWlsYXIgdG8gQ1NTIGFuaW1hdGlvbnMpXG4gIGlmICghZWFzaW5nKSB7XG4gICAgaWYgKG9wdGlvbnMuZWFzaW5nKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1Vua25vd24gZWFzaW5nIGZ1bmN0aW9uIGluIGFtYXRvcjogJyArIG9wdGlvbnMuZWFzaW5nKTtcbiAgICB9XG4gICAgZWFzaW5nID0gYW5pbWF0aW9ucy5lYXNlXG4gIH1cblxuICB2YXIgc3RlcCA9IHR5cGVvZiBvcHRpb25zLnN0ZXAgPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLnN0ZXAgOiBub29wXG4gIHZhciBkb25lID0gdHlwZW9mIG9wdGlvbnMuZG9uZSA9PT0gJ2Z1bmN0aW9uJyA/IG9wdGlvbnMuZG9uZSA6IG5vb3BcblxuICB2YXIgc2NoZWR1bGVyID0gZ2V0U2NoZWR1bGVyKG9wdGlvbnMuc2NoZWR1bGVyKVxuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXModGFyZ2V0KVxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgc3RhcnRba2V5XSA9IHNvdXJjZVtrZXldXG4gICAgZGlmZltrZXldID0gdGFyZ2V0W2tleV0gLSBzb3VyY2Vba2V5XVxuICB9KVxuXG4gIHZhciBkdXJhdGlvbkluTXMgPSB0eXBlb2Ygb3B0aW9ucy5kdXJhdGlvbiA9PT0gJ251bWJlcicgPyBvcHRpb25zLmR1cmF0aW9uIDogNDAwXG4gIHZhciBkdXJhdGlvbkluRnJhbWVzID0gTWF0aC5tYXgoMSwgZHVyYXRpb25Jbk1zICogMC4wNikgLy8gMC4wNiBiZWNhdXNlIDYwIGZyYW1lcyBwZXJzIDEsMDAwIG1zXG4gIHZhciBwcmV2aW91c0FuaW1hdGlvbklkXG4gIHZhciBmcmFtZSA9IDBcblxuICBwcmV2aW91c0FuaW1hdGlvbklkID0gc2NoZWR1bGVyLm5leHQobG9vcClcblxuICByZXR1cm4ge1xuICAgIGNhbmNlbDogY2FuY2VsXG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgc2NoZWR1bGVyLmNhbmNlbChwcmV2aW91c0FuaW1hdGlvbklkKVxuICAgIHByZXZpb3VzQW5pbWF0aW9uSWQgPSAwXG4gIH1cblxuICBmdW5jdGlvbiBsb29wKCkge1xuICAgIHZhciB0ID0gZWFzaW5nKGZyYW1lL2R1cmF0aW9uSW5GcmFtZXMpXG4gICAgZnJhbWUgKz0gMVxuICAgIHNldFZhbHVlcyh0KVxuICAgIGlmIChmcmFtZSA8PSBkdXJhdGlvbkluRnJhbWVzKSB7XG4gICAgICBwcmV2aW91c0FuaW1hdGlvbklkID0gc2NoZWR1bGVyLm5leHQobG9vcClcbiAgICAgIHN0ZXAoc291cmNlKVxuICAgIH0gZWxzZSB7XG4gICAgICBwcmV2aW91c0FuaW1hdGlvbklkID0gMFxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgZG9uZShzb3VyY2UpIH0sIDApXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0VmFsdWVzKHQpIHtcbiAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICBzb3VyY2Vba2V5XSA9IGRpZmZba2V5XSAqIHQgKyBzdGFydFtrZXldXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBub29wKCkgeyB9XG5cbmZ1bmN0aW9uIGdldFNjaGVkdWxlcihzY2hlZHVsZXIpIHtcbiAgaWYgKCFzY2hlZHVsZXIpIHtcbiAgICB2YXIgY2FuUmFmID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgIHJldHVybiBjYW5SYWYgPyByYWZTY2hlZHVsZXIoKSA6IHRpbWVvdXRTY2hlZHVsZXIoKVxuICB9XG4gIGlmICh0eXBlb2Ygc2NoZWR1bGVyLm5leHQgIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBFcnJvcignU2NoZWR1bGVyIGlzIHN1cHBvc2VkIHRvIGhhdmUgbmV4dChjYikgZnVuY3Rpb24nKVxuICBpZiAodHlwZW9mIHNjaGVkdWxlci5jYW5jZWwgIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBFcnJvcignU2NoZWR1bGVyIGlzIHN1cHBvc2VkIHRvIGhhdmUgY2FuY2VsKGhhbmRsZSkgZnVuY3Rpb24nKVxuXG4gIHJldHVybiBzY2hlZHVsZXJcbn1cblxuZnVuY3Rpb24gcmFmU2NoZWR1bGVyKCkge1xuICByZXR1cm4ge1xuICAgIG5leHQ6IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpLFxuICAgIGNhbmNlbDogd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KVxuICB9XG59XG5cbmZ1bmN0aW9uIHRpbWVvdXRTY2hlZHVsZXIoKSB7XG4gIHJldHVybiB7XG4gICAgbmV4dDogZnVuY3Rpb24oY2IpIHtcbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KGNiLCAxMDAwLzYwKVxuICAgIH0sXG4gICAgY2FuY2VsOiBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHJldHVybiBjbGVhclRpbWVvdXQoaWQpXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VBZ2dyZWdhdGVSYWYoKSB7XG4gIHZhciBmcm9udEJ1ZmZlciA9IG5ldyBTZXQoKTtcbiAgdmFyIGJhY2tCdWZmZXIgPSBuZXcgU2V0KCk7XG4gIHZhciBmcmFtZVRva2VuID0gMDtcblxuICByZXR1cm4ge1xuICAgIG5leHQ6IG5leHQsXG4gICAgY2FuY2VsOiBuZXh0LFxuICAgIGNsZWFyQWxsOiBjbGVhckFsbFxuICB9XG5cbiAgZnVuY3Rpb24gY2xlYXJBbGwoKSB7XG4gICAgZnJvbnRCdWZmZXIuY2xlYXIoKTtcbiAgICBiYWNrQnVmZmVyLmNsZWFyKCk7XG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoZnJhbWVUb2tlbik7XG4gICAgZnJhbWVUb2tlbiA9IDA7XG4gIH1cblxuICBmdW5jdGlvbiBuZXh0KGNhbGxiYWNrKSB7XG4gICAgYmFja0J1ZmZlci5hZGQoY2FsbGJhY2spO1xuICAgIHJlbmRlck5leHRGcmFtZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVuZGVyTmV4dEZyYW1lKCkge1xuICAgIGlmICghZnJhbWVUb2tlbikgZnJhbWVUb2tlbiA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXJGcmFtZSk7XG4gIH1cblxuICBmdW5jdGlvbiByZW5kZXJGcmFtZSgpIHtcbiAgICBmcmFtZVRva2VuID0gMDtcblxuICAgIHZhciB0ID0gYmFja0J1ZmZlcjtcbiAgICBiYWNrQnVmZmVyID0gZnJvbnRCdWZmZXI7XG4gICAgZnJvbnRCdWZmZXIgPSB0O1xyXG5cbiAgICBmcm9udEJ1ZmZlci5mb3JFYWNoKGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH0pO1xuICAgIGZyb250QnVmZmVyLmNsZWFyKCk7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWwoY2FsbGJhY2spIHtcbiAgICBiYWNrQnVmZmVyLmRlbGV0ZShjYWxsYmFjayk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/amator/index.js\n");

/***/ }),

/***/ "./node_modules/bezier-easing/src/index.js":
/*!*************************************************!*\
  !*** ./node_modules/bezier-easing/src/index.js ***!
  \*************************************************/
/***/ (function(module) {

eval("/**\n * https://github.com/gre/bezier-easing\n * BezierEasing - use bezier curve for transition easing function\n * by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\n\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\nvar float32ArraySupported = typeof Float32Array === 'function';\n\nfunction A (aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\nfunction B (aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\nfunction C (aA1)      { return 3.0 * aA1; }\n\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier (aT, aA1, aA2) { return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT; }\n\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nfunction getSlope (aT, aA1, aA2) { return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1); }\n\nfunction binarySubdivide (aX, aA, aB, mX1, mX2) {\n  var currentX, currentT, i = 0;\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n  return currentT;\n}\n\nfunction newtonRaphsonIterate (aX, aGuessT, mX1, mX2) {\n for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n   var currentSlope = getSlope(aGuessT, mX1, mX2);\n   if (currentSlope === 0.0) {\n     return aGuessT;\n   }\n   var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n   aGuessT -= currentX / currentSlope;\n }\n return aGuessT;\n}\n\nfunction LinearEasing (x) {\n  return x;\n}\n\nmodule.exports = function bezier (mX1, mY1, mX2, mY2) {\n  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {\n    throw new Error('bezier x values must be in [0, 1] range');\n  }\n\n  if (mX1 === mY1 && mX2 === mY2) {\n    return LinearEasing;\n  }\n\n  // Precompute samples table\n  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n  for (var i = 0; i < kSplineTableSize; ++i) {\n    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n  }\n\n  function getTForX (aX) {\n    var intervalStart = 0.0;\n    var currentSample = 1;\n    var lastSample = kSplineTableSize - 1;\n\n    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n\n    // Interpolate to provide an initial guess for t\n    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    var guessForT = intervalStart + dist * kSampleStepSize;\n\n    var initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  return function BezierEasing (x) {\n    // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmV6aWVyLWVhc2luZy9zcmMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsd0JBQXdCO0FBQ3hCLHdCQUF3QjtBQUN4Qix3QkFBd0I7O0FBRXhCO0FBQ0EscUNBQXFDOztBQUVyQztBQUNBLG1DQUFtQzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCLHVCQUF1QjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCLHNCQUFzQjtBQUN4QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFdBQVcsbUVBQW1FO0FBQzlFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9iZXppZXItZWFzaW5nL3NyYy9pbmRleC5qcz81MjI1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogaHR0cHM6Ly9naXRodWIuY29tL2dyZS9iZXppZXItZWFzaW5nXG4gKiBCZXppZXJFYXNpbmcgLSB1c2UgYmV6aWVyIGN1cnZlIGZvciB0cmFuc2l0aW9uIGVhc2luZyBmdW5jdGlvblxuICogYnkgR2HDq3RhbiBSZW5hdWRlYXUgMjAxNCAtIDIwMTUg4oCTIE1JVCBMaWNlbnNlXG4gKi9cblxuLy8gVGhlc2UgdmFsdWVzIGFyZSBlc3RhYmxpc2hlZCBieSBlbXBpcmljaXNtIHdpdGggdGVzdHMgKHRyYWRlb2ZmOiBwZXJmb3JtYW5jZSBWUyBwcmVjaXNpb24pXG52YXIgTkVXVE9OX0lURVJBVElPTlMgPSA0O1xudmFyIE5FV1RPTl9NSU5fU0xPUEUgPSAwLjAwMTtcbnZhciBTVUJESVZJU0lPTl9QUkVDSVNJT04gPSAwLjAwMDAwMDE7XG52YXIgU1VCRElWSVNJT05fTUFYX0lURVJBVElPTlMgPSAxMDtcblxudmFyIGtTcGxpbmVUYWJsZVNpemUgPSAxMTtcbnZhciBrU2FtcGxlU3RlcFNpemUgPSAxLjAgLyAoa1NwbGluZVRhYmxlU2l6ZSAtIDEuMCk7XG5cbnZhciBmbG9hdDMyQXJyYXlTdXBwb3J0ZWQgPSB0eXBlb2YgRmxvYXQzMkFycmF5ID09PSAnZnVuY3Rpb24nO1xuXG5mdW5jdGlvbiBBIChhQTEsIGFBMikgeyByZXR1cm4gMS4wIC0gMy4wICogYUEyICsgMy4wICogYUExOyB9XG5mdW5jdGlvbiBCIChhQTEsIGFBMikgeyByZXR1cm4gMy4wICogYUEyIC0gNi4wICogYUExOyB9XG5mdW5jdGlvbiBDIChhQTEpICAgICAgeyByZXR1cm4gMy4wICogYUExOyB9XG5cbi8vIFJldHVybnMgeCh0KSBnaXZlbiB0LCB4MSwgYW5kIHgyLCBvciB5KHQpIGdpdmVuIHQsIHkxLCBhbmQgeTIuXG5mdW5jdGlvbiBjYWxjQmV6aWVyIChhVCwgYUExLCBhQTIpIHsgcmV0dXJuICgoQShhQTEsIGFBMikgKiBhVCArIEIoYUExLCBhQTIpKSAqIGFUICsgQyhhQTEpKSAqIGFUOyB9XG5cbi8vIFJldHVybnMgZHgvZHQgZ2l2ZW4gdCwgeDEsIGFuZCB4Miwgb3IgZHkvZHQgZ2l2ZW4gdCwgeTEsIGFuZCB5Mi5cbmZ1bmN0aW9uIGdldFNsb3BlIChhVCwgYUExLCBhQTIpIHsgcmV0dXJuIDMuMCAqIEEoYUExLCBhQTIpICogYVQgKiBhVCArIDIuMCAqIEIoYUExLCBhQTIpICogYVQgKyBDKGFBMSk7IH1cblxuZnVuY3Rpb24gYmluYXJ5U3ViZGl2aWRlIChhWCwgYUEsIGFCLCBtWDEsIG1YMikge1xuICB2YXIgY3VycmVudFgsIGN1cnJlbnRULCBpID0gMDtcbiAgZG8ge1xuICAgIGN1cnJlbnRUID0gYUEgKyAoYUIgLSBhQSkgLyAyLjA7XG4gICAgY3VycmVudFggPSBjYWxjQmV6aWVyKGN1cnJlbnRULCBtWDEsIG1YMikgLSBhWDtcbiAgICBpZiAoY3VycmVudFggPiAwLjApIHtcbiAgICAgIGFCID0gY3VycmVudFQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFBID0gY3VycmVudFQ7XG4gICAgfVxuICB9IHdoaWxlIChNYXRoLmFicyhjdXJyZW50WCkgPiBTVUJESVZJU0lPTl9QUkVDSVNJT04gJiYgKytpIDwgU1VCRElWSVNJT05fTUFYX0lURVJBVElPTlMpO1xuICByZXR1cm4gY3VycmVudFQ7XG59XG5cbmZ1bmN0aW9uIG5ld3RvblJhcGhzb25JdGVyYXRlIChhWCwgYUd1ZXNzVCwgbVgxLCBtWDIpIHtcbiBmb3IgKHZhciBpID0gMDsgaSA8IE5FV1RPTl9JVEVSQVRJT05TOyArK2kpIHtcbiAgIHZhciBjdXJyZW50U2xvcGUgPSBnZXRTbG9wZShhR3Vlc3NULCBtWDEsIG1YMik7XG4gICBpZiAoY3VycmVudFNsb3BlID09PSAwLjApIHtcbiAgICAgcmV0dXJuIGFHdWVzc1Q7XG4gICB9XG4gICB2YXIgY3VycmVudFggPSBjYWxjQmV6aWVyKGFHdWVzc1QsIG1YMSwgbVgyKSAtIGFYO1xuICAgYUd1ZXNzVCAtPSBjdXJyZW50WCAvIGN1cnJlbnRTbG9wZTtcbiB9XG4gcmV0dXJuIGFHdWVzc1Q7XG59XG5cbmZ1bmN0aW9uIExpbmVhckVhc2luZyAoeCkge1xuICByZXR1cm4geDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiZXppZXIgKG1YMSwgbVkxLCBtWDIsIG1ZMikge1xuICBpZiAoISgwIDw9IG1YMSAmJiBtWDEgPD0gMSAmJiAwIDw9IG1YMiAmJiBtWDIgPD0gMSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2JlemllciB4IHZhbHVlcyBtdXN0IGJlIGluIFswLCAxXSByYW5nZScpO1xuICB9XG5cbiAgaWYgKG1YMSA9PT0gbVkxICYmIG1YMiA9PT0gbVkyKSB7XG4gICAgcmV0dXJuIExpbmVhckVhc2luZztcbiAgfVxuXG4gIC8vIFByZWNvbXB1dGUgc2FtcGxlcyB0YWJsZVxuICB2YXIgc2FtcGxlVmFsdWVzID0gZmxvYXQzMkFycmF5U3VwcG9ydGVkID8gbmV3IEZsb2F0MzJBcnJheShrU3BsaW5lVGFibGVTaXplKSA6IG5ldyBBcnJheShrU3BsaW5lVGFibGVTaXplKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrU3BsaW5lVGFibGVTaXplOyArK2kpIHtcbiAgICBzYW1wbGVWYWx1ZXNbaV0gPSBjYWxjQmV6aWVyKGkgKiBrU2FtcGxlU3RlcFNpemUsIG1YMSwgbVgyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFRGb3JYIChhWCkge1xuICAgIHZhciBpbnRlcnZhbFN0YXJ0ID0gMC4wO1xuICAgIHZhciBjdXJyZW50U2FtcGxlID0gMTtcbiAgICB2YXIgbGFzdFNhbXBsZSA9IGtTcGxpbmVUYWJsZVNpemUgLSAxO1xuXG4gICAgZm9yICg7IGN1cnJlbnRTYW1wbGUgIT09IGxhc3RTYW1wbGUgJiYgc2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGVdIDw9IGFYOyArK2N1cnJlbnRTYW1wbGUpIHtcbiAgICAgIGludGVydmFsU3RhcnQgKz0ga1NhbXBsZVN0ZXBTaXplO1xuICAgIH1cbiAgICAtLWN1cnJlbnRTYW1wbGU7XG5cbiAgICAvLyBJbnRlcnBvbGF0ZSB0byBwcm92aWRlIGFuIGluaXRpYWwgZ3Vlc3MgZm9yIHRcbiAgICB2YXIgZGlzdCA9IChhWCAtIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSkgLyAoc2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGUgKyAxXSAtIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSk7XG4gICAgdmFyIGd1ZXNzRm9yVCA9IGludGVydmFsU3RhcnQgKyBkaXN0ICoga1NhbXBsZVN0ZXBTaXplO1xuXG4gICAgdmFyIGluaXRpYWxTbG9wZSA9IGdldFNsb3BlKGd1ZXNzRm9yVCwgbVgxLCBtWDIpO1xuICAgIGlmIChpbml0aWFsU2xvcGUgPj0gTkVXVE9OX01JTl9TTE9QRSkge1xuICAgICAgcmV0dXJuIG5ld3RvblJhcGhzb25JdGVyYXRlKGFYLCBndWVzc0ZvclQsIG1YMSwgbVgyKTtcbiAgICB9IGVsc2UgaWYgKGluaXRpYWxTbG9wZSA9PT0gMC4wKSB7XG4gICAgICByZXR1cm4gZ3Vlc3NGb3JUO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYmluYXJ5U3ViZGl2aWRlKGFYLCBpbnRlcnZhbFN0YXJ0LCBpbnRlcnZhbFN0YXJ0ICsga1NhbXBsZVN0ZXBTaXplLCBtWDEsIG1YMik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIEJlemllckVhc2luZyAoeCkge1xuICAgIC8vIEJlY2F1c2UgSmF2YVNjcmlwdCBudW1iZXIgYXJlIGltcHJlY2lzZSwgd2Ugc2hvdWxkIGd1YXJhbnRlZSB0aGUgZXh0cmVtZXMgYXJlIHJpZ2h0LlxuICAgIGlmICh4ID09PSAwKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKHggPT09IDEpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICByZXR1cm4gY2FsY0JlemllcihnZXRURm9yWCh4KSwgbVkxLCBtWTIpO1xuICB9O1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/bezier-easing/src/index.js\n");

/***/ }),

/***/ "./node_modules/exenv/index.js":
/*!*************************************!*\
  !*** ./node_modules/exenv/index.js ***!
  \*************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*!\n  Copyright (c) 2015 Jed Watson.\n  Based on code that is Copyright 2013-2015, Facebook, Inc.\n  All rights reserved.\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar canUseDOM = !!(\n\t\ttypeof window !== 'undefined' &&\n\t\twindow.document &&\n\t\twindow.document.createElement\n\t);\n\n\tvar ExecutionEnvironment = {\n\n\t\tcanUseDOM: canUseDOM,\n\n\t\tcanUseWorkers: typeof Worker !== 'undefined',\n\n\t\tcanUseEventListeners:\n\t\t\tcanUseDOM && !!(window.addEventListener || window.attachEvent),\n\n\t\tcanUseViewport: canUseDOM && !!window.screen\n\n\t};\n\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n\t\t\treturn ExecutionEnvironment;\n\t\t}).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXhlbnYvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLEtBQUssSUFBNEU7QUFDakYsRUFBRSxtQ0FBTztBQUNUO0FBQ0EsR0FBRztBQUFBLGtHQUFDO0FBQ0osR0FBRyxLQUFLLEVBSU47O0FBRUYsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZXhlbnYvaW5kZXguanM/Y2MxNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE1IEplZCBXYXRzb24uXG4gIEJhc2VkIG9uIGNvZGUgdGhhdCBpcyBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBjYW5Vc2VET00gPSAhIShcblx0XHR0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuXHRcdHdpbmRvdy5kb2N1bWVudCAmJlxuXHRcdHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50XG5cdCk7XG5cblx0dmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0ge1xuXG5cdFx0Y2FuVXNlRE9NOiBjYW5Vc2VET00sXG5cblx0XHRjYW5Vc2VXb3JrZXJzOiB0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJyxcblxuXHRcdGNhblVzZUV2ZW50TGlzdGVuZXJzOlxuXHRcdFx0Y2FuVXNlRE9NICYmICEhKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8IHdpbmRvdy5hdHRhY2hFdmVudCksXG5cblx0XHRjYW5Vc2VWaWV3cG9ydDogY2FuVXNlRE9NICYmICEhd2luZG93LnNjcmVlblxuXG5cdH07XG5cblx0aWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHRkZWZpbmUoZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIEV4ZWN1dGlvbkVudmlyb25tZW50O1xuXHRcdH0pO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudDtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuRXhlY3V0aW9uRW52aXJvbm1lbnQgPSBFeGVjdXRpb25FbnZpcm9ubWVudDtcblx0fVxuXG59KCkpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/exenv/index.js\n");

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2F&absolutePagePath=D%3A%5CDev%5Cweb%5Cnext-svg%5Cpages%5Cindex.js!":
/*!************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2F&absolutePagePath=D%3A%5CDev%5Cweb%5Cnext-svg%5Cpages%5Cindex.js! ***!
  \************************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/\",\n      function () {\n        return __webpack_require__(/*! ./pages/index.js */ \"./pages/index.js\");\n      }\n    ]);\n    if(true) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/\"])\n      });\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWNsaWVudC1wYWdlcy1sb2FkZXIuanM/cGFnZT0lMkYmYWJzb2x1dGVQYWdlUGF0aD1EJTNBJTVDRGV2JTVDd2ViJTVDbmV4dC1zdmclNUNwYWdlcyU1Q2luZGV4LmpzIS5qcyIsIm1hcHBpbmdzIjoiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLDBDQUFrQjtBQUN6QztBQUNBO0FBQ0EsT0FBTyxJQUFVO0FBQ2pCLE1BQU0sVUFBVTtBQUNoQjtBQUNBLE9BQU87QUFDUDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8/NGQ4OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAod2luZG93Ll9fTkVYVF9QID0gd2luZG93Ll9fTkVYVF9QIHx8IFtdKS5wdXNoKFtcbiAgICAgIFwiL1wiLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcmVxdWlyZShcIi4vcGFnZXMvaW5kZXguanNcIik7XG4gICAgICB9XG4gICAgXSk7XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2luZG93Ll9fTkVYVF9QLnB1c2goW1wiL1wiXSlcbiAgICAgIH0pO1xuICAgIH1cbiAgIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2F&absolutePagePath=D%3A%5CDev%5Cweb%5Cnext-svg%5Cpages%5Cindex.js!\n");

/***/ }),

/***/ "./components/PanZoomModal.js":
/*!************************************!*\
  !*** ./components/PanZoomModal.js ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ PanZoom; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var panzoom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! panzoom */ \"./node_modules/panzoom/index.js\");\n/* harmony import */ var panzoom__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(panzoom__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _mui_material__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @mui/material */ \"./node_modules/@mui/material/index.js\");\n/* harmony import */ var _svg_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./svg_utils */ \"./components/svg_utils.js\");\n/* harmony import */ var react_inlinesvg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-inlinesvg */ \"./node_modules/react-inlinesvg/esm/index.js\");\n/* harmony import */ var _mui_icons_material_Close__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @mui/icons-material/Close */ \"./node_modules/@mui/icons-material/Close.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n\n\n\n\n\n\n\nvar _s = $RefreshSig$();\nvar style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: \"90vw\",\n    height: \"80vh\",\n    bgcolor: 'background.paper',\n    border: '2px solid #000',\n    boxShadow: 24,\n    p: 2,\n    overflow: 'hidden',\n    cursor: 'grab'\n};\nvar buttonActiveStyle = {\n    zIndex: 'modal',\n    color: '#0036bb',\n    backgroundColor: '#ffffff',\n    position: 'absolute',\n    right: '1%',\n    top: '1%'\n};\nvar buttonRestStyle = {\n    zIndex: 'modal',\n    color: '#0036bb55',\n    backgroundColor: '#ffffff55',\n    '&:hover': {\n        color: '#0036bb',\n        backgroundColor: '#ffffff'\n    },\n    position: 'absolute',\n    right: '1%',\n    top: '1%'\n};\nfunction PanZoom(param) {\n    var src = param.src, open = param.open, handleClose = param.handleClose;\n    var on_svg_ready = function on_svg_ready() {\n        _svg_utils__WEBPACK_IMPORTED_MODULE_3__.Fit(modal_src, panzoomRef.current, boxRef.current);\n        console.log(\"Modal pan zoom : created\");\n        if (_svg_utils__WEBPACK_IMPORTED_MODULE_3__.has_model(src)) {\n            _svg_utils__WEBPACK_IMPORTED_MODULE_3__.fetch_json(src.replace(\".svg\", \".json\")).then(function(model) {\n                _svg_utils__WEBPACK_IMPORTED_MODULE_3__.setup_links(modal_src, model);\n            });\n        }\n    };\n    var startPZ = function startPZ() {\n        //console.log(`divRef.current:${divRef.current} ; boxRef.current:${boxRef.current} ; loaded:${loaded} ; started.current:${started.current}`)\n        if (divRef.current != null && boxRef.current != null && loaded && !started.current) {\n            panzoomRef.current = panzoom__WEBPACK_IMPORTED_MODULE_2___default()(divRef.current, zoomOptions);\n            started.current = true;\n            setButtonActive(true);\n            setTimeout(function() {\n                setButtonActive(false);\n            }, 2000);\n            var svg = _svg_utils__WEBPACK_IMPORTED_MODULE_3__.get_svg_id(modal_src);\n            if (svg) {\n                on_svg_ready();\n            } else {\n                //TODO not clear why this timeout is needed, the svg is underfined otherwise\n                setTimeout(function() {\n                    on_svg_ready();\n                }, 1);\n            }\n        }\n        return;\n    };\n    var stopPZ = function stopPZ() {\n        //console.log(`Modal: stopPZ panzoomRef.current=${panzoomRef.current}`)\n        if (panzoomRef.current) {\n            panzoomRef.current.dispose();\n            started.current = false;\n            console.log(\"Modal pan zoom : disposed\");\n        }\n    };\n    _s();\n    var text_list = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Array());\n    var started = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false), loaded = ref[0], setLoaded = ref[1];\n    var ref1 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true), buttonActive = ref1[0], setButtonActive = ref1[1];\n    var zoomOptions = {\n        minZoom: 0.1,\n        maxZoom: 4\n    };\n    var panzoomRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    var boxRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    var divRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    var buttonRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    var modal_src = \"modal-\".concat(src);\n    var divMeasure = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function(node) {\n        divRef.current = node;\n        startPZ();\n    }, [\n        loaded,\n        open\n    ]);\n    var boxMeasure = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function(node) {\n        boxRef.current = node;\n        startPZ();\n    }, [\n        loaded,\n        open\n    ]);\n    return(/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_4__.Modal, {\n        open: open,\n        onClose: function() {\n            stopPZ();\n            handleClose();\n        },\n        \"aria-labelledby\": \"modal-modal-title\",\n        \"aria-describedby\": \"modal-modal-description\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_4__.Box, {\n            ref: boxMeasure,\n            sx: style,\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_4__.Button, {\n                    ref: buttonRef,\n                    onClick: function() {\n                        stopPZ();\n                        handleClose();\n                    },\n                    variant: \"conained\",\n                    sx: buttonActive ? buttonActiveStyle : buttonRestStyle,\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_icons_material_Close__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {}, void 0, false, {\n                        fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\components\\\\PanZoomModal.js\",\n                        lineNumber: 112,\n                        columnNumber: 18\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\components\\\\PanZoomModal.js\",\n                    lineNumber: 109,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    ref: divMeasure,\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_inlinesvg__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                        src: src,\n                        id: modal_src,\n                        onLoad: function() {\n                            setLoaded(true);\n                        }\n                    }, void 0, false, {\n                        fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\components\\\\PanZoomModal.js\",\n                        lineNumber: 114,\n                        columnNumber: 11\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\components\\\\PanZoomModal.js\",\n                    lineNumber: 113,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\components\\\\PanZoomModal.js\",\n            lineNumber: 108,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\components\\\\PanZoomModal.js\",\n        lineNumber: 102,\n        columnNumber: 7\n    }, this));\n};\n_s(PanZoom, \"jyeSe0xTZgYVjLMdwDQgY5QxvMA=\");\n_c = PanZoom;\nvar _c;\n$RefreshReg$(_c, \"PanZoom\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            var currentExports = module.__proto__.exports;\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/PanZoomModal.js\n");

/***/ }),

/***/ "./components/PanZoomSlide.js":
/*!************************************!*\
  !*** ./components/PanZoomSlide.js ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ PanZoomSlide; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var panzoom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! panzoom */ \"./node_modules/panzoom/index.js\");\n/* harmony import */ var panzoom__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(panzoom__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _mui_material__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @mui/material */ \"./node_modules/@mui/material/index.js\");\n/* harmony import */ var _components_PanZoomModal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/PanZoomModal */ \"./components/PanZoomModal.js\");\n/* harmony import */ var _svg_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./svg_utils */ \"./components/svg_utils.js\");\n/* harmony import */ var _mui_icons_material_Fullscreen__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @mui/icons-material/Fullscreen */ \"./node_modules/@mui/icons-material/Fullscreen.js\");\n/* harmony import */ var _mui_icons_material_Link__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @mui/icons-material/Link */ \"./node_modules/@mui/icons-material/Link.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/router */ \"./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_5__);\n/* module decorator */ module = __webpack_require__.hmd(module);\n\n\n\n\n\n\n\n\n\nvar _s = $RefreshSig$();\nfunction PanZoomSlide(param) {\n    var src = param.src, _menu = param.menu, menu = _menu === void 0 ? false : _menu, _width = param.width, width = _width === void 0 ? 600 : _width;\n    var startPZ = function startPZ() {\n        //console.log(\"adding listener\")\n        if (loaded && divRef.current && !started.current) {\n            panzoomRef.current = panzoom__WEBPACK_IMPORTED_MODULE_2___default()(divRef.current, zoomOptions);\n            started.current = true;\n            on_svg_pz_ready();\n        }\n    };\n    var stopPZ = function stopPZ() {\n        //console.log(`stopPZ panzoomRef.current=${panzoomRef.current}`)\n        if (started.current && panzoomRef.current) {\n            panzoomRef.current.dispose();\n            started.current = false;\n        //console.log(`pan zoom : disposed`)\n        }\n    };\n    var on_svg_pz_ready = function on_svg_pz_ready() {\n        _svg_utils__WEBPACK_IMPORTED_MODULE_4__.Fit(src, panzoomRef.current, boxRef.current);\n        if (_svg_utils__WEBPACK_IMPORTED_MODULE_4__.has_model(src)) {\n            _svg_utils__WEBPACK_IMPORTED_MODULE_4__.fetch_json(src.replace(\".svg\", \".json\")).then(function(model) {\n                _svg_utils__WEBPACK_IMPORTED_MODULE_4__.setup_links(src, model);\n            });\n        }\n        var new_title = _svg_utils__WEBPACK_IMPORTED_MODULE_4__.get_title(src);\n        if (new_title) {\n            setTitle(new_title);\n        }\n        if (_svg_utils__WEBPACK_IMPORTED_MODULE_4__.has_model(src)) {\n            _svg_utils__WEBPACK_IMPORTED_MODULE_4__.fetch_json(src.replace(\".svg\", \".json\")).then(function(model) {\n                _svg_utils__WEBPACK_IMPORTED_MODULE_4__.setup_links(src, model);\n            });\n        }\n        //console.log(location.search)//empty\n        //why not useRouter, because it has a bug : https://github.com/vercel/next.js/discussions/13220\n        var query_list = router.asPath.split('?');\n        if (query_list.length == 2) {\n            var query = _svg_utils__WEBPACK_IMPORTED_MODULE_4__.search_to_query(query_list[1]);\n            if (\"modal\" in query && query.modal === src) {\n                openModal();\n            }\n        }\n    };\n    var setLink = function setLink() {\n        router.push(\"\".concat(router.pathname, \"#pz-\").concat(src));\n    };\n    var openModal = function openModal() {\n        if (!open) {\n            //element.scrollTo(0,100)//not effective\n            router.push(\"\".concat(router.pathname, \"#pz-\").concat(src, \"?modal=\").concat(src)) //,{scroll:false} not effective\n            ;\n            setOpen(true);\n        }\n    };\n    var closeModal = function closeModal() {\n        var url = \"\".concat(router.pathname, \"#pz-\").concat(src);\n        router.push(url, url, {\n            scroll: false\n        });\n        setOpen(false);\n    };\n    var onHashChangeStart = function onHashChangeStart(url) {\n        //not catching paste of same url with new search query params\n        //from : http://localhost:3000/#pz-Linux_kernel_map.svg\n        //to : http://localhost:3000/#pz-Linux_kernel_map.svg?modal=Linux_kernel_map.svg\n        console.log(url);\n    };\n    var onComponentUnmount = function onComponentUnmount() {\n        stopPZ();\n    //router.events.off(\"hashChangeStart\", onHashChangeStart);\n    };\n    _s();\n    var started = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false), loaded = ref[0], setLoaded = ref[1];\n    var ref1 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false), open = ref1[0], setOpen = ref1[1];\n    var ref2 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(Math.round(width / 2)), height = ref2[0], setHeight = ref2[1];\n    var ref3 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(src.replace(/\\.[^/.]+$/, \"\")), title = ref3[0], setTitle = ref3[1];\n    var router = (0,next_router__WEBPACK_IMPORTED_MODULE_5__.useRouter)();\n    var zoomOptions = {\n        minZoom: 0.1,\n        maxZoom: 4\n    };\n    var boxRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    var divRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    var panzoomRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    var stackRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        //console.log(`width is now (${width})`)\n        var target_height = Math.round(width / 2);\n        if (height != target_height) {\n            setHeight(target_height);\n        } else {\n            //console.log(`fitting '${src}' now with new width (${width})`)\n            _svg_utils__WEBPACK_IMPORTED_MODULE_4__.Fit(src, panzoomRef.current, boxRef.current);\n        }\n    }, [\n        height,\n        width\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        if (loaded && divRef.current && !started.current) {\n            startPZ();\n            stopPZ();\n        //router.events.on(\"hashChangeStart\", onHashChangeStart);\n        }\n        return onComponentUnmount;\n    }, [\n        loaded\n    ]);\n    //TODO update basePath fom config in this file and in svg_utils line 162\n    return(/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_6__.Box, {\n                id: \"mainContent\",\n                m: 1,\n                sx: {\n                    width: width\n                },\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_6__.Paper, {\n                    elevation: 1,\n                    sx: {\n                        overflow: 'hidden'\n                    },\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_6__.Stack, {\n                        id: \"pz-\".concat(src),\n                        ref: stackRef,\n                        children: [\n                            menu && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_6__.Stack, {\n                                direction: \"row\",\n                                spacing: 2,\n                                justifyContent: \"space-between\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_6__.Typography, {\n                                        variant: \"h6\",\n                                        p: 1,\n                                        children: title\n                                    }, void 0, false, {\n                                        fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\components\\\\PanZoomSlide.js\",\n                                        lineNumber: 126,\n                                        columnNumber: 11\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_6__.Stack, {\n                                        direction: \"row\",\n                                        spacing: 2,\n                                        justifyContent: \"flex-end\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_6__.Button, {\n                                                sx: {\n                                                    zIndex: 'modal',\n                                                    backgroundColor: '#ffffffaa'\n                                                },\n                                                onClick: function() {\n                                                    setLink();\n                                                },\n                                                variant: \"text\",\n                                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_icons_material_Link__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {}, void 0, false, {\n                                                    fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\components\\\\PanZoomSlide.js\",\n                                                    lineNumber: 132,\n                                                    columnNumber: 112\n                                                }, this)\n                                            }, void 0, false, {\n                                                fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\components\\\\PanZoomSlide.js\",\n                                                lineNumber: 132,\n                                                columnNumber: 13\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_6__.Button, {\n                                                sx: {\n                                                    zIndex: 'modal',\n                                                    backgroundColor: '#ffffffaa'\n                                                },\n                                                onClick: function() {\n                                                    openModal();\n                                                },\n                                                variant: \"text\",\n                                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_icons_material_Fullscreen__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {}, void 0, false, {\n                                                    fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\components\\\\PanZoomSlide.js\",\n                                                    lineNumber: 133,\n                                                    columnNumber: 114\n                                                }, this)\n                                            }, void 0, false, {\n                                                fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\components\\\\PanZoomSlide.js\",\n                                                lineNumber: 133,\n                                                columnNumber: 13\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\components\\\\PanZoomSlide.js\",\n                                        lineNumber: 127,\n                                        columnNumber: 11\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\components\\\\PanZoomSlide.js\",\n                                lineNumber: 121,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_6__.Box, {\n                                ref: boxRef,\n                                sx: {\n                                    height: height,\n                                    position: 'relative'\n                                },\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    ref: divRef,\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"object\", {\n                                        type: \"image/svg+xml\",\n                                        data: \"/next-svg/\".concat(src),\n                                        id: src,\n                                        onLoad: function() {\n                                            setLoaded(true);\n                                        }\n                                    }, void 0, false, {\n                                        fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\components\\\\PanZoomSlide.js\",\n                                        lineNumber: 140,\n                                        columnNumber: 19\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\components\\\\PanZoomSlide.js\",\n                                    lineNumber: 139,\n                                    columnNumber: 17\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\components\\\\PanZoomSlide.js\",\n                                lineNumber: 137,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\components\\\\PanZoomSlide.js\",\n                        lineNumber: 119,\n                        columnNumber: 9\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\components\\\\PanZoomSlide.js\",\n                    lineNumber: 118,\n                    columnNumber: 7\n                }, this)\n            }, void 0, false, {\n                fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\components\\\\PanZoomSlide.js\",\n                lineNumber: 117,\n                columnNumber: 5\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_PanZoomModal__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                src: src,\n                open: open,\n                handleClose: function() {\n                    closeModal();\n                }\n            }, void 0, false, {\n                fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\components\\\\PanZoomSlide.js\",\n                lineNumber: 146,\n                columnNumber: 5\n            }, this)\n        ]\n    }, void 0, true));\n};\n_s(PanZoomSlide, \"4RzLwxGM14w0AddF6rT5R1+44uE=\", false, function() {\n    return [\n        next_router__WEBPACK_IMPORTED_MODULE_5__.useRouter\n    ];\n});\n_c = PanZoomSlide;\nvar _c;\n$RefreshReg$(_c, \"PanZoomSlide\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            var currentExports = module.__proto__.exports;\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/PanZoomSlide.js\n");

/***/ }),

/***/ "./components/SlidesList.js":
/*!**********************************!*\
  !*** ./components/SlidesList.js ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ SlidesList; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _mui_material_styles__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @mui/material/styles */ \"./node_modules/@mui/material/styles/index.js\");\n/* harmony import */ var _components_PanZoomSlide__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/PanZoomSlide */ \"./components/PanZoomSlide.js\");\n/* harmony import */ var _mui_material__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @mui/material */ \"./node_modules/@mui/material/index.js\");\n/* harmony import */ var _react_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./react_utils */ \"./components/react_utils.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n\n\n\n\n\n\n\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s1, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s1 = _i.next()).done); _n = true){\n            _arr.push(_s1.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nvar _s = $RefreshSig$();\nvar AppSlider = (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_4__.styled)(_mui_material__WEBPACK_IMPORTED_MODULE_5__.Slider)(function(param) {\n    var theme = param.theme;\n    return {\n        height: 10,\n        '& .MuiSlider-track': {\n            border: 'none',\n            opacity: 0.8,\n            height: 10,\n            backgroundColor: '#fff'\n        },\n        '& .MuiSlider-rail': {\n            opacity: 0.5,\n            backgroundColor: '#fff'\n        },\n        '& .MuiSlider-thumb': {\n            height: 30,\n            width: 20,\n            backgroundColor: '#bfbfbf',\n            border: '0px solid currentColor',\n            '&:focus, &:hover, &.Mui-active, &.Mui-focusVisible': {\n                boxShadow: 'inherit'\n            },\n            '&:before': {\n                display: 'none'\n            }\n        }\n    };\n});\n_c = AppSlider;\nfunction SlidesList(param) {\n    var list = param.list;\n    var _this = this;\n    _s();\n    var minWidth = 400;\n    var ref = _slicedToArray(_react_utils__WEBPACK_IMPORTED_MODULE_3__.useLocalStorage(\"slide_width\", minWidth), 2), stored_width = ref[0], setStoredWidth = ref[1];\n    var ref1 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(minWidth), width = ref1[0], setWidth = ref1[1];\n    var ref2 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(minWidth), maxWidth = ref2[0], setMaxWidth = ref2[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        setWidth(stored_width);\n    }, [\n        stored_width\n    ]);\n    var boxRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function(node) {\n        if (node != null) {\n            setMaxWidth(node.clientWidth - 60);\n        }\n    });\n    //\n    return(/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_5__.Box, {\n        mb: 2,\n        ref: boxRef,\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_5__.AppBar, {\n                position: \"static\",\n                sx: {\n                    backgroundColor: \"#3c6d9e\"\n                },\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_5__.Toolbar, {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_5__.Typography, {\n                            variant: \"h6\",\n                            component: \"div\",\n                            sx: {\n                                flexGrow: 0\n                            },\n                            children: \"Slide size\"\n                        }, void 0, false, {\n                            fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\components\\\\SlidesList.js\",\n                            lineNumber: 56,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_5__.Box, {\n                            sx: {\n                                width: 300\n                            },\n                            px: 2,\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AppSlider, {\n                                \"aria-label\": \"Temperature\",\n                                value: width,\n                                valueLabelDisplay: \"auto\",\n                                step: 200,\n                                marks: true,\n                                min: minWidth,\n                                max: maxWidth,\n                                onChange: function(e, newValue) {\n                                    setWidth(newValue);\n                                    setStoredWidth(newValue);\n                                }\n                            }, void 0, false, {\n                                fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\components\\\\SlidesList.js\",\n                                lineNumber: 60,\n                                columnNumber: 11\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\components\\\\SlidesList.js\",\n                            lineNumber: 59,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\components\\\\SlidesList.js\",\n                    lineNumber: 55,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\components\\\\SlidesList.js\",\n                lineNumber: 54,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_5__.Grid, {\n                container: true,\n                spacing: {\n                    xs: 2,\n                    md: 3\n                },\n                alignItems: \"center\",\n                justifyContent: \"space-evenly\",\n                children: list.map(function(file, index) {\n                    /*#__PURE__*/ return (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_5__.Grid, {\n                        item: true,\n                        xs: 2,\n                        sx: {\n                            minWidth: width\n                        },\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_PanZoomSlide__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                            src: file,\n                            width: width,\n                            menu: true\n                        }, void 0, false, {\n                            fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\components\\\\SlidesList.js\",\n                            lineNumber: 76,\n                            columnNumber: 13\n                        }, _this)\n                    }, index, false, {\n                        fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\components\\\\SlidesList.js\",\n                        lineNumber: 75,\n                        columnNumber: 11\n                    }, _this);\n                })\n            }, void 0, false, {\n                fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\components\\\\SlidesList.js\",\n                lineNumber: 73,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\components\\\\SlidesList.js\",\n        lineNumber: 53,\n        columnNumber: 5\n    }, this));\n};\n_s(SlidesList, \"9okDcdngPb3QVkx1bzca043vYT4=\", false, function() {\n    return [\n        _react_utils__WEBPACK_IMPORTED_MODULE_3__.useLocalStorage\n    ];\n});\n_c1 = SlidesList;\nvar _c, _c1;\n$RefreshReg$(_c, \"AppSlider\");\n$RefreshReg$(_c1, \"SlidesList\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            var currentExports = module.__proto__.exports;\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL1NsaWRlc0xpc3QuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBdUQ7QUFDVjtBQUNRO0FBRUw7QUFDRDtBQUNWOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFckMsR0FBSyxDQUFDZSxTQUFTLEdBQUdaLDREQUFNLENBQUNJLGlEQUFNLEVBQUUsUUFBUTtRQUFOUyxLQUFLLFNBQUxBLEtBQUs7SUFBSSxNQUMxQ0MsQ0FEMkMsQ0FBQztRQUM1Q0EsTUFBTSxFQUFDLEVBQUU7UUFDVCxDQUFvQixxQkFBRSxDQUFDO1lBQ25CQyxNQUFNLEVBQUUsQ0FBTTtZQUNkQyxPQUFPLEVBQUUsR0FBRztZQUNaRixNQUFNLEVBQUMsRUFBRTtZQUNURyxlQUFlLEVBQUUsQ0FBTTtRQUN6QixDQUFDO1FBQ0gsQ0FBbUIsb0JBQUUsQ0FBQztZQUNsQkQsT0FBTyxFQUFFLEdBQUc7WUFDWkMsZUFBZSxFQUFFLENBQU07UUFDekIsQ0FBQztRQUNELENBQW9CLHFCQUFFLENBQUM7WUFDckJILE1BQU0sRUFBRSxFQUFFO1lBQ1ZJLEtBQUssRUFBRSxFQUFFO1lBQ1RELGVBQWUsRUFBRSxDQUFTO1lBQzFCRixNQUFNLEVBQUUsQ0FBd0I7WUFDaEMsQ0FBb0QscURBQUUsQ0FBQztnQkFDckRJLFNBQVMsRUFBRSxDQUFTO1lBQ3RCLENBQUM7WUFDRCxDQUFVLFdBQUUsQ0FBQztnQkFDWEMsT0FBTyxFQUFFLENBQU07WUFDakIsQ0FBQztRQUNILENBQUM7SUFDTCxDQUFDOztLQXhCS1IsU0FBUztBQTJCQSxRQUFRLENBQUNTLFVBQVUsQ0FBQyxLQUFNLEVBQUUsQ0FBQztRQUFSQyxJQUFJLEdBQUwsS0FBTSxDQUFMQSxJQUFJOzs7SUFDdEMsR0FBSyxDQUFDQyxRQUFRLEdBQUcsR0FBRztJQUNwQixHQUFLLENBQWlDWixHQUE0QyxrQkFBNUNBLHlEQUFvQixDQUFDLENBQWEsY0FBQ1ksUUFBUSxPQUExRUUsWUFBWSxHQUFtQmQsR0FBNEMsS0FBOURlLGNBQWMsR0FBSWYsR0FBNEM7SUFDbEYsR0FBSyxDQUFvQmQsSUFBa0IsR0FBbEJBLCtDQUFRLENBQUMwQixRQUFRLEdBQW5DTCxLQUFLLEdBQWFyQixJQUFrQixLQUE5QjhCLFFBQVEsR0FBSTlCLElBQWtCO0lBQzNDLEdBQUssQ0FBMEJBLElBQWtCLEdBQWxCQSwrQ0FBUSxDQUFDMEIsUUFBUSxHQUF6Q0ssUUFBUSxHQUFnQi9CLElBQWtCLEtBQWpDZ0MsV0FBVyxHQUFJaEMsSUFBa0I7SUFFakRFLGdEQUFTLENBQUMsUUFDWCxHQURlLENBQUM7UUFDYjRCLFFBQVEsQ0FBQ0YsWUFBWTtJQUN2QixDQUFDLEVBQUMsQ0FBQ0E7UUFBQUEsWUFBWTtJQUFBLENBQUM7SUFFaEIsR0FBSyxDQUFDSyxNQUFNLEdBQUdoQyxrREFBVyxDQUFDaUMsUUFBUSxDQUFSQSxJQUFJLEVBQUUsQ0FBQztRQUNoQyxFQUFFLEVBQUNBLElBQUksSUFBRSxJQUFJLEVBQUMsQ0FBQztZQUNiRixXQUFXLENBQUNFLElBQUksQ0FBQ0MsV0FBVyxHQUFDLEVBQUU7UUFDakMsQ0FBQztJQUNILENBQUM7SUFDRCxFQUFFO0lBQ0YsTUFBTSw2RUFDSDlCLDhDQUFHO1FBQUMrQixFQUFFLEVBQUUsQ0FBQztRQUFFQyxHQUFHLEVBQUVKLE1BQU07O3dGQUNwQnpCLGlEQUFNO2dCQUFDOEIsUUFBUSxFQUFDLENBQVE7Z0JBQUNDLEVBQUUsRUFBRSxDQUFDbkI7b0JBQUFBLGVBQWUsRUFBQyxDQUFTO2dCQUFBLENBQUM7c0dBQ3REWCxrREFBTzs7b0dBQ0xFLHFEQUFVOzRCQUFDNkIsT0FBTyxFQUFDLENBQUk7NEJBQUNDLFNBQVMsRUFBQyxDQUFLOzRCQUFDRixFQUFFLEVBQUUsQ0FBQztnQ0FBQ0csUUFBUSxFQUFFLENBQUM7NEJBQUMsQ0FBQztzQ0FBRSxDQUU5RDs7Ozs7O29HQUNDckMsOENBQUc7NEJBQUNrQyxFQUFFLEVBQUUsQ0FBQztnQ0FBQ2xCLEtBQUssRUFBRSxHQUFHOzRCQUFDLENBQUM7NEJBQUVzQixFQUFFLEVBQUUsQ0FBQztrSEFDN0I1QixTQUFTO2dDQUNSNkIsQ0FBVSxhQUFDLENBQWE7Z0NBQ3hCQyxLQUFLLEVBQUV4QixLQUFLO2dDQUNaeUIsaUJBQWlCLEVBQUMsQ0FBTTtnQ0FDeEJDLElBQUksRUFBRSxHQUFHO2dDQUNUQyxLQUFLO2dDQUNMQyxHQUFHLEVBQUV2QixRQUFRO2dDQUNid0IsR0FBRyxFQUFFbkIsUUFBUTtnQ0FDYm9CLFFBQVEsRUFBRSxRQUFRLENBQVBDLENBQUMsRUFBQ0MsUUFBUSxFQUFHLENBQUN2QjtvQ0FBQUEsUUFBUSxDQUFDdUIsUUFBUTtvQ0FBRXhCLGNBQWMsQ0FBQ3dCLFFBQVE7Z0NBQUMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt3RkFLMUUvQywrQ0FBSTtnQkFBQ2dELFNBQVM7Z0JBQUNDLE9BQU8sRUFBRSxDQUFDO29CQUFDQyxFQUFFLEVBQUUsQ0FBQztvQkFBRUMsRUFBRSxFQUFFLENBQUM7Z0JBQUMsQ0FBQztnQkFBRUMsVUFBVSxFQUFDLENBQVE7Z0JBQUNDLGNBQWMsRUFBQyxDQUFjOzBCQUN6RmxDLElBQUksQ0FBQ21DLEdBQUcsQ0FBQyxRQUFRLENBQVBDLElBQUksRUFBQ0MsS0FBSztrQ0FDbkIsTUFBTUMsQ0FBQUEsNkRBQUFBLENBQUx6RCwrQ0FBSTt3QkFBQ3lELElBQUk7d0JBQWFQLEVBQUUsRUFBRSxDQUFDO3dCQUFFakIsRUFBRSxFQUFFLENBQUNiOzRCQUFBQSxRQUFRLEVBQUNMLEtBQUs7d0JBQUEsQ0FBQzs4R0FDL0NqQixnRUFBWTs0QkFBQzRELEdBQUcsRUFBRUgsSUFBSTs0QkFBRXhDLEtBQUssRUFBRUEsS0FBSzs0QkFBRTRDLElBQUk7Ozs7Ozt1QkFEN0JILEtBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBTy9CLENBQUM7R0E5Q3VCdEMsVUFBVTs7UUFFTVYseURBQW9COzs7TUFGcENVLFVBQVUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy9TbGlkZXNMaXN0LmpzPzA0NjYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUNhbGxiYWNrLCB1c2VFZmZlY3R9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSAnQG11aS9tYXRlcmlhbC9zdHlsZXMnO1xyXG5pbXBvcnQgUGFuWm9vbVNsaWRlIGZyb20gJy4uL2NvbXBvbmVudHMvUGFuWm9vbVNsaWRlJ1xyXG5pbXBvcnQge0JveCwgR3JpZCxTbGlkZXIsQXBwQmFyLFRvb2xiYXIsSWNvbkJ1dHRvbixcclxuICAgICAgICBUeXBvZ3JhcGh5LEJ1dHRvbiB9IGZyb20gJ0BtdWkvbWF0ZXJpYWwnO1xyXG5pbXBvcnQgTWVudUljb24gZnJvbSAnQG11aS9pY29ucy1tYXRlcmlhbC9NZW51JztcclxuaW1wb3J0ICogYXMgcnV0bCBmcm9tICcuL3JlYWN0X3V0aWxzJ1xyXG5cclxuY29uc3QgQXBwU2xpZGVyID0gc3R5bGVkKFNsaWRlcikoKHt0aGVtZX0pPT4oe1xyXG4gIGhlaWdodDoxMCxcclxuICAnJiAuTXVpU2xpZGVyLXRyYWNrJzoge1xyXG4gICAgICBib3JkZXI6ICdub25lJyxcclxuICAgICAgb3BhY2l0eTogMC44LFxyXG4gICAgICBoZWlnaHQ6MTAsXHJcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJyNmZmYnLFxyXG4gICAgfSxcclxuICAnJiAuTXVpU2xpZGVyLXJhaWwnOiB7XHJcbiAgICAgIG9wYWNpdHk6IDAuNSxcclxuICAgICAgYmFja2dyb3VuZENvbG9yOiAnI2ZmZicsXHJcbiAgICB9LFxyXG4gICAgJyYgLk11aVNsaWRlci10aHVtYic6IHtcclxuICAgICAgaGVpZ2h0OiAzMCxcclxuICAgICAgd2lkdGg6IDIwLFxyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjYmZiZmJmJyxcclxuICAgICAgYm9yZGVyOiAnMHB4IHNvbGlkIGN1cnJlbnRDb2xvcicsXHJcbiAgICAgICcmOmZvY3VzLCAmOmhvdmVyLCAmLk11aS1hY3RpdmUsICYuTXVpLWZvY3VzVmlzaWJsZSc6IHtcclxuICAgICAgICBib3hTaGFkb3c6ICdpbmhlcml0JyxcclxuICAgICAgfSxcclxuICAgICAgJyY6YmVmb3JlJzoge1xyXG4gICAgICAgIGRpc3BsYXk6ICdub25lJyxcclxuICAgICAgfSxcclxuICAgIH0sXHJcbn0pKVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNsaWRlc0xpc3Qoe2xpc3R9KSB7XHJcbiAgY29uc3QgbWluV2lkdGggPSA0MDBcclxuICBjb25zdCBbc3RvcmVkX3dpZHRoLHNldFN0b3JlZFdpZHRoXSA9IHJ1dGwudXNlTG9jYWxTdG9yYWdlKFwic2xpZGVfd2lkdGhcIixtaW5XaWR0aClcclxuICBjb25zdCBbd2lkdGgsc2V0V2lkdGhdID0gdXNlU3RhdGUobWluV2lkdGgpXHJcbiAgY29uc3QgW21heFdpZHRoLHNldE1heFdpZHRoXSA9IHVzZVN0YXRlKG1pbldpZHRoKVxyXG5cclxuICB1c2VFZmZlY3QoKCk9PntcclxuICAgIHNldFdpZHRoKHN0b3JlZF93aWR0aClcclxuICB9LFtzdG9yZWRfd2lkdGhdKVxyXG5cclxuICBjb25zdCBib3hSZWYgPSB1c2VDYWxsYmFjayhub2RlPT57XHJcbiAgICBpZihub2RlIT1udWxsKXtcclxuICAgICAgc2V0TWF4V2lkdGgobm9kZS5jbGllbnRXaWR0aC02MClcclxuICAgIH1cclxuICB9KVxyXG4gIC8vXHJcbiAgcmV0dXJuIChcclxuICAgIDxCb3ggbWI9ezJ9IHJlZj17Ym94UmVmfT5cclxuICAgICAgPEFwcEJhciBwb3NpdGlvbj1cInN0YXRpY1wiIHN4PXt7YmFja2dyb3VuZENvbG9yOlwiIzNjNmQ5ZVwifX0+XHJcbiAgICAgICAgPFRvb2xiYXI+XHJcbiAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiaDZcIiBjb21wb25lbnQ9XCJkaXZcIiBzeD17eyBmbGV4R3JvdzogMCB9fT5cclxuICAgICAgICAgICAgU2xpZGUgc2l6ZVxyXG4gICAgICAgICAgPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgPEJveCBzeD17eyB3aWR0aDogMzAwIH19IHB4PXsyfT5cclxuICAgICAgICAgIDxBcHBTbGlkZXJcclxuICAgICAgICAgICAgYXJpYS1sYWJlbD1cIlRlbXBlcmF0dXJlXCJcclxuICAgICAgICAgICAgdmFsdWU9e3dpZHRofVxyXG4gICAgICAgICAgICB2YWx1ZUxhYmVsRGlzcGxheT1cImF1dG9cIlxyXG4gICAgICAgICAgICBzdGVwPXsyMDB9XHJcbiAgICAgICAgICAgIG1hcmtzXHJcbiAgICAgICAgICAgIG1pbj17bWluV2lkdGh9XHJcbiAgICAgICAgICAgIG1heD17bWF4V2lkdGh9XHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSxuZXdWYWx1ZSk9PntzZXRXaWR0aChuZXdWYWx1ZSk7c2V0U3RvcmVkV2lkdGgobmV3VmFsdWUpfX1cclxuICAgICAgICAgIC8+XHJcbiAgICA8L0JveD5cclxuICAgICAgICA8L1Rvb2xiYXI+XHJcbiAgICAgIDwvQXBwQmFyPlxyXG4gICAgICA8R3JpZCBjb250YWluZXIgc3BhY2luZz17eyB4czogMiwgbWQ6IDMgfX0gYWxpZ25JdGVtcz1cImNlbnRlclwiIGp1c3RpZnlDb250ZW50PVwic3BhY2UtZXZlbmx5XCI+XHJcbiAgICAgICAge2xpc3QubWFwKChmaWxlLGluZGV4KT0+XHJcbiAgICAgICAgICA8R3JpZCBpdGVtIGtleT17aW5kZXh9IHhzPXsyfSBzeD17e21pbldpZHRoOndpZHRofX0+XHJcbiAgICAgICAgICAgIDxQYW5ab29tU2xpZGUgc3JjPXtmaWxlfSB3aWR0aD17d2lkdGh9IG1lbnUvPlxyXG4gICAgICAgICAgPC9HcmlkPlxyXG4gICAgICAgICl9XHJcbiAgICAgIDwvR3JpZD5cclxuICAgIDwvQm94PlxyXG4gIClcclxufVxyXG4iXSwibmFtZXMiOlsidXNlU3RhdGUiLCJ1c2VDYWxsYmFjayIsInVzZUVmZmVjdCIsInN0eWxlZCIsIlBhblpvb21TbGlkZSIsIkJveCIsIkdyaWQiLCJTbGlkZXIiLCJBcHBCYXIiLCJUb29sYmFyIiwiSWNvbkJ1dHRvbiIsIlR5cG9ncmFwaHkiLCJCdXR0b24iLCJNZW51SWNvbiIsInJ1dGwiLCJBcHBTbGlkZXIiLCJ0aGVtZSIsImhlaWdodCIsImJvcmRlciIsIm9wYWNpdHkiLCJiYWNrZ3JvdW5kQ29sb3IiLCJ3aWR0aCIsImJveFNoYWRvdyIsImRpc3BsYXkiLCJTbGlkZXNMaXN0IiwibGlzdCIsIm1pbldpZHRoIiwidXNlTG9jYWxTdG9yYWdlIiwic3RvcmVkX3dpZHRoIiwic2V0U3RvcmVkV2lkdGgiLCJzZXRXaWR0aCIsIm1heFdpZHRoIiwic2V0TWF4V2lkdGgiLCJib3hSZWYiLCJub2RlIiwiY2xpZW50V2lkdGgiLCJtYiIsInJlZiIsInBvc2l0aW9uIiwic3giLCJ2YXJpYW50IiwiY29tcG9uZW50IiwiZmxleEdyb3ciLCJweCIsImFyaWEtbGFiZWwiLCJ2YWx1ZSIsInZhbHVlTGFiZWxEaXNwbGF5Iiwic3RlcCIsIm1hcmtzIiwibWluIiwibWF4Iiwib25DaGFuZ2UiLCJlIiwibmV3VmFsdWUiLCJjb250YWluZXIiLCJzcGFjaW5nIiwieHMiLCJtZCIsImFsaWduSXRlbXMiLCJqdXN0aWZ5Q29udGVudCIsIm1hcCIsImZpbGUiLCJpbmRleCIsIml0ZW0iLCJzcmMiLCJtZW51Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/SlidesList.js\n");

/***/ }),

/***/ "./components/react_utils.js":
/*!***********************************!*\
  !*** ./components/react_utils.js ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"useLocalStorage\": function() { return /* binding */ useLocalStorage; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* module decorator */ module = __webpack_require__.hmd(module);\n\nfunction _instanceof(left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n        return right[Symbol.hasInstance](left);\n    } else {\n        return left instanceof right;\n    }\n}\nvar _s = $RefreshSig$();\n//https://usehooks.com/useLocalStorage/\n// Hook\nfunction useLocalStorage(key, initialValue) {\n    _s();\n    // State to store our value\n    // Pass initial state function to useState so logic is only executed once\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(function() {\n        if (false) {}\n        try {\n            // Get from local storage by key\n            var item = window.localStorage.getItem(key);\n            // Parse stored json or if none return initialValue\n            return item ? JSON.parse(item) : initialValue;\n        } catch (error) {\n            // If error also return initialValue\n            console.log(error);\n            return initialValue;\n        }\n    }), storedValue = ref[0], setStoredValue = ref[1];\n    // Return a wrapped version of useState's setter function that ...\n    // ... persists the new value to localStorage.\n    var setValue = function(value) {\n        try {\n            // Allow value to be a function so we have same API as useState\n            var valueToStore = _instanceof(value, Function) ? value(storedValue) : value;\n            // Save state\n            setStoredValue(valueToStore);\n            // Save to local storage\n            if (true) {\n                window.localStorage.setItem(key, JSON.stringify(valueToStore));\n            }\n        } catch (error) {\n            // A more advanced implementation would handle the error case\n            console.log(error);\n        }\n    };\n    return [\n        storedValue,\n        setValue\n    ];\n}\n_s(useLocalStorage, \"enx0h0JoJDZ7hgCXoS9j8Cf1UiM=\");\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            var currentExports = module.__proto__.exports;\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3JlYWN0X3V0aWxzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBK0I7Ozs7Ozs7OztBQUUvQixFQUF1QztBQUV2QyxFQUFPO1NBQ0VDLGVBQWUsQ0FBQ0MsR0FBRyxFQUFFQyxZQUFZLEVBQUUsQ0FBQzs7SUFDekMsRUFBMkI7SUFDM0IsRUFBeUU7SUFDekUsR0FBSyxDQUFpQ0gsR0FjcEMsR0Fkb0NBLCtDQUFRLENBQUMsUUFBUSxHQUFGLENBQUM7UUFDcEQsRUFBRSxFQUFFLEtBQTZCLEVBQUUsRUFFbEM7UUFDRCxHQUFHLENBQUMsQ0FBQztZQUNILEVBQWdDO1lBQ2hDLEdBQUssQ0FBQ0ksSUFBSSxHQUFHQyxNQUFNLENBQUNDLFlBQVksQ0FBQ0MsT0FBTyxDQUFDTCxHQUFHO1lBQzVDLEVBQW1EO1lBQ25ELE1BQU0sQ0FBQ0UsSUFBSSxHQUFHSSxJQUFJLENBQUNDLEtBQUssQ0FBQ0wsSUFBSSxJQUFJRCxZQUFZO1FBQy9DLENBQUMsQ0FBQyxLQUFLLEVBQUVPLEtBQUssRUFBRSxDQUFDO1lBQ2YsRUFBb0M7WUFDcENDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRixLQUFLO1lBQ2pCLE1BQU0sQ0FBQ1AsWUFBWTtRQUNyQixDQUFDO0lBQ0gsQ0FBQyxHQWRNVSxXQUFXLEdBQW9CYixHQWNwQyxLQWRrQmMsY0FBYyxHQUFJZCxHQWNwQztJQUNGLEVBQWtFO0lBQ2xFLEVBQThDO0lBQzlDLEdBQUssQ0FBQ2UsUUFBUSxHQUFHLFFBQVEsQ0FBUEMsS0FBSyxFQUFLLENBQUM7UUFDM0IsR0FBRyxDQUFDLENBQUM7WUFDSCxFQUErRDtZQUMvRCxHQUFLLENBQUNDLFlBQVksR0FDaEJELFdBQXlCLENBQXpCQSxLQUFLLEVBQVlFLFFBQVEsSUFBR0YsS0FBSyxDQUFDSCxXQUFXLElBQUlHLEtBQUs7WUFDeEQsRUFBYTtZQUNiRixjQUFjLENBQUNHLFlBQVk7WUFDM0IsRUFBd0I7WUFDeEIsRUFBRSxFQUFFLElBQTZCLEVBQUUsQ0FBQztnQkFDbENaLE1BQU0sQ0FBQ0MsWUFBWSxDQUFDYSxPQUFPLENBQUNqQixHQUFHLEVBQUVNLElBQUksQ0FBQ1ksU0FBUyxDQUFDSCxZQUFZO1lBQzlELENBQUM7UUFDSCxDQUFDLENBQUMsS0FBSyxFQUFFUCxLQUFLLEVBQUUsQ0FBQztZQUNmLEVBQTZEO1lBQzdEQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0YsS0FBSztRQUNuQixDQUFDO0lBQ0gsQ0FBQztJQUNELE1BQU0sQ0FBQyxDQUFDRztRQUFBQSxXQUFXO1FBQUVFLFFBQVE7SUFBQSxDQUFDO0FBQ2hDLENBQUM7R0FyQ01kLGVBQWU7QUF3Q0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy9yZWFjdF91dGlscy5qcz8wZTgwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVN0YXRlfSBmcm9tICdyZWFjdCc7XHJcblxyXG4vL2h0dHBzOi8vdXNlaG9va3MuY29tL3VzZUxvY2FsU3RvcmFnZS9cclxuXHJcbi8vIEhvb2tcclxuZnVuY3Rpb24gdXNlTG9jYWxTdG9yYWdlKGtleSwgaW5pdGlhbFZhbHVlKSB7XHJcbiAgICAvLyBTdGF0ZSB0byBzdG9yZSBvdXIgdmFsdWVcclxuICAgIC8vIFBhc3MgaW5pdGlhbCBzdGF0ZSBmdW5jdGlvbiB0byB1c2VTdGF0ZSBzbyBsb2dpYyBpcyBvbmx5IGV4ZWN1dGVkIG9uY2VcclxuICAgIGNvbnN0IFtzdG9yZWRWYWx1ZSwgc2V0U3RvcmVkVmFsdWVdID0gdXNlU3RhdGUoKCkgPT4ge1xyXG4gICAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgIHJldHVybiBpbml0aWFsVmFsdWU7XHJcbiAgICAgIH1cclxuICAgICAgdHJ5IHtcclxuICAgICAgICAvLyBHZXQgZnJvbSBsb2NhbCBzdG9yYWdlIGJ5IGtleVxyXG4gICAgICAgIGNvbnN0IGl0ZW0gPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcclxuICAgICAgICAvLyBQYXJzZSBzdG9yZWQganNvbiBvciBpZiBub25lIHJldHVybiBpbml0aWFsVmFsdWVcclxuICAgICAgICByZXR1cm4gaXRlbSA/IEpTT04ucGFyc2UoaXRlbSkgOiBpbml0aWFsVmFsdWU7XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgLy8gSWYgZXJyb3IgYWxzbyByZXR1cm4gaW5pdGlhbFZhbHVlXHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgIHJldHVybiBpbml0aWFsVmFsdWU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgLy8gUmV0dXJuIGEgd3JhcHBlZCB2ZXJzaW9uIG9mIHVzZVN0YXRlJ3Mgc2V0dGVyIGZ1bmN0aW9uIHRoYXQgLi4uXHJcbiAgICAvLyAuLi4gcGVyc2lzdHMgdGhlIG5ldyB2YWx1ZSB0byBsb2NhbFN0b3JhZ2UuXHJcbiAgICBjb25zdCBzZXRWYWx1ZSA9ICh2YWx1ZSkgPT4ge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIC8vIEFsbG93IHZhbHVlIHRvIGJlIGEgZnVuY3Rpb24gc28gd2UgaGF2ZSBzYW1lIEFQSSBhcyB1c2VTdGF0ZVxyXG4gICAgICAgIGNvbnN0IHZhbHVlVG9TdG9yZSA9XHJcbiAgICAgICAgICB2YWx1ZSBpbnN0YW5jZW9mIEZ1bmN0aW9uID8gdmFsdWUoc3RvcmVkVmFsdWUpIDogdmFsdWU7XHJcbiAgICAgICAgLy8gU2F2ZSBzdGF0ZVxyXG4gICAgICAgIHNldFN0b3JlZFZhbHVlKHZhbHVlVG9TdG9yZSk7XHJcbiAgICAgICAgLy8gU2F2ZSB0byBsb2NhbCBzdG9yYWdlXHJcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KHZhbHVlVG9TdG9yZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAvLyBBIG1vcmUgYWR2YW5jZWQgaW1wbGVtZW50YXRpb24gd291bGQgaGFuZGxlIHRoZSBlcnJvciBjYXNlXHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFtzdG9yZWRWYWx1ZSwgc2V0VmFsdWVdO1xyXG4gIH1cclxuXHJcbiAgZXhwb3J0e1xyXG4gICAgICB1c2VMb2NhbFN0b3JhZ2VcclxuICB9XHJcbiAgIl0sIm5hbWVzIjpbInVzZVN0YXRlIiwidXNlTG9jYWxTdG9yYWdlIiwia2V5IiwiaW5pdGlhbFZhbHVlIiwiaXRlbSIsIndpbmRvdyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJKU09OIiwicGFyc2UiLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJzdG9yZWRWYWx1ZSIsInNldFN0b3JlZFZhbHVlIiwic2V0VmFsdWUiLCJ2YWx1ZSIsInZhbHVlVG9TdG9yZSIsIkZ1bmN0aW9uIiwic2V0SXRlbSIsInN0cmluZ2lmeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/react_utils.js\n");

/***/ }),

/***/ "./components/svg_utils.js":
/*!*********************************!*\
  !*** ./components/svg_utils.js ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Fit\": function() { return /* binding */ Fit; },\n/* harmony export */   \"Top\": function() { return /* binding */ Top; },\n/* harmony export */   \"softReset\": function() { return /* binding */ softReset; },\n/* harmony export */   \"Reset\": function() { return /* binding */ Reset; },\n/* harmony export */   \"Center\": function() { return /* binding */ Center; },\n/* harmony export */   \"FitHeight\": function() { return /* binding */ FitHeight; },\n/* harmony export */   \"FitWidth\": function() { return /* binding */ FitWidth; },\n/* harmony export */   \"setup_links\": function() { return /* binding */ setup_links; },\n/* harmony export */   \"flash_links\": function() { return /* binding */ flash_links; },\n/* harmony export */   \"get_svg_id\": function() { return /* binding */ get_svg_id; },\n/* harmony export */   \"get_title\": function() { return /* binding */ get_title; },\n/* harmony export */   \"fetch_json\": function() { return /* binding */ fetch_json; },\n/* harmony export */   \"has_model\": function() { return /* binding */ has_model; },\n/* harmony export */   \"search_to_query\": function() { return /* binding */ search_to_query; }\n/* harmony export */ });\n/* harmony import */ var D_Dev_web_next_svg_node_modules_next_dist_compiled_regenerator_runtime_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/next/dist/compiled/regenerator-runtime/runtime.js */ \"./node_modules/next/dist/compiled/regenerator-runtime/runtime.js\");\n/* harmony import */ var D_Dev_web_next_svg_node_modules_next_dist_compiled_regenerator_runtime_runtime_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(D_Dev_web_next_svg_node_modules_next_dist_compiled_regenerator_runtime_runtime_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var panzoom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! panzoom */ \"./node_modules/panzoom/index.js\");\n/* harmony import */ var panzoom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(panzoom__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @svgdotjs/svg.js */ \"./node_modules/@svgdotjs/svg.js/dist/svg.esm.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n\n\n\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _asyncToGenerator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction search_to_query(search) {\n    return JSON.parse('{\"' + decodeURI(search.replace(/&/g, \"\\\",\\\"\").replace(/=/g, \"\\\":\\\"\")) + '\"}');\n}\nfunction get_svg_id(src) {\n    var el = document.getElementById(src);\n    if (!el) {\n        return null;\n    }\n    if (el.tagName == \"OBJECT\") {\n        //console.log(el)\n        //console.log(el.contentDocument)\n        //console.log(el.contentDocument.getElementsByTagName('svg')[0])\n        //  console.log(el.getSVGDocument())\n        //https://www.w3.org/TR/SVG2/struct.html#InterfaceGetSVGDocument\n        //.getElementsbyTagName(\"svg\")[0]\n        return document.getElementById(src).contentDocument.getElementsByTagName('svg')[0];\n    } else if (el.tagName == \"svg\") {\n        return el;\n    }\n}\nfunction get_svg_size(src) {\n    var svg = get_svg_id(src);\n    var bbox = svg.getBBox();\n    return {\n        svg_width: bbox.width,\n        svg_height: bbox.height\n    };\n}\nfunction softReset(pzRef) {\n    if (!pzRef) return;\n    pzRef.zoomAbs(0, 0, 1);\n    pzRef.moveTo(0, 0);\n}\nfunction Reset(pzRef, divRef, zoomOptions) {\n    if (!pzRef) return null;\n    pzRef.dispose();\n    return panzoom__WEBPACK_IMPORTED_MODULE_1___default()(divRef, zoomOptions);\n}\n_c = Reset;\nfunction Center(src, pzRef, boxRef) {\n    if (!pzRef) return null;\n    //pzRef = Reset(pzRef,divRef,zoomOptions)\n    softReset(pzRef);\n    var svg = get_svg_id(src);\n    //let cbox = svg.getBoundingClientRect();\n    var ref = get_svg_size(src), svg_width = ref.svg_width, svg_height = ref.svg_height;\n    var scale = boxRef.clientWidth / svg_width;\n    if (svg.hasAttributeNS(null, \"width\")) {\n        var client_width = svg.getAttributeNS(null, \"width\");\n        if (client_width.endsWith(\"px\")) {\n            client_width = Number(client_width.slice(0, -2));\n        }\n        scale = client_width / svg_width;\n    }\n    var offsetY = boxRef.clientHeight / 2 - svg_height * scale / 2;\n    var offsetX = boxRef.clientWidth / 2 - svg_width * scale / 2;\n    pzRef.moveTo(offsetX, offsetY);\n    console.log(\"moveto (\".concat(offsetX, \",\").concat(offsetY, \")\"));\n    return;\n}\n_c1 = Center;\nfunction FitHeight(src, pzRef, boxRef) {\n    if (!pzRef) return;\n    softReset(pzRef);\n    var svg = get_svg_id(src);\n    //let cbox = svg.getBoundingClientRect();\n    var ref = get_svg_size(src), svg_width = ref.svg_width, svg_height = ref.svg_height;\n    var scale = boxRef.clientWidth / svg_width;\n    if (svg.hasAttributeNS(null, \"width\")) {\n        var client_width = svg.getAttributeNS(null, \"width\");\n        if (client_width.endsWith(\"px\")) {\n            client_width = Number(client_width.slice(0, -2));\n        }\n        scale = client_width / svg_width;\n    }\n    //console.log(`scale = ${scale}`)\n    var offsetY = boxRef.clientHeight / 2 - svg_height * scale / 2;\n    var offsetX = boxRef.clientWidth / 2 - svg_width * scale / 2;\n    pzRef.moveTo(offsetX, offsetY);\n    //console.log(`moveTo (${offsetX},${offsetY})`)\n    var cbox = svg.getBoundingClientRect();\n    var zoomX = boxRef.clientWidth / 2;\n    var zoomY = boxRef.clientHeight / 2;\n    var fit_height_zoom = boxRef.clientHeight / (svg_height * scale);\n    pzRef.zoomAbs(zoomX, zoomY, fit_height_zoom);\n//console.log(`zoomAbs (${zoomX},${zoomY},${fit_height_zoom})`)\n}\n_c2 = FitHeight;\nfunction FitWidth(src, pzRef, boxRef) {\n    if (!pzRef) return;\n    softReset(pzRef);\n    var svg = get_svg_id(src);\n    //let cbox = svg.getBoundingClientRect();\n    var ref = get_svg_size(src), svg_width = ref.svg_width, svg_height = ref.svg_height;\n    var scale = boxRef.clientWidth / svg_width;\n    if (svg.hasAttributeNS(null, \"width\")) {\n        var client_width = svg.getAttributeNS(null, \"width\");\n        if (client_width.endsWith(\"px\")) {\n            client_width = Number(client_width.slice(0, -2));\n        }\n        scale = client_width / svg_width;\n    }\n    //console.log(`scale = ${scale}`)\n    var offsetY = boxRef.clientHeight / 2 - svg_height * scale / 2;\n    var offsetX = boxRef.clientWidth / 2 - svg_width * scale / 2;\n    pzRef.moveTo(offsetX, offsetY);\n    //console.log(`moveTo (${offsetX},${offsetY})`)\n    var cbox = svg.getBoundingClientRect();\n    var fit_width_zoom = boxRef.clientWidth / (svg_width * scale);\n    var zoomX = boxRef.clientWidth / 2;\n    var zoomY = boxRef.clientHeight / 2;\n    pzRef.zoomAbs(zoomX, zoomY, fit_width_zoom);\n}\n_c3 = FitWidth;\nfunction Fit(src, pzRef, boxRef) {\n    if (!pzRef) return;\n    //console.log(\"running fit\")\n    var ref = get_svg_size(src), svg_width = ref.svg_width, svg_height = ref.svg_height;\n    var svg_ratio = svg_width / svg_height;\n    var box_ratio = boxRef.clientWidth / boxRef.clientHeight;\n    if (svg_ratio > box_ratio) {\n        FitWidth(src, pzRef, boxRef);\n    } else {\n        FitHeight(src, pzRef, boxRef);\n    }\n}\n_c4 = Fit;\nfunction Top(src, pzRef, boxRef) {\n    if (!pzRef) return;\n    softReset(pzRef);\n    var svg = get_svg_id(src);\n    //let cbox = svg.getBoundingClientRect();\n    var ref = get_svg_size(src), svg_width = ref.svg_width, svg_height = ref.svg_height;\n    var scale = boxRef.clientWidth / svg_width;\n    if (svg.hasAttributeNS(null, \"width\")) {\n        var client_width = svg.getAttributeNS(null, \"width\");\n        if (client_width.endsWith(\"px\")) {\n            client_width = Number(client_width.slice(0, -2));\n        }\n        scale = client_width / svg_width;\n    }\n    //console.log(`scale = ${scale}`)\n    var offsetY = boxRef.clientHeight / 2 - svg_height * scale / 2;\n    var offsetX = boxRef.clientWidth / 2 - svg_width * scale / 2;\n    pzRef.moveTo(offsetX, 0);\n    //console.log(`moveTo (${offsetX},${offsetY})`)\n    var cbox = svg.getBoundingClientRect();\n    var fit_width_zoom = boxRef.clientWidth / (svg_width * scale);\n    var zoomX = boxRef.clientWidth / 2;\n    var zoomY = boxRef.clientHeight / 2;\n    pzRef.zoomAbs(zoomX, zoomY, fit_width_zoom);\n}\n_c5 = Top;\nfunction fetch_json(json_filename) {\n    return _fetch_json.apply(this, arguments);\n}\nfunction _fetch_json() {\n    _fetch_json = _asyncToGenerator(D_Dev_web_next_svg_node_modules_next_dist_compiled_regenerator_runtime_runtime_js__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee(json_filename) {\n        var response;\n        return D_Dev_web_next_svg_node_modules_next_dist_compiled_regenerator_runtime_runtime_js__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee$(_ctx) {\n            while(1)switch(_ctx.prev = _ctx.next){\n                case 0:\n                    _ctx.next = 2;\n                    return fetch(\"/next-svg/\".concat(json_filename));\n                case 2:\n                    response = _ctx.sent;\n                    _ctx.next = 5;\n                    return response.json();\n                case 5:\n                    return _ctx.abrupt(\"return\", _ctx.sent);\n                case 6:\n                case \"end\":\n                    return _ctx.stop();\n            }\n        }, _callee);\n    }));\n    return _fetch_json.apply(this, arguments);\n}\nfunction setup_links(svg_id, json_data) {\n    var svg = get_svg_id(svg_id);\n    if (svg) {\n        var draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_2__.SVG)(svg);\n        var text_nodes = draw.find('text');\n        var text_array = _toConsumableArray(text_nodes);\n        text_array.forEach(function(text) {\n            var key = text.node.innerHTML;\n            if (key in json_data) {\n                //text.linkTo(json_data[key])//link in same page\n                text.linkTo(function(link) {\n                    link.to(json_data[key]).target('_blank');\n                }) //link in new page\n                ;\n                text.css({\n                    'text-decoration': 'underline'\n                });\n            }\n        });\n    //text.fill('#f06')\n    }\n    return;\n}\nfunction flash_links(text_list, duration) {\n    text_list.forEach(function(text) {\n        text.fill({\n            color: 'red'\n        });\n        setTimeout(function() {\n            text.fill({\n                color: '#05236e'\n            });\n        }, duration);\n    });\n}\nfunction get_title(svg_id) {\n    var svg = get_svg_id(svg_id);\n    if (!svg) {\n        return \"\";\n    }\n    var title = \"\";\n    var draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_2__.SVG)(svg);\n    var title_nodes = draw.find('title');\n    var title_array = _toConsumableArray(title_nodes);\n    if (title_array.length > 0) {\n        title = title_array[0].node.innerHTML;\n    }\n    return title;\n}\nfunction has_model(src) {\n    if (src == \"long_diag2.svg\") {\n        return true;\n    } else if (src == \"nRF52.svg\") {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nvar _c, _c1, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Reset\");\n$RefreshReg$(_c1, \"Center\");\n$RefreshReg$(_c2, \"FitHeight\");\n$RefreshReg$(_c3, \"FitWidth\");\n$RefreshReg$(_c4, \"Fit\");\n$RefreshReg$(_c5, \"Top\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            var currentExports = module.__proto__.exports;\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/svg_utils.js\n");

/***/ }),

/***/ "./pages/index.js":
/*!************************!*\
  !*** ./pages/index.js ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ PanZoom; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/head */ \"./node_modules/next/head.js\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _components_SlidesList__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/SlidesList */ \"./components/SlidesList.js\");\n/* harmony import */ var _mui_material__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @mui/material */ \"./node_modules/@mui/material/index.js\");\n/* harmony import */ var _slides_files_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./slides_files.json */ \"./pages/slides_files.json\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n\n\n\n\n\nvar description = \"This example shows how to create a list of interactive Slides out of an svg images files list\";\nfunction PanZoom() {\n    return(/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_head__WEBPACK_IMPORTED_MODULE_1___default()), {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"title\", {\n                        children: \"Pan Zoom\"\n                    }, void 0, false, {\n                        fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\pages\\\\index.js\",\n                        lineNumber: 13,\n                        columnNumber: 7\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"link\", {\n                        rel: \"icon\",\n                        href: \"/favicon.ico\"\n                    }, void 0, false, {\n                        fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\pages\\\\index.js\",\n                        lineNumber: 14,\n                        columnNumber: 7\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\pages\\\\index.js\",\n                lineNumber: 12,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_4__.Typography, {\n                p: 1,\n                children: description\n            }, void 0, false, {\n                fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\pages\\\\index.js\",\n                lineNumber: 16,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_SlidesList__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                list: _slides_files_json__WEBPACK_IMPORTED_MODULE_3__\n            }, void 0, false, {\n                fileName: \"D:\\\\Dev\\\\web\\\\next-svg\\\\pages\\\\index.js\",\n                lineNumber: 17,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true));\n};\n_c = PanZoom;\nvar _c;\n$RefreshReg$(_c, \"PanZoom\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            var currentExports = module.__proto__.exports;\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQTRCO0FBQ3FCO0FBQ1A7QUFDQTtBQUUxQyxHQUFLLENBQUNJLFdBQVcsR0FBSSxDQUE2RjtBQUVuRyxRQUFRLENBQUNDLE9BQU8sR0FBRyxDQUFDO0lBRWpDLE1BQU07O3dGQUVETCxrREFBSTs7Z0dBQ0pNLENBQUs7a0NBQUMsQ0FBUTs7Ozs7O2dHQUNkQyxDQUFJO3dCQUFDQyxHQUFHLEVBQUMsQ0FBTTt3QkFBQ0MsSUFBSSxFQUFDLENBQWM7Ozs7Ozs7Ozs7Ozt3RkFFbkNQLHFEQUFVO2dCQUFDUSxDQUFDLEVBQUUsQ0FBQzswQkFBR04sV0FBVzs7Ozs7O3dGQUM3QkgsOERBQVU7Z0JBQUNVLElBQUksRUFBRVIsK0NBQVE7Ozs7Ozs7O0FBR2hDLENBQUM7S0FadUJFLE9BQU8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vcGFnZXMvaW5kZXguanM/YmVlNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSGVhZCBmcm9tICduZXh0L2hlYWQnXG5pbXBvcnQgU2xpZGVzTGlzdCBmcm9tICcuLi9jb21wb25lbnRzL1NsaWRlc0xpc3QnXG5pbXBvcnQge1R5cG9ncmFwaHkgIH0gZnJvbSAnQG11aS9tYXRlcmlhbCc7XG5pbXBvcnQgc3ZnX2xpc3QgZnJvbSAnLi9zbGlkZXNfZmlsZXMuanNvbidcblxuY29uc3QgZGVzY3JpcHRpb24gPSBgVGhpcyBleGFtcGxlIHNob3dzIGhvdyB0byBjcmVhdGUgYSBsaXN0IG9mIGludGVyYWN0aXZlIFNsaWRlcyBvdXQgb2YgYW4gc3ZnIGltYWdlcyBmaWxlcyBsaXN0YFxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQYW5ab29tKCkge1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxIZWFkPlxuICAgICAgPHRpdGxlPlBhbiBab29tPC90aXRsZT5cbiAgICAgIDxsaW5rIHJlbD1cImljb25cIiBocmVmPVwiL2Zhdmljb24uaWNvXCIgLz5cbiAgICAgIDwvSGVhZD5cbiAgICAgIDxUeXBvZ3JhcGh5IHA9ezF9PntkZXNjcmlwdGlvbn08L1R5cG9ncmFwaHk+XG4gICAgICA8U2xpZGVzTGlzdCBsaXN0PXtzdmdfbGlzdH0vPlxuICAgIDwvPlxuICApXG59XG4iXSwibmFtZXMiOlsiSGVhZCIsIlNsaWRlc0xpc3QiLCJUeXBvZ3JhcGh5Iiwic3ZnX2xpc3QiLCJkZXNjcmlwdGlvbiIsIlBhblpvb20iLCJ0aXRsZSIsImxpbmsiLCJyZWwiLCJocmVmIiwicCIsImxpc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./pages/index.js\n");

/***/ }),

/***/ "./node_modules/next/head.js":
/*!***********************************!*\
  !*** ./node_modules/next/head.js ***!
  \***********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./dist/shared/lib/head */ \"./node_modules/next/dist/shared/lib/head.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9oZWFkLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBLGlIQUFrRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9oZWFkLmpzPzg4NDkiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3Qvc2hhcmVkL2xpYi9oZWFkJylcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/head.js\n");

/***/ }),

/***/ "./node_modules/ngraph.events/index.js":
/*!*********************************************!*\
  !*** ./node_modules/ngraph.events/index.js ***!
  \*********************************************/
/***/ (function(module) {

eval("module.exports = function eventify(subject) {\n  validateSubject(subject);\n\n  var eventsStorage = createEventsStorage(subject);\n  subject.on = eventsStorage.on;\n  subject.off = eventsStorage.off;\n  subject.fire = eventsStorage.fire;\n  return subject;\n};\n\nfunction createEventsStorage(subject) {\n  // Store all event listeners to this hash. Key is event name, value is array\n  // of callback records.\n  //\n  // A callback record consists of callback function and its optional context:\n  // { 'eventName' => [{callback: function, ctx: object}] }\n  var registeredEvents = Object.create(null);\n\n  return {\n    on: function (eventName, callback, ctx) {\n      if (typeof callback !== 'function') {\n        throw new Error('callback is expected to be a function');\n      }\n      var handlers = registeredEvents[eventName];\n      if (!handlers) {\n        handlers = registeredEvents[eventName] = [];\n      }\n      handlers.push({callback: callback, ctx: ctx});\n\n      return subject;\n    },\n\n    off: function (eventName, callback) {\n      var wantToRemoveAll = (typeof eventName === 'undefined');\n      if (wantToRemoveAll) {\n        // Killing old events storage should be enough in this case:\n        registeredEvents = Object.create(null);\n        return subject;\n      }\n\n      if (registeredEvents[eventName]) {\n        var deleteAllCallbacksForEvent = (typeof callback !== 'function');\n        if (deleteAllCallbacksForEvent) {\n          delete registeredEvents[eventName];\n        } else {\n          var callbacks = registeredEvents[eventName];\n          for (var i = 0; i < callbacks.length; ++i) {\n            if (callbacks[i].callback === callback) {\n              callbacks.splice(i, 1);\n            }\n          }\n        }\n      }\n\n      return subject;\n    },\n\n    fire: function (eventName) {\n      var callbacks = registeredEvents[eventName];\n      if (!callbacks) {\n        return subject;\n      }\n\n      var fireArguments;\n      if (arguments.length > 1) {\n        fireArguments = Array.prototype.splice.call(arguments, 1);\n      }\n      for(var i = 0; i < callbacks.length; ++i) {\n        var callbackInfo = callbacks[i];\n        callbackInfo.callback.apply(callbackInfo.ctx, fireArguments);\n      }\n\n      return subject;\n    }\n  };\n}\n\nfunction validateSubject(subject) {\n  if (!subject) {\n    throw new Error('Eventify cannot use falsy object as events subject');\n  }\n  var reservedWords = ['on', 'fire', 'off'];\n  for (var i = 0; i < reservedWords.length; ++i) {\n    if (subject.hasOwnProperty(reservedWords[i])) {\n      throw new Error(\"Subject cannot be eventified, since it already has property '\" + reservedWords[i] + \"'\");\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmdyYXBoLmV2ZW50cy9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxpQkFBaUIsZ0NBQWdDO0FBQ3hEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw2QkFBNkI7O0FBRWxEO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLDBCQUEwQixzQkFBc0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHNCQUFzQjtBQUMzQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiwwQkFBMEI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmdyYXBoLmV2ZW50cy9pbmRleC5qcz83NzY1Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXZlbnRpZnkoc3ViamVjdCkge1xuICB2YWxpZGF0ZVN1YmplY3Qoc3ViamVjdCk7XG5cbiAgdmFyIGV2ZW50c1N0b3JhZ2UgPSBjcmVhdGVFdmVudHNTdG9yYWdlKHN1YmplY3QpO1xuICBzdWJqZWN0Lm9uID0gZXZlbnRzU3RvcmFnZS5vbjtcbiAgc3ViamVjdC5vZmYgPSBldmVudHNTdG9yYWdlLm9mZjtcbiAgc3ViamVjdC5maXJlID0gZXZlbnRzU3RvcmFnZS5maXJlO1xuICByZXR1cm4gc3ViamVjdDtcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50c1N0b3JhZ2Uoc3ViamVjdCkge1xuICAvLyBTdG9yZSBhbGwgZXZlbnQgbGlzdGVuZXJzIHRvIHRoaXMgaGFzaC4gS2V5IGlzIGV2ZW50IG5hbWUsIHZhbHVlIGlzIGFycmF5XG4gIC8vIG9mIGNhbGxiYWNrIHJlY29yZHMuXG4gIC8vXG4gIC8vIEEgY2FsbGJhY2sgcmVjb3JkIGNvbnNpc3RzIG9mIGNhbGxiYWNrIGZ1bmN0aW9uIGFuZCBpdHMgb3B0aW9uYWwgY29udGV4dDpcbiAgLy8geyAnZXZlbnROYW1lJyA9PiBbe2NhbGxiYWNrOiBmdW5jdGlvbiwgY3R4OiBvYmplY3R9XSB9XG4gIHZhciByZWdpc3RlcmVkRXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICByZXR1cm4ge1xuICAgIG9uOiBmdW5jdGlvbiAoZXZlbnROYW1lLCBjYWxsYmFjaywgY3R4KSB7XG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY2FsbGJhY2sgaXMgZXhwZWN0ZWQgdG8gYmUgYSBmdW5jdGlvbicpO1xuICAgICAgfVxuICAgICAgdmFyIGhhbmRsZXJzID0gcmVnaXN0ZXJlZEV2ZW50c1tldmVudE5hbWVdO1xuICAgICAgaWYgKCFoYW5kbGVycykge1xuICAgICAgICBoYW5kbGVycyA9IHJlZ2lzdGVyZWRFdmVudHNbZXZlbnROYW1lXSA9IFtdO1xuICAgICAgfVxuICAgICAgaGFuZGxlcnMucHVzaCh7Y2FsbGJhY2s6IGNhbGxiYWNrLCBjdHg6IGN0eH0pO1xuXG4gICAgICByZXR1cm4gc3ViamVjdDtcbiAgICB9LFxuXG4gICAgb2ZmOiBmdW5jdGlvbiAoZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICAgICAgdmFyIHdhbnRUb1JlbW92ZUFsbCA9ICh0eXBlb2YgZXZlbnROYW1lID09PSAndW5kZWZpbmVkJyk7XG4gICAgICBpZiAod2FudFRvUmVtb3ZlQWxsKSB7XG4gICAgICAgIC8vIEtpbGxpbmcgb2xkIGV2ZW50cyBzdG9yYWdlIHNob3VsZCBiZSBlbm91Z2ggaW4gdGhpcyBjYXNlOlxuICAgICAgICByZWdpc3RlcmVkRXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgcmV0dXJuIHN1YmplY3Q7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWdpc3RlcmVkRXZlbnRzW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgdmFyIGRlbGV0ZUFsbENhbGxiYWNrc0ZvckV2ZW50ID0gKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJyk7XG4gICAgICAgIGlmIChkZWxldGVBbGxDYWxsYmFja3NGb3JFdmVudCkge1xuICAgICAgICAgIGRlbGV0ZSByZWdpc3RlcmVkRXZlbnRzW2V2ZW50TmFtZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGNhbGxiYWNrcyA9IHJlZ2lzdGVyZWRFdmVudHNbZXZlbnROYW1lXTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrc1tpXS5jYWxsYmFjayA9PT0gY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2tzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN1YmplY3Q7XG4gICAgfSxcblxuICAgIGZpcmU6IGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgIHZhciBjYWxsYmFja3MgPSByZWdpc3RlcmVkRXZlbnRzW2V2ZW50TmFtZV07XG4gICAgICBpZiAoIWNhbGxiYWNrcykge1xuICAgICAgICByZXR1cm4gc3ViamVjdDtcbiAgICAgIH1cblxuICAgICAgdmFyIGZpcmVBcmd1bWVudHM7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZmlyZUFyZ3VtZW50cyA9IEFycmF5LnByb3RvdHlwZS5zcGxpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgfVxuICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgY2FsbGJhY2tJbmZvID0gY2FsbGJhY2tzW2ldO1xuICAgICAgICBjYWxsYmFja0luZm8uY2FsbGJhY2suYXBwbHkoY2FsbGJhY2tJbmZvLmN0eCwgZmlyZUFyZ3VtZW50cyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdWJqZWN0O1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVTdWJqZWN0KHN1YmplY3QpIHtcbiAgaWYgKCFzdWJqZWN0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFdmVudGlmeSBjYW5ub3QgdXNlIGZhbHN5IG9iamVjdCBhcyBldmVudHMgc3ViamVjdCcpO1xuICB9XG4gIHZhciByZXNlcnZlZFdvcmRzID0gWydvbicsICdmaXJlJywgJ29mZiddO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc2VydmVkV29yZHMubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoc3ViamVjdC5oYXNPd25Qcm9wZXJ0eShyZXNlcnZlZFdvcmRzW2ldKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU3ViamVjdCBjYW5ub3QgYmUgZXZlbnRpZmllZCwgc2luY2UgaXQgYWxyZWFkeSBoYXMgcHJvcGVydHkgJ1wiICsgcmVzZXJ2ZWRXb3Jkc1tpXSArIFwiJ1wiKTtcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/ngraph.events/index.js\n");

/***/ }),

/***/ "./node_modules/panzoom/index.js":
/*!***************************************!*\
  !*** ./node_modules/panzoom/index.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Allows to drag and zoom svg elements\n */\nvar wheel = __webpack_require__(/*! wheel */ \"./node_modules/wheel/index.js\");\nvar animate = __webpack_require__(/*! amator */ \"./node_modules/amator/index.js\");\nvar eventify = __webpack_require__(/*! ngraph.events */ \"./node_modules/ngraph.events/index.js\");\nvar kinetic = __webpack_require__(/*! ./lib/kinetic.js */ \"./node_modules/panzoom/lib/kinetic.js\");\nvar createTextSelectionInterceptor = __webpack_require__(/*! ./lib/createTextSelectionInterceptor.js */ \"./node_modules/panzoom/lib/createTextSelectionInterceptor.js\");\nvar domTextSelectionInterceptor = createTextSelectionInterceptor();\nvar fakeTextSelectorInterceptor = createTextSelectionInterceptor(true);\nvar Transform = __webpack_require__(/*! ./lib/transform.js */ \"./node_modules/panzoom/lib/transform.js\");\nvar makeSvgController = __webpack_require__(/*! ./lib/svgController.js */ \"./node_modules/panzoom/lib/svgController.js\");\nvar makeDomController = __webpack_require__(/*! ./lib/domController.js */ \"./node_modules/panzoom/lib/domController.js\");\n\nvar defaultZoomSpeed = 1;\nvar defaultDoubleTapZoomSpeed = 1.75;\nvar doubleTapSpeedInMS = 300;\n\nmodule.exports = createPanZoom;\n\n/**\n * Creates a new instance of panzoom, so that an object can be panned and zoomed\n *\n * @param {DOMElement} domElement where panzoom should be attached.\n * @param {Object} options that configure behavior.\n */\nfunction createPanZoom(domElement, options) {\n  options = options || {};\n\n  var panController = options.controller;\n\n  if (!panController) {\n    if (makeSvgController.canAttach(domElement)) {\n      panController = makeSvgController(domElement, options);\n    } else if (makeDomController.canAttach(domElement)) {\n      panController = makeDomController(domElement, options);\n    }\n  }\n\n  if (!panController) {\n    throw new Error(\n      'Cannot create panzoom for the current type of dom element'\n    );\n  }\n  var owner = panController.getOwner();\n  // just to avoid GC pressure, every time we do intermediate transform\n  // we return this object. For internal use only. Never give it back to the consumer of this library\n  var storedCTMResult = { x: 0, y: 0 };\n\n  var isDirty = false;\n  var transform = new Transform();\n\n  if (panController.initTransform) {\n    panController.initTransform(transform);\n  }\n\n  var filterKey = typeof options.filterKey === 'function' ? options.filterKey : noop;\n  // TODO: likely need to unite pinchSpeed with zoomSpeed\n  var pinchSpeed = typeof options.pinchSpeed === 'number' ? options.pinchSpeed : 1;\n  var bounds = options.bounds;\n  var maxZoom = typeof options.maxZoom === 'number' ? options.maxZoom : Number.POSITIVE_INFINITY;\n  var minZoom = typeof options.minZoom === 'number' ? options.minZoom : 0;\n\n  var boundsPadding = typeof options.boundsPadding === 'number' ? options.boundsPadding : 0.05;\n  var zoomDoubleClickSpeed = typeof options.zoomDoubleClickSpeed === 'number' ? options.zoomDoubleClickSpeed : defaultDoubleTapZoomSpeed;\n  var beforeWheel = options.beforeWheel || noop;\n  var beforeMouseDown = options.beforeMouseDown || noop;\n  var speed = typeof options.zoomSpeed === 'number' ? options.zoomSpeed : defaultZoomSpeed;\n  var transformOrigin = parseTransformOrigin(options.transformOrigin);\n  var textSelection = options.enableTextSelection ? fakeTextSelectorInterceptor : domTextSelectionInterceptor;\n\n  validateBounds(bounds);\n\n  if (options.autocenter) {\n    autocenter();\n  }\n\n  var frameAnimation;\n  var lastTouchEndTime = 0;\n  var lastSingleFingerOffset;\n  var touchInProgress = false;\n\n  // We only need to fire panstart when actual move happens\n  var panstartFired = false;\n\n  // cache mouse coordinates here\n  var mouseX;\n  var mouseY;\n\n  var pinchZoomLength;\n\n  var smoothScroll;\n  if ('smoothScroll' in options && !options.smoothScroll) {\n    // If user explicitly asked us not to use smooth scrolling, we obey\n    smoothScroll = rigidScroll();\n  } else {\n    // otherwise we use forward smoothScroll settings to kinetic API\n    // which makes scroll smoothing.\n    smoothScroll = kinetic(getPoint, scroll, options.smoothScroll);\n  }\n\n  var moveByAnimation;\n  var zoomToAnimation;\n\n  var multiTouch;\n  var paused = false;\n\n  listenForEvents();\n\n  var api = {\n    dispose: dispose,\n    moveBy: internalMoveBy,\n    moveTo: moveTo,\n    smoothMoveTo: smoothMoveTo, \n    centerOn: centerOn,\n    zoomTo: publicZoomTo,\n    zoomAbs: zoomAbs,\n    smoothZoom: smoothZoom,\n    smoothZoomAbs: smoothZoomAbs,\n    showRectangle: showRectangle,\n\n    pause: pause,\n    resume: resume,\n    isPaused: isPaused,\n\n    getTransform: getTransformModel,\n\n    getMinZoom: getMinZoom,\n    setMinZoom: setMinZoom,\n\n    getMaxZoom: getMaxZoom,\n    setMaxZoom: setMaxZoom,\n\n    getTransformOrigin: getTransformOrigin,\n    setTransformOrigin: setTransformOrigin,\n\n    getZoomSpeed: getZoomSpeed,\n    setZoomSpeed: setZoomSpeed\n  };\n\n  eventify(api);\n  \n  var initialX = typeof options.initialX === 'number' ? options.initialX : transform.x;\n  var initialY = typeof options.initialY === 'number' ? options.initialY : transform.y;\n  var initialZoom = typeof options.initialZoom === 'number' ? options.initialZoom : transform.scale;\n\n  if(initialX != transform.x || initialY != transform.y || initialZoom != transform.scale){\n    zoomAbs(initialX, initialY, initialZoom);\n  }\n\n  return api;\n\n  function pause() {\n    releaseEvents();\n    paused = true;\n  }\n\n  function resume() {\n    if (paused) {\n      listenForEvents();\n      paused = false;\n    }\n  }\n\n  function isPaused() {\n    return paused;\n  }\n\n  function showRectangle(rect) {\n    // TODO: this duplicates autocenter. I think autocenter should go.\n    var clientRect = owner.getBoundingClientRect();\n    var size = transformToScreen(clientRect.width, clientRect.height);\n\n    var rectWidth = rect.right - rect.left;\n    var rectHeight = rect.bottom - rect.top;\n    if (!Number.isFinite(rectWidth) || !Number.isFinite(rectHeight)) {\n      throw new Error('Invalid rectangle');\n    }\n\n    var dw = size.x / rectWidth;\n    var dh = size.y / rectHeight;\n    var scale = Math.min(dw, dh);\n    transform.x = -(rect.left + rectWidth / 2) * scale + size.x / 2;\n    transform.y = -(rect.top + rectHeight / 2) * scale + size.y / 2;\n    transform.scale = scale;\n  }\n\n  function transformToScreen(x, y) {\n    if (panController.getScreenCTM) {\n      var parentCTM = panController.getScreenCTM();\n      var parentScaleX = parentCTM.a;\n      var parentScaleY = parentCTM.d;\n      var parentOffsetX = parentCTM.e;\n      var parentOffsetY = parentCTM.f;\n      storedCTMResult.x = x * parentScaleX - parentOffsetX;\n      storedCTMResult.y = y * parentScaleY - parentOffsetY;\n    } else {\n      storedCTMResult.x = x;\n      storedCTMResult.y = y;\n    }\n\n    return storedCTMResult;\n  }\n\n  function autocenter() {\n    var w; // width of the parent\n    var h; // height of the parent\n    var left = 0;\n    var top = 0;\n    var sceneBoundingBox = getBoundingBox();\n    if (sceneBoundingBox) {\n      // If we have bounding box - use it.\n      left = sceneBoundingBox.left;\n      top = sceneBoundingBox.top;\n      w = sceneBoundingBox.right - sceneBoundingBox.left;\n      h = sceneBoundingBox.bottom - sceneBoundingBox.top;\n    } else {\n      // otherwise just use whatever space we have\n      var ownerRect = owner.getBoundingClientRect();\n      w = ownerRect.width;\n      h = ownerRect.height;\n    }\n    var bbox = panController.getBBox();\n    if (bbox.width === 0 || bbox.height === 0) {\n      // we probably do not have any elements in the SVG\n      // just bail out;\n      return;\n    }\n    var dh = h / bbox.height;\n    var dw = w / bbox.width;\n    var scale = Math.min(dw, dh);\n    transform.x = -(bbox.left + bbox.width / 2) * scale + w / 2 + left;\n    transform.y = -(bbox.top + bbox.height / 2) * scale + h / 2 + top;\n    transform.scale = scale;\n  }\n\n  function getTransformModel() {\n    // TODO: should this be read only?\n    return transform;\n  }\n\n  function getMinZoom() {\n    return minZoom;\n  }\n\n  function setMinZoom(newMinZoom) {\n    minZoom = newMinZoom;\n  }\n\n  function getMaxZoom() {\n    return maxZoom;\n  }\n\n  function setMaxZoom(newMaxZoom) {\n    maxZoom = newMaxZoom;\n  }\n\n  function getTransformOrigin() {\n    return transformOrigin;\n  }\n\n  function setTransformOrigin(newTransformOrigin) {\n    transformOrigin = parseTransformOrigin(newTransformOrigin);\n  }\n\n  function getZoomSpeed() {\n    return speed;\n  }\n\n  function setZoomSpeed(newSpeed) {\n    if (!Number.isFinite(newSpeed)) {\n      throw new Error('Zoom speed should be a number');\n    }\n    speed = newSpeed;\n  }\n\n  function getPoint() {\n    return {\n      x: transform.x,\n      y: transform.y\n    };\n  }\n\n  function moveTo(x, y) {\n    transform.x = x;\n    transform.y = y;\n\n    keepTransformInsideBounds();\n\n    triggerEvent('pan');\n    makeDirty();\n  }\n\n  function moveBy(dx, dy) {\n    moveTo(transform.x + dx, transform.y + dy);\n  }\n\n  function keepTransformInsideBounds() {\n    var boundingBox = getBoundingBox();\n    if (!boundingBox) return;\n\n    var adjusted = false;\n    var clientRect = getClientRect();\n\n    var diff = boundingBox.left - clientRect.right;\n    if (diff > 0) {\n      transform.x += diff;\n      adjusted = true;\n    }\n    // check the other side:\n    diff = boundingBox.right - clientRect.left;\n    if (diff < 0) {\n      transform.x += diff;\n      adjusted = true;\n    }\n\n    // y axis:\n    diff = boundingBox.top - clientRect.bottom;\n    if (diff > 0) {\n      // we adjust transform, so that it matches exactly our bounding box:\n      // transform.y = boundingBox.top - (boundingBox.height + boundingBox.y) * transform.scale =>\n      // transform.y = boundingBox.top - (clientRect.bottom - transform.y) =>\n      // transform.y = diff + transform.y =>\n      transform.y += diff;\n      adjusted = true;\n    }\n\n    diff = boundingBox.bottom - clientRect.top;\n    if (diff < 0) {\n      transform.y += diff;\n      adjusted = true;\n    }\n    return adjusted;\n  }\n\n  /**\n   * Returns bounding box that should be used to restrict scene movement.\n   */\n  function getBoundingBox() {\n    if (!bounds) return; // client does not want to restrict movement\n\n    if (typeof bounds === 'boolean') {\n      // for boolean type we use parent container bounds\n      var ownerRect = owner.getBoundingClientRect();\n      var sceneWidth = ownerRect.width;\n      var sceneHeight = ownerRect.height;\n\n      return {\n        left: sceneWidth * boundsPadding,\n        top: sceneHeight * boundsPadding,\n        right: sceneWidth * (1 - boundsPadding),\n        bottom: sceneHeight * (1 - boundsPadding)\n      };\n    }\n\n    return bounds;\n  }\n\n  function getClientRect() {\n    var bbox = panController.getBBox();\n    var leftTop = client(bbox.left, bbox.top);\n\n    return {\n      left: leftTop.x,\n      top: leftTop.y,\n      right: bbox.width * transform.scale + leftTop.x,\n      bottom: bbox.height * transform.scale + leftTop.y\n    };\n  }\n\n  function client(x, y) {\n    return {\n      x: x * transform.scale + transform.x,\n      y: y * transform.scale + transform.y\n    };\n  }\n\n  function makeDirty() {\n    isDirty = true;\n    frameAnimation = window.requestAnimationFrame(frame);\n  }\n\n  function zoomByRatio(clientX, clientY, ratio) {\n    if (isNaN(clientX) || isNaN(clientY) || isNaN(ratio)) {\n      throw new Error('zoom requires valid numbers');\n    }\n\n    var newScale = transform.scale * ratio;\n\n    if (newScale < minZoom) {\n      if (transform.scale === minZoom) return;\n\n      ratio = minZoom / transform.scale;\n    }\n    if (newScale > maxZoom) {\n      if (transform.scale === maxZoom) return;\n\n      ratio = maxZoom / transform.scale;\n    }\n\n    var size = transformToScreen(clientX, clientY);\n\n    transform.x = size.x - ratio * (size.x - transform.x);\n    transform.y = size.y - ratio * (size.y - transform.y);\n\n    // TODO: https://github.com/anvaka/panzoom/issues/112\n    if (bounds && boundsPadding === 1 && minZoom === 1) {\n      transform.scale *= ratio;\n      keepTransformInsideBounds();\n    } else {\n      var transformAdjusted = keepTransformInsideBounds();\n      if (!transformAdjusted) transform.scale *= ratio;\n    }\n\n    triggerEvent('zoom');\n\n    makeDirty();\n  }\n\n  function zoomAbs(clientX, clientY, zoomLevel) {\n    var ratio = zoomLevel / transform.scale;\n    zoomByRatio(clientX, clientY, ratio);\n  }\n\n  function centerOn(ui) {\n    var parent = ui.ownerSVGElement;\n    if (!parent)\n      throw new Error('ui element is required to be within the scene');\n\n    // TODO: should i use controller's screen CTM?\n    var clientRect = ui.getBoundingClientRect();\n    var cx = clientRect.left + clientRect.width / 2;\n    var cy = clientRect.top + clientRect.height / 2;\n\n    var container = parent.getBoundingClientRect();\n    var dx = container.width / 2 - cx;\n    var dy = container.height / 2 - cy;\n\n    internalMoveBy(dx, dy, true);\n  }\n\n  function smoothMoveTo(x, y){\n    internalMoveBy(x - transform.x, y - transform.y, true);\n  }\n\n  function internalMoveBy(dx, dy, smooth) {\n    if (!smooth) {\n      return moveBy(dx, dy);\n    }\n\n    if (moveByAnimation) moveByAnimation.cancel();\n\n    var from = { x: 0, y: 0 };\n    var to = { x: dx, y: dy };\n    var lastX = 0;\n    var lastY = 0;\n\n    moveByAnimation = animate(from, to, {\n      step: function (v) {\n        moveBy(v.x - lastX, v.y - lastY);\n\n        lastX = v.x;\n        lastY = v.y;\n      }\n    });\n  }\n\n  function scroll(x, y) {\n    cancelZoomAnimation();\n    moveTo(x, y);\n  }\n\n  function dispose() {\n    releaseEvents();\n  }\n\n  function listenForEvents() {\n    owner.addEventListener('mousedown', onMouseDown, { passive: false });\n    owner.addEventListener('dblclick', onDoubleClick, { passive: false });\n    owner.addEventListener('touchstart', onTouch, { passive: false });\n    owner.addEventListener('keydown', onKeyDown, { passive: false });\n\n    // Need to listen on the owner container, so that we are not limited\n    // by the size of the scrollable domElement\n    wheel.addWheelListener(owner, onMouseWheel, { passive: false });\n\n    makeDirty();\n  }\n\n  function releaseEvents() {\n    wheel.removeWheelListener(owner, onMouseWheel);\n    owner.removeEventListener('mousedown', onMouseDown);\n    owner.removeEventListener('keydown', onKeyDown);\n    owner.removeEventListener('dblclick', onDoubleClick);\n    owner.removeEventListener('touchstart', onTouch);\n\n    if (frameAnimation) {\n      window.cancelAnimationFrame(frameAnimation);\n      frameAnimation = 0;\n    }\n\n    smoothScroll.cancel();\n\n    releaseDocumentMouse();\n    releaseTouches();\n    textSelection.release();\n\n    triggerPanEnd();\n  }\n\n  function frame() {\n    if (isDirty) applyTransform();\n  }\n\n  function applyTransform() {\n    isDirty = false;\n\n    // TODO: Should I allow to cancel this?\n    panController.applyTransform(transform);\n\n    triggerEvent('transform');\n    frameAnimation = 0;\n  }\n\n  function onKeyDown(e) {\n    var x = 0,\n      y = 0,\n      z = 0;\n    if (e.keyCode === 38) {\n      y = 1; // up\n    } else if (e.keyCode === 40) {\n      y = -1; // down\n    } else if (e.keyCode === 37) {\n      x = 1; // left\n    } else if (e.keyCode === 39) {\n      x = -1; // right\n    } else if (e.keyCode === 189 || e.keyCode === 109) {\n      // DASH or SUBTRACT\n      z = 1; // `-` -  zoom out\n    } else if (e.keyCode === 187 || e.keyCode === 107) {\n      // EQUAL SIGN or ADD\n      z = -1; // `=` - zoom in (equal sign on US layout is under `+`)\n    }\n\n    if (filterKey(e, x, y, z)) {\n      // They don't want us to handle the key: https://github.com/anvaka/panzoom/issues/45\n      return;\n    }\n\n    if (x || y) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      var clientRect = owner.getBoundingClientRect();\n      // movement speed should be the same in both X and Y direction:\n      var offset = Math.min(clientRect.width, clientRect.height);\n      var moveSpeedRatio = 0.05;\n      var dx = offset * moveSpeedRatio * x;\n      var dy = offset * moveSpeedRatio * y;\n\n      // TODO: currently we do not animate this. It could be better to have animation\n      internalMoveBy(dx, dy);\n    }\n\n    if (z) {\n      var scaleMultiplier = getScaleMultiplier(z * 100);\n      var offset = transformOrigin ? getTransformOriginOffset() : midPoint();\n      publicZoomTo(offset.x, offset.y, scaleMultiplier);\n    }\n  }\n\n  function midPoint() {\n    var ownerRect = owner.getBoundingClientRect();\n    return {\n      x: ownerRect.width / 2,\n      y: ownerRect.height / 2\n    };\n  }\n\n  function onTouch(e) {\n    // let the override the touch behavior\n    beforeTouch(e);\n\n    if (e.touches.length === 1) {\n      return handleSingleFingerTouch(e, e.touches[0]);\n    } else if (e.touches.length === 2) {\n      // handleTouchMove() will care about pinch zoom.\n      pinchZoomLength = getPinchZoomLength(e.touches[0], e.touches[1]);\n      multiTouch = true;\n      startTouchListenerIfNeeded();\n    }\n  }\n\n  function beforeTouch(e) {\n    // TODO: Need to unify this filtering names. E.g. use `beforeTouch`\n    if (options.onTouch && !options.onTouch(e)) {\n      // if they return `false` from onTouch, we don't want to stop\n      // events propagation. Fixes https://github.com/anvaka/panzoom/issues/12\n      return;\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  function beforeDoubleClick(e) {\n    // TODO: Need to unify this filtering names. E.g. use `beforeDoubleClick``\n    if (options.onDoubleClick && !options.onDoubleClick(e)) {\n      // if they return `false` from onTouch, we don't want to stop\n      // events propagation. Fixes https://github.com/anvaka/panzoom/issues/46\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  function handleSingleFingerTouch(e) {\n    var touch = e.touches[0];\n    var offset = getOffsetXY(touch);\n    lastSingleFingerOffset = offset;\n    var point = transformToScreen(offset.x, offset.y);\n    mouseX = point.x;\n    mouseY = point.y;\n\n    smoothScroll.cancel();\n    startTouchListenerIfNeeded();\n  }\n\n  function startTouchListenerIfNeeded() {\n    if (touchInProgress) {\n      // no need to do anything, as we already listen to events;\n      return;\n    }\n\n    touchInProgress = true;\n    document.addEventListener('touchmove', handleTouchMove);\n    document.addEventListener('touchend', handleTouchEnd);\n    document.addEventListener('touchcancel', handleTouchEnd);\n  }\n\n  function handleTouchMove(e) {\n    if (e.touches.length === 1) {\n      e.stopPropagation();\n      var touch = e.touches[0];\n\n      var offset = getOffsetXY(touch);\n      var point = transformToScreen(offset.x, offset.y);\n\n      var dx = point.x - mouseX;\n      var dy = point.y - mouseY;\n\n      if (dx !== 0 && dy !== 0) {\n        triggerPanStart();\n      }\n      mouseX = point.x;\n      mouseY = point.y;\n      internalMoveBy(dx, dy);\n    } else if (e.touches.length === 2) {\n      // it's a zoom, let's find direction\n      multiTouch = true;\n      var t1 = e.touches[0];\n      var t2 = e.touches[1];\n      var currentPinchLength = getPinchZoomLength(t1, t2);\n\n      // since the zoom speed is always based on distance from 1, we need to apply\n      // pinch speed only on that distance from 1:\n      var scaleMultiplier =\n        1 + (currentPinchLength / pinchZoomLength - 1) * pinchSpeed;\n\n      var firstTouchPoint = getOffsetXY(t1);\n      var secondTouchPoint = getOffsetXY(t2);\n      mouseX = (firstTouchPoint.x + secondTouchPoint.x) / 2;\n      mouseY = (firstTouchPoint.y + secondTouchPoint.y) / 2;\n      if (transformOrigin) {\n        var offset = getTransformOriginOffset();\n        mouseX = offset.x;\n        mouseY = offset.y;\n      }\n\n      publicZoomTo(mouseX, mouseY, scaleMultiplier);\n\n      pinchZoomLength = currentPinchLength;\n      e.stopPropagation();\n      e.preventDefault();\n    }\n  }\n\n  function handleTouchEnd(e) {\n    if (e.touches.length > 0) {\n      var offset = getOffsetXY(e.touches[0]);\n      var point = transformToScreen(offset.x, offset.y);\n      mouseX = point.x;\n      mouseY = point.y;\n    } else {\n      var now = new Date();\n      if (now - lastTouchEndTime < doubleTapSpeedInMS) {\n        if (transformOrigin) {\n          var offset = getTransformOriginOffset();\n          smoothZoom(offset.x, offset.y, zoomDoubleClickSpeed);\n        } else {\n          // We want untransformed x/y here.\n          smoothZoom(lastSingleFingerOffset.x, lastSingleFingerOffset.y, zoomDoubleClickSpeed);\n        }\n      }\n\n      lastTouchEndTime = now;\n\n      triggerPanEnd();\n      releaseTouches();\n    }\n  }\n\n  function getPinchZoomLength(finger1, finger2) {\n    var dx = finger1.clientX - finger2.clientX;\n    var dy = finger1.clientY - finger2.clientY;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  function onDoubleClick(e) {\n    beforeDoubleClick(e);\n    var offset = getOffsetXY(e);\n    if (transformOrigin) {\n      // TODO: looks like this is duplicated in the file.\n      // Need to refactor\n      offset = getTransformOriginOffset();\n    }\n    smoothZoom(offset.x, offset.y, zoomDoubleClickSpeed);\n  }\n\n  function onMouseDown(e) {\n    // if client does not want to handle this event - just ignore the call\n    if (beforeMouseDown(e)) return;\n\n    if (touchInProgress) {\n      // modern browsers will fire mousedown for touch events too\n      // we do not want this: touch is handled separately.\n      e.stopPropagation();\n      return false;\n    }\n    // for IE, left click == 1\n    // for Firefox, left click == 0\n    var isLeftButton =\n      (e.button === 1 && window.event !== null) || e.button === 0;\n    if (!isLeftButton) return;\n\n    smoothScroll.cancel();\n\n    var offset = getOffsetXY(e);\n    var point = transformToScreen(offset.x, offset.y);\n    mouseX = point.x;\n    mouseY = point.y;\n\n    // We need to listen on document itself, since mouse can go outside of the\n    // window, and we will loose it\n    document.addEventListener('mousemove', onMouseMove);\n    document.addEventListener('mouseup', onMouseUp);\n    textSelection.capture(e.target || e.srcElement);\n\n    return false;\n  }\n\n  function onMouseMove(e) {\n    // no need to worry about mouse events when touch is happening\n    if (touchInProgress) return;\n\n    triggerPanStart();\n\n    var offset = getOffsetXY(e);\n    var point = transformToScreen(offset.x, offset.y);\n    var dx = point.x - mouseX;\n    var dy = point.y - mouseY;\n\n    mouseX = point.x;\n    mouseY = point.y;\n\n    internalMoveBy(dx, dy);\n  }\n\n  function onMouseUp() {\n    textSelection.release();\n    triggerPanEnd();\n    releaseDocumentMouse();\n  }\n\n  function releaseDocumentMouse() {\n    document.removeEventListener('mousemove', onMouseMove);\n    document.removeEventListener('mouseup', onMouseUp);\n    panstartFired = false;\n  }\n\n  function releaseTouches() {\n    document.removeEventListener('touchmove', handleTouchMove);\n    document.removeEventListener('touchend', handleTouchEnd);\n    document.removeEventListener('touchcancel', handleTouchEnd);\n    panstartFired = false;\n    multiTouch = false;\n    touchInProgress = false;\n  }\n\n  function onMouseWheel(e) {\n    // if client does not want to handle this event - just ignore the call\n    if (beforeWheel(e)) return;\n\n    smoothScroll.cancel();\n\n    var delta = e.deltaY;\n    if (e.deltaMode > 0) delta *= 100;\n\n    var scaleMultiplier = getScaleMultiplier(delta);\n\n    if (scaleMultiplier !== 1) {\n      var offset = transformOrigin\n        ? getTransformOriginOffset()\n        : getOffsetXY(e);\n      publicZoomTo(offset.x, offset.y, scaleMultiplier);\n      e.preventDefault();\n    }\n  }\n\n  function getOffsetXY(e) {\n    var offsetX, offsetY;\n    // I tried using e.offsetX, but that gives wrong results for svg, when user clicks on a path.\n    var ownerRect = owner.getBoundingClientRect();\n    offsetX = e.clientX - ownerRect.left;\n    offsetY = e.clientY - ownerRect.top;\n\n    return { x: offsetX, y: offsetY };\n  }\n\n  function smoothZoom(clientX, clientY, scaleMultiplier) {\n    var fromValue = transform.scale;\n    var from = { scale: fromValue };\n    var to = { scale: scaleMultiplier * fromValue };\n\n    smoothScroll.cancel();\n    cancelZoomAnimation();\n\n    zoomToAnimation = animate(from, to, {\n      step: function (v) {\n        zoomAbs(clientX, clientY, v.scale);\n      },\n      done: triggerZoomEnd\n    });\n  }\n\n  function smoothZoomAbs(clientX, clientY, toScaleValue) {\n    var fromValue = transform.scale;\n    var from = { scale: fromValue };\n    var to = { scale: toScaleValue };\n\n    smoothScroll.cancel();\n    cancelZoomAnimation();\n\n    zoomToAnimation = animate(from, to, {\n      step: function (v) {\n        zoomAbs(clientX, clientY, v.scale);\n      }\n    });\n  }\n\n  function getTransformOriginOffset() {\n    var ownerRect = owner.getBoundingClientRect();\n    return {\n      x: ownerRect.width * transformOrigin.x,\n      y: ownerRect.height * transformOrigin.y\n    };\n  }\n\n  function publicZoomTo(clientX, clientY, scaleMultiplier) {\n    smoothScroll.cancel();\n    cancelZoomAnimation();\n    return zoomByRatio(clientX, clientY, scaleMultiplier);\n  }\n\n  function cancelZoomAnimation() {\n    if (zoomToAnimation) {\n      zoomToAnimation.cancel();\n      zoomToAnimation = null;\n    }\n  }\n\n  function getScaleMultiplier(delta) {\n    var sign = Math.sign(delta);\n    var deltaAdjustedSpeed = Math.min(0.25, Math.abs(speed * delta / 128));\n    return 1 - sign * deltaAdjustedSpeed;\n  }\n\n  function triggerPanStart() {\n    if (!panstartFired) {\n      triggerEvent('panstart');\n      panstartFired = true;\n      smoothScroll.start();\n    }\n  }\n\n  function triggerPanEnd() {\n    if (panstartFired) {\n      // we should never run smooth scrolling if it was multiTouch (pinch zoom animation):\n      if (!multiTouch) smoothScroll.stop();\n      triggerEvent('panend');\n    }\n  }\n\n  function triggerZoomEnd() {\n    triggerEvent('zoomend');\n  }\n\n  function triggerEvent(name) {\n    api.fire(name, api);\n  }\n}\n\nfunction parseTransformOrigin(options) {\n  if (!options) return;\n  if (typeof options === 'object') {\n    if (!isNumber(options.x) || !isNumber(options.y))\n      failTransformOrigin(options);\n    return options;\n  }\n\n  failTransformOrigin();\n}\n\nfunction failTransformOrigin(options) {\n  console.error(options);\n  throw new Error(\n    [\n      'Cannot parse transform origin.',\n      'Some good examples:',\n      '  \"center center\" can be achieved with {x: 0.5, y: 0.5}',\n      '  \"top center\" can be achieved with {x: 0.5, y: 0}',\n      '  \"bottom right\" can be achieved with {x: 1, y: 1}'\n    ].join('\\n')\n  );\n}\n\nfunction noop() { }\n\nfunction validateBounds(bounds) {\n  var boundsType = typeof bounds;\n  if (boundsType === 'undefined' || boundsType === 'boolean') return; // this is okay\n  // otherwise need to be more thorough:\n  var validBounds =\n    isNumber(bounds.left) &&\n    isNumber(bounds.top) &&\n    isNumber(bounds.bottom) &&\n    isNumber(bounds.right);\n\n  if (!validBounds)\n    throw new Error(\n      'Bounds object is not valid. It can be: ' +\n      'undefined, boolean (true|false) or an object {left, top, right, bottom}'\n    );\n}\n\nfunction isNumber(x) {\n  return Number.isFinite(x);\n}\n\n// IE 11 does not support isNaN:\nfunction isNaN(value) {\n  if (Number.isNaN) {\n    return Number.isNaN(value);\n  }\n\n  return value !== value;\n}\n\nfunction rigidScroll() {\n  return {\n    start: noop,\n    stop: noop,\n    cancel: noop\n  };\n}\n\nfunction autoRun() {\n  if (typeof document === 'undefined') return;\n\n  var scripts = document.getElementsByTagName('script');\n  if (!scripts) return;\n  var panzoomScript;\n\n  for (var i = 0; i < scripts.length; ++i) {\n    var x = scripts[i];\n    if (x.src && x.src.match(/\\bpanzoom(\\.min)?\\.js/)) {\n      panzoomScript = x;\n      break;\n    }\n  }\n\n  if (!panzoomScript) return;\n\n  var query = panzoomScript.getAttribute('query');\n  if (!query) return;\n\n  var globalName = panzoomScript.getAttribute('name') || 'pz';\n  var started = Date.now();\n\n  tryAttach();\n\n  function tryAttach() {\n    var el = document.querySelector(query);\n    if (!el) {\n      var now = Date.now();\n      var elapsed = now - started;\n      if (elapsed < 2000) {\n        // Let's wait a bit\n        setTimeout(tryAttach, 100);\n        return;\n      }\n      // If we don't attach within 2 seconds to the target element, consider it a failure\n      console.error('Cannot find the panzoom element', globalName);\n      return;\n    }\n    var options = collectOptions(panzoomScript);\n    console.log(options);\n    window[globalName] = createPanZoom(el, options);\n  }\n\n  function collectOptions(script) {\n    var attrs = script.attributes;\n    var options = {};\n    for (var j = 0; j < attrs.length; ++j) {\n      var attr = attrs[j];\n      var nameValue = getPanzoomAttributeNameValue(attr);\n      if (nameValue) {\n        options[nameValue.name] = nameValue.value;\n      }\n    }\n\n    return options;\n  }\n\n  function getPanzoomAttributeNameValue(attr) {\n    if (!attr.name) return;\n    var isPanZoomAttribute =\n      attr.name[0] === 'p' && attr.name[1] === 'z' && attr.name[2] === '-';\n\n    if (!isPanZoomAttribute) return;\n\n    var name = attr.name.substr(3);\n    var value = JSON.parse(attr.value);\n    return { name: name, value: value };\n  }\n}\n\nautoRun();\n\t//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/panzoom/index.js\n");

/***/ }),

/***/ "./node_modules/panzoom/lib/createTextSelectionInterceptor.js":
/*!********************************************************************!*\
  !*** ./node_modules/panzoom/lib/createTextSelectionInterceptor.js ***!
  \********************************************************************/
/***/ (function(module) {

eval("/**\n * Disallows selecting text.\n */\nmodule.exports = createTextSelectionInterceptor;\n\nfunction createTextSelectionInterceptor(useFake) {\n  if (useFake) {\n    return {\n      capture: noop,\n      release: noop\n    };\n  }\n\n  var dragObject;\n  var prevSelectStart;\n  var prevDragStart;\n  var wasCaptured = false;\n\n  return {\n    capture: capture,\n    release: release\n  };\n\n  function capture(domObject) {\n    wasCaptured = true;\n    prevSelectStart = window.document.onselectstart;\n    prevDragStart = window.document.ondragstart;\n\n    window.document.onselectstart = disabled;\n\n    dragObject = domObject;\n    dragObject.ondragstart = disabled;\n  }\n\n  function release() {\n    if (!wasCaptured) return;\n    \n    wasCaptured = false;\n    window.document.onselectstart = prevSelectStart;\n    if (dragObject) dragObject.ondragstart = prevDragStart;\n  }\n}\n\nfunction disabled(e) {\n  e.stopPropagation();\n  return false;\n}\n\nfunction noop() {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGFuem9vbS9saWIvY3JlYXRlVGV4dFNlbGVjdGlvbkludGVyY2VwdG9yLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9wYW56b29tL2xpYi9jcmVhdGVUZXh0U2VsZWN0aW9uSW50ZXJjZXB0b3IuanM/NDEwYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERpc2FsbG93cyBzZWxlY3RpbmcgdGV4dC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVUZXh0U2VsZWN0aW9uSW50ZXJjZXB0b3I7XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHRTZWxlY3Rpb25JbnRlcmNlcHRvcih1c2VGYWtlKSB7XG4gIGlmICh1c2VGYWtlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNhcHR1cmU6IG5vb3AsXG4gICAgICByZWxlYXNlOiBub29wXG4gICAgfTtcbiAgfVxuXG4gIHZhciBkcmFnT2JqZWN0O1xuICB2YXIgcHJldlNlbGVjdFN0YXJ0O1xuICB2YXIgcHJldkRyYWdTdGFydDtcbiAgdmFyIHdhc0NhcHR1cmVkID0gZmFsc2U7XG5cbiAgcmV0dXJuIHtcbiAgICBjYXB0dXJlOiBjYXB0dXJlLFxuICAgIHJlbGVhc2U6IHJlbGVhc2VcbiAgfTtcblxuICBmdW5jdGlvbiBjYXB0dXJlKGRvbU9iamVjdCkge1xuICAgIHdhc0NhcHR1cmVkID0gdHJ1ZTtcbiAgICBwcmV2U2VsZWN0U3RhcnQgPSB3aW5kb3cuZG9jdW1lbnQub25zZWxlY3RzdGFydDtcbiAgICBwcmV2RHJhZ1N0YXJ0ID0gd2luZG93LmRvY3VtZW50Lm9uZHJhZ3N0YXJ0O1xuXG4gICAgd2luZG93LmRvY3VtZW50Lm9uc2VsZWN0c3RhcnQgPSBkaXNhYmxlZDtcblxuICAgIGRyYWdPYmplY3QgPSBkb21PYmplY3Q7XG4gICAgZHJhZ09iamVjdC5vbmRyYWdzdGFydCA9IGRpc2FibGVkO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVsZWFzZSgpIHtcbiAgICBpZiAoIXdhc0NhcHR1cmVkKSByZXR1cm47XG4gICAgXG4gICAgd2FzQ2FwdHVyZWQgPSBmYWxzZTtcbiAgICB3aW5kb3cuZG9jdW1lbnQub25zZWxlY3RzdGFydCA9IHByZXZTZWxlY3RTdGFydDtcbiAgICBpZiAoZHJhZ09iamVjdCkgZHJhZ09iamVjdC5vbmRyYWdzdGFydCA9IHByZXZEcmFnU3RhcnQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGlzYWJsZWQoZSkge1xuICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/panzoom/lib/createTextSelectionInterceptor.js\n");

/***/ }),

/***/ "./node_modules/panzoom/lib/domController.js":
/*!***************************************************!*\
  !*** ./node_modules/panzoom/lib/domController.js ***!
  \***************************************************/
/***/ (function(module) {

eval("module.exports = makeDomController;\n\nmodule.exports.canAttach = isDomElement;\n\nfunction makeDomController(domElement, options) {\n  var elementValid = isDomElement(domElement); \n  if (!elementValid) {\n    throw new Error('panzoom requires DOM element to be attached to the DOM tree');\n  }\n\n  var owner = domElement.parentElement;\n  domElement.scrollTop = 0;\n  \n  if (!options.disableKeyboardInteraction) {\n    owner.setAttribute('tabindex', 0);\n  }\n\n  var api = {\n    getBBox: getBBox,\n    getOwner: getOwner,\n    applyTransform: applyTransform,\n  };\n  \n  return api;\n\n  function getOwner() {\n    return owner;\n  }\n\n  function getBBox() {\n    // TODO: We should probably cache this?\n    return  {\n      left: 0,\n      top: 0,\n      width: domElement.clientWidth,\n      height: domElement.clientHeight\n    };\n  }\n\n  function applyTransform(transform) {\n    // TODO: Should we cache this?\n    domElement.style.transformOrigin = '0 0 0';\n    domElement.style.transform = 'matrix(' +\n      transform.scale + ', 0, 0, ' +\n      transform.scale + ', ' +\n      transform.x + ', ' + transform.y + ')';\n  }\n}\n\nfunction isDomElement(element) {\n  return element && element.parentElement && element.style;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGFuem9vbS9saWIvZG9tQ29udHJvbGxlci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSx3QkFBd0I7O0FBRXhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcGFuem9vbS9saWIvZG9tQ29udHJvbGxlci5qcz81NWUzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gbWFrZURvbUNvbnRyb2xsZXI7XG5cbm1vZHVsZS5leHBvcnRzLmNhbkF0dGFjaCA9IGlzRG9tRWxlbWVudDtcblxuZnVuY3Rpb24gbWFrZURvbUNvbnRyb2xsZXIoZG9tRWxlbWVudCwgb3B0aW9ucykge1xuICB2YXIgZWxlbWVudFZhbGlkID0gaXNEb21FbGVtZW50KGRvbUVsZW1lbnQpOyBcbiAgaWYgKCFlbGVtZW50VmFsaWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Bhbnpvb20gcmVxdWlyZXMgRE9NIGVsZW1lbnQgdG8gYmUgYXR0YWNoZWQgdG8gdGhlIERPTSB0cmVlJyk7XG4gIH1cblxuICB2YXIgb3duZXIgPSBkb21FbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gIGRvbUVsZW1lbnQuc2Nyb2xsVG9wID0gMDtcbiAgXG4gIGlmICghb3B0aW9ucy5kaXNhYmxlS2V5Ym9hcmRJbnRlcmFjdGlvbikge1xuICAgIG93bmVyLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAwKTtcbiAgfVxuXG4gIHZhciBhcGkgPSB7XG4gICAgZ2V0QkJveDogZ2V0QkJveCxcbiAgICBnZXRPd25lcjogZ2V0T3duZXIsXG4gICAgYXBwbHlUcmFuc2Zvcm06IGFwcGx5VHJhbnNmb3JtLFxuICB9O1xuICBcbiAgcmV0dXJuIGFwaTtcblxuICBmdW5jdGlvbiBnZXRPd25lcigpIHtcbiAgICByZXR1cm4gb3duZXI7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRCQm94KCkge1xuICAgIC8vIFRPRE86IFdlIHNob3VsZCBwcm9iYWJseSBjYWNoZSB0aGlzP1xuICAgIHJldHVybiAge1xuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIHdpZHRoOiBkb21FbGVtZW50LmNsaWVudFdpZHRoLFxuICAgICAgaGVpZ2h0OiBkb21FbGVtZW50LmNsaWVudEhlaWdodFxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBhcHBseVRyYW5zZm9ybSh0cmFuc2Zvcm0pIHtcbiAgICAvLyBUT0RPOiBTaG91bGQgd2UgY2FjaGUgdGhpcz9cbiAgICBkb21FbGVtZW50LnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9ICcwIDAgMCc7XG4gICAgZG9tRWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSAnbWF0cml4KCcgK1xuICAgICAgdHJhbnNmb3JtLnNjYWxlICsgJywgMCwgMCwgJyArXG4gICAgICB0cmFuc2Zvcm0uc2NhbGUgKyAnLCAnICtcbiAgICAgIHRyYW5zZm9ybS54ICsgJywgJyArIHRyYW5zZm9ybS55ICsgJyknO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzRG9tRWxlbWVudChlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50ICYmIGVsZW1lbnQucGFyZW50RWxlbWVudCAmJiBlbGVtZW50LnN0eWxlO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/panzoom/lib/domController.js\n");

/***/ }),

/***/ "./node_modules/panzoom/lib/kinetic.js":
/*!*********************************************!*\
  !*** ./node_modules/panzoom/lib/kinetic.js ***!
  \*********************************************/
/***/ (function(module) {

eval("/**\n * Allows smooth kinetic scrolling of the surface\n */\nmodule.exports = kinetic;\n\nfunction kinetic(getPoint, scroll, settings) {\n  if (typeof settings !== 'object') {\n    // setting could come as boolean, we should ignore it, and use an object.\n    settings = {};\n  }\n\n  var minVelocity = typeof settings.minVelocity === 'number' ? settings.minVelocity : 5;\n  var amplitude = typeof settings.amplitude === 'number' ? settings.amplitude : 0.25;\n  var cancelAnimationFrame = typeof settings.cancelAnimationFrame === 'function' ? settings.cancelAnimationFrame : getCancelAnimationFrame();\n  var requestAnimationFrame = typeof settings.requestAnimationFrame === 'function' ? settings.requestAnimationFrame : getRequestAnimationFrame();\n\n  var lastPoint;\n  var timestamp;\n  var timeConstant = 342;\n\n  var ticker;\n  var vx, targetX, ax;\n  var vy, targetY, ay;\n\n  var raf;\n\n  return {\n    start: start,\n    stop: stop,\n    cancel: dispose\n  };\n\n  function dispose() {\n    cancelAnimationFrame(ticker);\n    cancelAnimationFrame(raf);\n  }\n\n  function start() {\n    lastPoint = getPoint();\n\n    ax = ay = vx = vy = 0;\n    timestamp = new Date();\n\n    cancelAnimationFrame(ticker);\n    cancelAnimationFrame(raf);\n\n    // we start polling the point position to accumulate velocity\n    // Once we stop(), we will use accumulated velocity to keep scrolling\n    // an object.\n    ticker = requestAnimationFrame(track);\n  }\n\n  function track() {\n    var now = Date.now();\n    var elapsed = now - timestamp;\n    timestamp = now;\n\n    var currentPoint = getPoint();\n\n    var dx = currentPoint.x - lastPoint.x;\n    var dy = currentPoint.y - lastPoint.y;\n\n    lastPoint = currentPoint;\n\n    var dt = 1000 / (1 + elapsed);\n\n    // moving average\n    vx = 0.8 * dx * dt + 0.2 * vx;\n    vy = 0.8 * dy * dt + 0.2 * vy;\n\n    ticker = requestAnimationFrame(track);\n  }\n\n  function stop() {\n    cancelAnimationFrame(ticker);\n    cancelAnimationFrame(raf);\n\n    var currentPoint = getPoint();\n\n    targetX = currentPoint.x;\n    targetY = currentPoint.y;\n    timestamp = Date.now();\n\n    if (vx < -minVelocity || vx > minVelocity) {\n      ax = amplitude * vx;\n      targetX += ax;\n    }\n\n    if (vy < -minVelocity || vy > minVelocity) {\n      ay = amplitude * vy;\n      targetY += ay;\n    }\n\n    raf = requestAnimationFrame(autoScroll);\n  }\n\n  function autoScroll() {\n    var elapsed = Date.now() - timestamp;\n\n    var moving = false;\n    var dx = 0;\n    var dy = 0;\n\n    if (ax) {\n      dx = -ax * Math.exp(-elapsed / timeConstant);\n\n      if (dx > 0.5 || dx < -0.5) moving = true;\n      else dx = ax = 0;\n    }\n\n    if (ay) {\n      dy = -ay * Math.exp(-elapsed / timeConstant);\n\n      if (dy > 0.5 || dy < -0.5) moving = true;\n      else dy = ay = 0;\n    }\n\n    if (moving) {\n      scroll(targetX + dx, targetY + dy);\n      raf = requestAnimationFrame(autoScroll);\n    }\n  }\n}\n\nfunction getCancelAnimationFrame() {\n  if (typeof cancelAnimationFrame === 'function') return cancelAnimationFrame;\n  return clearTimeout;\n}\n\nfunction getRequestAnimationFrame() {\n  if (typeof requestAnimationFrame === 'function') return requestAnimationFrame;\n\n  return function (handler) {\n    return setTimeout(handler, 16);\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGFuem9vbS9saWIva2luZXRpYy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9wYW56b29tL2xpYi9raW5ldGljLmpzPzQ3MWQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBbGxvd3Mgc21vb3RoIGtpbmV0aWMgc2Nyb2xsaW5nIG9mIHRoZSBzdXJmYWNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0ga2luZXRpYztcblxuZnVuY3Rpb24ga2luZXRpYyhnZXRQb2ludCwgc2Nyb2xsLCBzZXR0aW5ncykge1xuICBpZiAodHlwZW9mIHNldHRpbmdzICE9PSAnb2JqZWN0Jykge1xuICAgIC8vIHNldHRpbmcgY291bGQgY29tZSBhcyBib29sZWFuLCB3ZSBzaG91bGQgaWdub3JlIGl0LCBhbmQgdXNlIGFuIG9iamVjdC5cbiAgICBzZXR0aW5ncyA9IHt9O1xuICB9XG5cbiAgdmFyIG1pblZlbG9jaXR5ID0gdHlwZW9mIHNldHRpbmdzLm1pblZlbG9jaXR5ID09PSAnbnVtYmVyJyA/IHNldHRpbmdzLm1pblZlbG9jaXR5IDogNTtcbiAgdmFyIGFtcGxpdHVkZSA9IHR5cGVvZiBzZXR0aW5ncy5hbXBsaXR1ZGUgPT09ICdudW1iZXInID8gc2V0dGluZ3MuYW1wbGl0dWRlIDogMC4yNTtcbiAgdmFyIGNhbmNlbEFuaW1hdGlvbkZyYW1lID0gdHlwZW9mIHNldHRpbmdzLmNhbmNlbEFuaW1hdGlvbkZyYW1lID09PSAnZnVuY3Rpb24nID8gc2V0dGluZ3MuY2FuY2VsQW5pbWF0aW9uRnJhbWUgOiBnZXRDYW5jZWxBbmltYXRpb25GcmFtZSgpO1xuICB2YXIgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gdHlwZW9mIHNldHRpbmdzLnJlcXVlc3RBbmltYXRpb25GcmFtZSA9PT0gJ2Z1bmN0aW9uJyA/IHNldHRpbmdzLnJlcXVlc3RBbmltYXRpb25GcmFtZSA6IGdldFJlcXVlc3RBbmltYXRpb25GcmFtZSgpO1xuXG4gIHZhciBsYXN0UG9pbnQ7XG4gIHZhciB0aW1lc3RhbXA7XG4gIHZhciB0aW1lQ29uc3RhbnQgPSAzNDI7XG5cbiAgdmFyIHRpY2tlcjtcbiAgdmFyIHZ4LCB0YXJnZXRYLCBheDtcbiAgdmFyIHZ5LCB0YXJnZXRZLCBheTtcblxuICB2YXIgcmFmO1xuXG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IHN0YXJ0LFxuICAgIHN0b3A6IHN0b3AsXG4gICAgY2FuY2VsOiBkaXNwb3NlXG4gIH07XG5cbiAgZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aWNrZXIpO1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHJhZik7XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICBsYXN0UG9pbnQgPSBnZXRQb2ludCgpO1xuXG4gICAgYXggPSBheSA9IHZ4ID0gdnkgPSAwO1xuICAgIHRpbWVzdGFtcCA9IG5ldyBEYXRlKCk7XG5cbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aWNrZXIpO1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHJhZik7XG5cbiAgICAvLyB3ZSBzdGFydCBwb2xsaW5nIHRoZSBwb2ludCBwb3NpdGlvbiB0byBhY2N1bXVsYXRlIHZlbG9jaXR5XG4gICAgLy8gT25jZSB3ZSBzdG9wKCksIHdlIHdpbGwgdXNlIGFjY3VtdWxhdGVkIHZlbG9jaXR5IHRvIGtlZXAgc2Nyb2xsaW5nXG4gICAgLy8gYW4gb2JqZWN0LlxuICAgIHRpY2tlciA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0cmFjayk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFjaygpIHtcbiAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICB2YXIgZWxhcHNlZCA9IG5vdyAtIHRpbWVzdGFtcDtcbiAgICB0aW1lc3RhbXAgPSBub3c7XG5cbiAgICB2YXIgY3VycmVudFBvaW50ID0gZ2V0UG9pbnQoKTtcblxuICAgIHZhciBkeCA9IGN1cnJlbnRQb2ludC54IC0gbGFzdFBvaW50Lng7XG4gICAgdmFyIGR5ID0gY3VycmVudFBvaW50LnkgLSBsYXN0UG9pbnQueTtcblxuICAgIGxhc3RQb2ludCA9IGN1cnJlbnRQb2ludDtcblxuICAgIHZhciBkdCA9IDEwMDAgLyAoMSArIGVsYXBzZWQpO1xuXG4gICAgLy8gbW92aW5nIGF2ZXJhZ2VcbiAgICB2eCA9IDAuOCAqIGR4ICogZHQgKyAwLjIgKiB2eDtcbiAgICB2eSA9IDAuOCAqIGR5ICogZHQgKyAwLjIgKiB2eTtcblxuICAgIHRpY2tlciA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0cmFjayk7XG4gIH1cblxuICBmdW5jdGlvbiBzdG9wKCkge1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRpY2tlcik7XG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUocmFmKTtcblxuICAgIHZhciBjdXJyZW50UG9pbnQgPSBnZXRQb2ludCgpO1xuXG4gICAgdGFyZ2V0WCA9IGN1cnJlbnRQb2ludC54O1xuICAgIHRhcmdldFkgPSBjdXJyZW50UG9pbnQueTtcbiAgICB0aW1lc3RhbXAgPSBEYXRlLm5vdygpO1xuXG4gICAgaWYgKHZ4IDwgLW1pblZlbG9jaXR5IHx8IHZ4ID4gbWluVmVsb2NpdHkpIHtcbiAgICAgIGF4ID0gYW1wbGl0dWRlICogdng7XG4gICAgICB0YXJnZXRYICs9IGF4O1xuICAgIH1cblxuICAgIGlmICh2eSA8IC1taW5WZWxvY2l0eSB8fCB2eSA+IG1pblZlbG9jaXR5KSB7XG4gICAgICBheSA9IGFtcGxpdHVkZSAqIHZ5O1xuICAgICAgdGFyZ2V0WSArPSBheTtcbiAgICB9XG5cbiAgICByYWYgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYXV0b1Njcm9sbCk7XG4gIH1cblxuICBmdW5jdGlvbiBhdXRvU2Nyb2xsKCkge1xuICAgIHZhciBlbGFwc2VkID0gRGF0ZS5ub3coKSAtIHRpbWVzdGFtcDtcblxuICAgIHZhciBtb3ZpbmcgPSBmYWxzZTtcbiAgICB2YXIgZHggPSAwO1xuICAgIHZhciBkeSA9IDA7XG5cbiAgICBpZiAoYXgpIHtcbiAgICAgIGR4ID0gLWF4ICogTWF0aC5leHAoLWVsYXBzZWQgLyB0aW1lQ29uc3RhbnQpO1xuXG4gICAgICBpZiAoZHggPiAwLjUgfHwgZHggPCAtMC41KSBtb3ZpbmcgPSB0cnVlO1xuICAgICAgZWxzZSBkeCA9IGF4ID0gMDtcbiAgICB9XG5cbiAgICBpZiAoYXkpIHtcbiAgICAgIGR5ID0gLWF5ICogTWF0aC5leHAoLWVsYXBzZWQgLyB0aW1lQ29uc3RhbnQpO1xuXG4gICAgICBpZiAoZHkgPiAwLjUgfHwgZHkgPCAtMC41KSBtb3ZpbmcgPSB0cnVlO1xuICAgICAgZWxzZSBkeSA9IGF5ID0gMDtcbiAgICB9XG5cbiAgICBpZiAobW92aW5nKSB7XG4gICAgICBzY3JvbGwodGFyZ2V0WCArIGR4LCB0YXJnZXRZICsgZHkpO1xuICAgICAgcmFmID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGF1dG9TY3JvbGwpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRDYW5jZWxBbmltYXRpb25GcmFtZSgpIHtcbiAgaWYgKHR5cGVvZiBjYW5jZWxBbmltYXRpb25GcmFtZSA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGNhbmNlbEFuaW1hdGlvbkZyYW1lO1xuICByZXR1cm4gY2xlYXJUaW1lb3V0O1xufVxuXG5mdW5jdGlvbiBnZXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKSB7XG4gIGlmICh0eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID09PSAnZnVuY3Rpb24nKSByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgIHJldHVybiBzZXRUaW1lb3V0KGhhbmRsZXIsIDE2KTtcbiAgfTtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/panzoom/lib/kinetic.js\n");

/***/ }),

/***/ "./node_modules/panzoom/lib/svgController.js":
/*!***************************************************!*\
  !*** ./node_modules/panzoom/lib/svgController.js ***!
  \***************************************************/
/***/ (function(module) {

eval("module.exports = makeSvgController;\nmodule.exports.canAttach = isSVGElement;\n\nfunction makeSvgController(svgElement, options) {\n  if (!isSVGElement(svgElement)) {\n    throw new Error('svg element is required for svg.panzoom to work');\n  }\n\n  var owner = svgElement.ownerSVGElement;\n  if (!owner) {\n    throw new Error(\n      'Do not apply panzoom to the root <svg> element. ' +\n      'Use its child instead (e.g. <g></g>). ' +\n      'As of March 2016 only FireFox supported transform on the root element');\n  }\n\n  if (!options.disableKeyboardInteraction) {\n    owner.setAttribute('tabindex', 0);\n  }\n\n  var api = {\n    getBBox: getBBox,\n    getScreenCTM: getScreenCTM,\n    getOwner: getOwner,\n    applyTransform: applyTransform,\n    initTransform: initTransform\n  };\n  \n  return api;\n\n  function getOwner() {\n    return owner;\n  }\n\n  function getBBox() {\n    var bbox =  svgElement.getBBox();\n    return {\n      left: bbox.x,\n      top: bbox.y,\n      width: bbox.width,\n      height: bbox.height,\n    };\n  }\n\n  function getScreenCTM() {\n    var ctm = owner.getCTM();\n    if (!ctm) {\n      // This is likely firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=873106\n      // The code below is not entirely correct, but still better than nothing\n      return owner.getScreenCTM();\n    }\n    return ctm;\n  }\n\n  function initTransform(transform) {\n    var screenCTM = svgElement.getCTM();\n\n    // The above line returns null on Firefox\n    if (screenCTM === null) {\n      screenCTM = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n    }\n\n    transform.x = screenCTM.e;\n    transform.y = screenCTM.f;\n    transform.scale = screenCTM.a;\n    owner.removeAttributeNS(null, 'viewBox');\n  }\n\n  function applyTransform(transform) {\n    svgElement.setAttribute('transform', 'matrix(' +\n      transform.scale + ' 0 0 ' +\n      transform.scale + ' ' +\n      transform.x + ' ' + transform.y + ')');\n  }\n}\n\nfunction isSVGElement(element) {\n  return element && element.ownerSVGElement && element.getCTM;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGFuem9vbS9saWIvc3ZnQ29udHJvbGxlci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLHdCQUF3Qjs7QUFFeEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9wYW56b29tL2xpYi9zdmdDb250cm9sbGVyLmpzPzIyMzkiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBtYWtlU3ZnQ29udHJvbGxlcjtcbm1vZHVsZS5leHBvcnRzLmNhbkF0dGFjaCA9IGlzU1ZHRWxlbWVudDtcblxuZnVuY3Rpb24gbWFrZVN2Z0NvbnRyb2xsZXIoc3ZnRWxlbWVudCwgb3B0aW9ucykge1xuICBpZiAoIWlzU1ZHRWxlbWVudChzdmdFbGVtZW50KSkge1xuICAgIHRocm93IG5ldyBFcnJvcignc3ZnIGVsZW1lbnQgaXMgcmVxdWlyZWQgZm9yIHN2Zy5wYW56b29tIHRvIHdvcmsnKTtcbiAgfVxuXG4gIHZhciBvd25lciA9IHN2Z0VsZW1lbnQub3duZXJTVkdFbGVtZW50O1xuICBpZiAoIW93bmVyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0RvIG5vdCBhcHBseSBwYW56b29tIHRvIHRoZSByb290IDxzdmc+IGVsZW1lbnQuICcgK1xuICAgICAgJ1VzZSBpdHMgY2hpbGQgaW5zdGVhZCAoZS5nLiA8Zz48L2c+KS4gJyArXG4gICAgICAnQXMgb2YgTWFyY2ggMjAxNiBvbmx5IEZpcmVGb3ggc3VwcG9ydGVkIHRyYW5zZm9ybSBvbiB0aGUgcm9vdCBlbGVtZW50Jyk7XG4gIH1cblxuICBpZiAoIW9wdGlvbnMuZGlzYWJsZUtleWJvYXJkSW50ZXJhY3Rpb24pIHtcbiAgICBvd25lci5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgMCk7XG4gIH1cblxuICB2YXIgYXBpID0ge1xuICAgIGdldEJCb3g6IGdldEJCb3gsXG4gICAgZ2V0U2NyZWVuQ1RNOiBnZXRTY3JlZW5DVE0sXG4gICAgZ2V0T3duZXI6IGdldE93bmVyLFxuICAgIGFwcGx5VHJhbnNmb3JtOiBhcHBseVRyYW5zZm9ybSxcbiAgICBpbml0VHJhbnNmb3JtOiBpbml0VHJhbnNmb3JtXG4gIH07XG4gIFxuICByZXR1cm4gYXBpO1xuXG4gIGZ1bmN0aW9uIGdldE93bmVyKCkge1xuICAgIHJldHVybiBvd25lcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEJCb3goKSB7XG4gICAgdmFyIGJib3ggPSAgc3ZnRWxlbWVudC5nZXRCQm94KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQ6IGJib3gueCxcbiAgICAgIHRvcDogYmJveC55LFxuICAgICAgd2lkdGg6IGJib3gud2lkdGgsXG4gICAgICBoZWlnaHQ6IGJib3guaGVpZ2h0LFxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBnZXRTY3JlZW5DVE0oKSB7XG4gICAgdmFyIGN0bSA9IG93bmVyLmdldENUTSgpO1xuICAgIGlmICghY3RtKSB7XG4gICAgICAvLyBUaGlzIGlzIGxpa2VseSBmaXJlZm94OiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD04NzMxMDZcbiAgICAgIC8vIFRoZSBjb2RlIGJlbG93IGlzIG5vdCBlbnRpcmVseSBjb3JyZWN0LCBidXQgc3RpbGwgYmV0dGVyIHRoYW4gbm90aGluZ1xuICAgICAgcmV0dXJuIG93bmVyLmdldFNjcmVlbkNUTSgpO1xuICAgIH1cbiAgICByZXR1cm4gY3RtO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdFRyYW5zZm9ybSh0cmFuc2Zvcm0pIHtcbiAgICB2YXIgc2NyZWVuQ1RNID0gc3ZnRWxlbWVudC5nZXRDVE0oKTtcblxuICAgIC8vIFRoZSBhYm92ZSBsaW5lIHJldHVybnMgbnVsbCBvbiBGaXJlZm94XG4gICAgaWYgKHNjcmVlbkNUTSA9PT0gbnVsbCkge1xuICAgICAgc2NyZWVuQ1RNID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJzdmdcIikuY3JlYXRlU1ZHTWF0cml4KCk7XG4gICAgfVxuXG4gICAgdHJhbnNmb3JtLnggPSBzY3JlZW5DVE0uZTtcbiAgICB0cmFuc2Zvcm0ueSA9IHNjcmVlbkNUTS5mO1xuICAgIHRyYW5zZm9ybS5zY2FsZSA9IHNjcmVlbkNUTS5hO1xuICAgIG93bmVyLnJlbW92ZUF0dHJpYnV0ZU5TKG51bGwsICd2aWV3Qm94Jyk7XG4gIH1cblxuICBmdW5jdGlvbiBhcHBseVRyYW5zZm9ybSh0cmFuc2Zvcm0pIHtcbiAgICBzdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgJ21hdHJpeCgnICtcbiAgICAgIHRyYW5zZm9ybS5zY2FsZSArICcgMCAwICcgK1xuICAgICAgdHJhbnNmb3JtLnNjYWxlICsgJyAnICtcbiAgICAgIHRyYW5zZm9ybS54ICsgJyAnICsgdHJhbnNmb3JtLnkgKyAnKScpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzU1ZHRWxlbWVudChlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50ICYmIGVsZW1lbnQub3duZXJTVkdFbGVtZW50ICYmIGVsZW1lbnQuZ2V0Q1RNO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/panzoom/lib/svgController.js\n");

/***/ }),

/***/ "./node_modules/panzoom/lib/transform.js":
/*!***********************************************!*\
  !*** ./node_modules/panzoom/lib/transform.js ***!
  \***********************************************/
/***/ (function(module) {

eval("module.exports = Transform;\n\nfunction Transform() {\n  this.x = 0;\n  this.y = 0;\n  this.scale = 1;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGFuem9vbS9saWIvdHJhbnNmb3JtLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3Bhbnpvb20vbGliL3RyYW5zZm9ybS5qcz8xNTkzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gVHJhbnNmb3JtO1xuXG5mdW5jdGlvbiBUcmFuc2Zvcm0oKSB7XG4gIHRoaXMueCA9IDA7XG4gIHRoaXMueSA9IDA7XG4gIHRoaXMuc2NhbGUgPSAxO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/panzoom/lib/transform.js\n");

/***/ }),

/***/ "./node_modules/react-from-dom/esm/helpers.js":
/*!****************************************************!*\
  !*** ./node_modules/react-from-dom/esm/helpers.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"styleToObject\": function() { return /* binding */ styleToObject; },\n/* harmony export */   \"randomString\": function() { return /* binding */ randomString; },\n/* harmony export */   \"noTextChildNodes\": function() { return /* binding */ noTextChildNodes; },\n/* harmony export */   \"possibleStandardNames\": function() { return /* binding */ possibleStandardNames; }\n/* harmony export */ });\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar styleToObject = function (input) {\n    var attributes = input.split(/ ?; ?/);\n    return attributes.reduce(function (acc, d) {\n        var _a = __read(d.split(/ ?: ?/), 2), key = _a[0], value = _a[1];\n        if (key && value) {\n            acc[key.replace(/-(\\w)/g, function (_$0, $1) { return $1.toUpperCase(); })] = Number.isNaN(Number(value))\n                ? value\n                : Number(value);\n        }\n        return acc;\n    }, {});\n};\n/* istanbul ignore next */\nfunction randomString(length) {\n    if (length === void 0) { length = 6; }\n    var characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    var result = '';\n    for (var i = length; i > 0; --i) {\n        result += characters[Math.round(Math.random() * (characters.length - 1))];\n    }\n    return result;\n}\nvar noTextChildNodes = [\n    'br',\n    'col',\n    'colgroup',\n    'dl',\n    'hr',\n    'iframe',\n    'img',\n    'input',\n    'link',\n    'menuitem',\n    'meta',\n    'ol',\n    'param',\n    'select',\n    'table',\n    'tbody',\n    'tfoot',\n    'thead',\n    'tr',\n    'ul',\n    'wbr',\n];\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// Taken from https://raw.githubusercontent.com/facebook/react/baff5cc2f69d30589a5dc65b089e47765437294b/packages/react-dom/src/shared/possibleStandardNames.js\n// tslint:disable:object-literal-sort-keys\nvar possibleStandardNames = {\n    // HTML\n    'accept-charset': 'acceptCharset',\n    acceptcharset: 'acceptCharset',\n    accesskey: 'accessKey',\n    allowfullscreen: 'allowFullScreen',\n    autocapitalize: 'autoCapitalize',\n    autocomplete: 'autoComplete',\n    autocorrect: 'autoCorrect',\n    autofocus: 'autoFocus',\n    autoplay: 'autoPlay',\n    autosave: 'autoSave',\n    cellpadding: 'cellPadding',\n    cellspacing: 'cellSpacing',\n    charset: 'charSet',\n    class: 'className',\n    classid: 'classID',\n    classname: 'className',\n    colspan: 'colSpan',\n    contenteditable: 'contentEditable',\n    contextmenu: 'contextMenu',\n    controlslist: 'controlsList',\n    crossorigin: 'crossOrigin',\n    dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',\n    datetime: 'dateTime',\n    defaultchecked: 'defaultChecked',\n    defaultvalue: 'defaultValue',\n    enctype: 'encType',\n    for: 'htmlFor',\n    formmethod: 'formMethod',\n    formaction: 'formAction',\n    formenctype: 'formEncType',\n    formnovalidate: 'formNoValidate',\n    formtarget: 'formTarget',\n    frameborder: 'frameBorder',\n    hreflang: 'hrefLang',\n    htmlfor: 'htmlFor',\n    httpequiv: 'httpEquiv',\n    'http-equiv': 'httpEquiv',\n    icon: 'icon',\n    innerhtml: 'innerHTML',\n    inputmode: 'inputMode',\n    itemid: 'itemID',\n    itemprop: 'itemProp',\n    itemref: 'itemRef',\n    itemscope: 'itemScope',\n    itemtype: 'itemType',\n    keyparams: 'keyParams',\n    keytype: 'keyType',\n    marginwidth: 'marginWidth',\n    marginheight: 'marginHeight',\n    maxlength: 'maxLength',\n    mediagroup: 'mediaGroup',\n    minlength: 'minLength',\n    nomodule: 'noModule',\n    novalidate: 'noValidate',\n    playsinline: 'playsInline',\n    radiogroup: 'radioGroup',\n    readonly: 'readOnly',\n    referrerpolicy: 'referrerPolicy',\n    rowspan: 'rowSpan',\n    spellcheck: 'spellCheck',\n    srcdoc: 'srcDoc',\n    srclang: 'srcLang',\n    srcset: 'srcSet',\n    tabindex: 'tabIndex',\n    typemustmatch: 'typeMustMatch',\n    usemap: 'useMap',\n    // SVG\n    accentheight: 'accentHeight',\n    'accent-height': 'accentHeight',\n    alignmentbaseline: 'alignmentBaseline',\n    'alignment-baseline': 'alignmentBaseline',\n    allowreorder: 'allowReorder',\n    arabicform: 'arabicForm',\n    'arabic-form': 'arabicForm',\n    attributename: 'attributeName',\n    attributetype: 'attributeType',\n    autoreverse: 'autoReverse',\n    basefrequency: 'baseFrequency',\n    baselineshift: 'baselineShift',\n    'baseline-shift': 'baselineShift',\n    baseprofile: 'baseProfile',\n    calcmode: 'calcMode',\n    capheight: 'capHeight',\n    'cap-height': 'capHeight',\n    clippath: 'clipPath',\n    'clip-path': 'clipPath',\n    clippathunits: 'clipPathUnits',\n    cliprule: 'clipRule',\n    'clip-rule': 'clipRule',\n    colorinterpolation: 'colorInterpolation',\n    'color-interpolation': 'colorInterpolation',\n    colorinterpolationfilters: 'colorInterpolationFilters',\n    'color-interpolation-filters': 'colorInterpolationFilters',\n    colorprofile: 'colorProfile',\n    'color-profile': 'colorProfile',\n    colorrendering: 'colorRendering',\n    'color-rendering': 'colorRendering',\n    contentscripttype: 'contentScriptType',\n    contentstyletype: 'contentStyleType',\n    diffuseconstant: 'diffuseConstant',\n    dominantbaseline: 'dominantBaseline',\n    'dominant-baseline': 'dominantBaseline',\n    edgemode: 'edgeMode',\n    enablebackground: 'enableBackground',\n    'enable-background': 'enableBackground',\n    externalresourcesrequired: 'externalResourcesRequired',\n    fillopacity: 'fillOpacity',\n    'fill-opacity': 'fillOpacity',\n    fillrule: 'fillRule',\n    'fill-rule': 'fillRule',\n    filterres: 'filterRes',\n    filterunits: 'filterUnits',\n    floodopacity: 'floodOpacity',\n    'flood-opacity': 'floodOpacity',\n    floodcolor: 'floodColor',\n    'flood-color': 'floodColor',\n    fontfamily: 'fontFamily',\n    'font-family': 'fontFamily',\n    fontsize: 'fontSize',\n    'font-size': 'fontSize',\n    fontsizeadjust: 'fontSizeAdjust',\n    'font-size-adjust': 'fontSizeAdjust',\n    fontstretch: 'fontStretch',\n    'font-stretch': 'fontStretch',\n    fontstyle: 'fontStyle',\n    'font-style': 'fontStyle',\n    fontvariant: 'fontVariant',\n    'font-variant': 'fontVariant',\n    fontweight: 'fontWeight',\n    'font-weight': 'fontWeight',\n    glyphname: 'glyphName',\n    'glyph-name': 'glyphName',\n    glyphorientationhorizontal: 'glyphOrientationHorizontal',\n    'glyph-orientation-horizontal': 'glyphOrientationHorizontal',\n    glyphorientationvertical: 'glyphOrientationVertical',\n    'glyph-orientation-vertical': 'glyphOrientationVertical',\n    glyphref: 'glyphRef',\n    gradienttransform: 'gradientTransform',\n    gradientunits: 'gradientUnits',\n    horizadvx: 'horizAdvX',\n    'horiz-adv-x': 'horizAdvX',\n    horizoriginx: 'horizOriginX',\n    'horiz-origin-x': 'horizOriginX',\n    imagerendering: 'imageRendering',\n    'image-rendering': 'imageRendering',\n    kernelmatrix: 'kernelMatrix',\n    kernelunitlength: 'kernelUnitLength',\n    keypoints: 'keyPoints',\n    keysplines: 'keySplines',\n    keytimes: 'keyTimes',\n    lengthadjust: 'lengthAdjust',\n    letterspacing: 'letterSpacing',\n    'letter-spacing': 'letterSpacing',\n    lightingcolor: 'lightingColor',\n    'lighting-color': 'lightingColor',\n    limitingconeangle: 'limitingConeAngle',\n    markerend: 'markerEnd',\n    'marker-end': 'markerEnd',\n    markerheight: 'markerHeight',\n    markermid: 'markerMid',\n    'marker-mid': 'markerMid',\n    markerstart: 'markerStart',\n    'marker-start': 'markerStart',\n    markerunits: 'markerUnits',\n    markerwidth: 'markerWidth',\n    maskcontentunits: 'maskContentUnits',\n    maskunits: 'maskUnits',\n    numoctaves: 'numOctaves',\n    overlineposition: 'overlinePosition',\n    'overline-position': 'overlinePosition',\n    overlinethickness: 'overlineThickness',\n    'overline-thickness': 'overlineThickness',\n    paintorder: 'paintOrder',\n    'paint-order': 'paintOrder',\n    'panose-1': 'panose1',\n    pathlength: 'pathLength',\n    patterncontentunits: 'patternContentUnits',\n    patterntransform: 'patternTransform',\n    patternunits: 'patternUnits',\n    pointerevents: 'pointerEvents',\n    'pointer-events': 'pointerEvents',\n    pointsatx: 'pointsAtX',\n    pointsaty: 'pointsAtY',\n    pointsatz: 'pointsAtZ',\n    preservealpha: 'preserveAlpha',\n    preserveaspectratio: 'preserveAspectRatio',\n    primitiveunits: 'primitiveUnits',\n    refx: 'refX',\n    refy: 'refY',\n    renderingintent: 'renderingIntent',\n    'rendering-intent': 'renderingIntent',\n    repeatcount: 'repeatCount',\n    repeatdur: 'repeatDur',\n    requiredextensions: 'requiredExtensions',\n    requiredfeatures: 'requiredFeatures',\n    shaperendering: 'shapeRendering',\n    'shape-rendering': 'shapeRendering',\n    specularconstant: 'specularConstant',\n    specularexponent: 'specularExponent',\n    spreadmethod: 'spreadMethod',\n    startoffset: 'startOffset',\n    stddeviation: 'stdDeviation',\n    stitchtiles: 'stitchTiles',\n    stopcolor: 'stopColor',\n    'stop-color': 'stopColor',\n    stopopacity: 'stopOpacity',\n    'stop-opacity': 'stopOpacity',\n    strikethroughposition: 'strikethroughPosition',\n    'strikethrough-position': 'strikethroughPosition',\n    strikethroughthickness: 'strikethroughThickness',\n    'strikethrough-thickness': 'strikethroughThickness',\n    strokedasharray: 'strokeDasharray',\n    'stroke-dasharray': 'strokeDasharray',\n    strokedashoffset: 'strokeDashoffset',\n    'stroke-dashoffset': 'strokeDashoffset',\n    strokelinecap: 'strokeLinecap',\n    'stroke-linecap': 'strokeLinecap',\n    strokelinejoin: 'strokeLinejoin',\n    'stroke-linejoin': 'strokeLinejoin',\n    strokemiterlimit: 'strokeMiterlimit',\n    'stroke-miterlimit': 'strokeMiterlimit',\n    strokewidth: 'strokeWidth',\n    'stroke-width': 'strokeWidth',\n    strokeopacity: 'strokeOpacity',\n    'stroke-opacity': 'strokeOpacity',\n    suppresscontenteditablewarning: 'suppressContentEditableWarning',\n    suppresshydrationwarning: 'suppressHydrationWarning',\n    surfacescale: 'surfaceScale',\n    systemlanguage: 'systemLanguage',\n    tablevalues: 'tableValues',\n    targetx: 'targetX',\n    targety: 'targetY',\n    textanchor: 'textAnchor',\n    'text-anchor': 'textAnchor',\n    textdecoration: 'textDecoration',\n    'text-decoration': 'textDecoration',\n    textlength: 'textLength',\n    textrendering: 'textRendering',\n    'text-rendering': 'textRendering',\n    underlineposition: 'underlinePosition',\n    'underline-position': 'underlinePosition',\n    underlinethickness: 'underlineThickness',\n    'underline-thickness': 'underlineThickness',\n    unicodebidi: 'unicodeBidi',\n    'unicode-bidi': 'unicodeBidi',\n    unicoderange: 'unicodeRange',\n    'unicode-range': 'unicodeRange',\n    unitsperem: 'unitsPerEm',\n    'units-per-em': 'unitsPerEm',\n    unselectable: 'unselectable',\n    valphabetic: 'vAlphabetic',\n    'v-alphabetic': 'vAlphabetic',\n    vectoreffect: 'vectorEffect',\n    'vector-effect': 'vectorEffect',\n    vertadvy: 'vertAdvY',\n    'vert-adv-y': 'vertAdvY',\n    vertoriginx: 'vertOriginX',\n    'vert-origin-x': 'vertOriginX',\n    vertoriginy: 'vertOriginY',\n    'vert-origin-y': 'vertOriginY',\n    vhanging: 'vHanging',\n    'v-hanging': 'vHanging',\n    videographic: 'vIdeographic',\n    'v-ideographic': 'vIdeographic',\n    viewbox: 'viewBox',\n    viewtarget: 'viewTarget',\n    vmathematical: 'vMathematical',\n    'v-mathematical': 'vMathematical',\n    wordspacing: 'wordSpacing',\n    'word-spacing': 'wordSpacing',\n    writingmode: 'writingMode',\n    'writing-mode': 'writingMode',\n    xchannelselector: 'xChannelSelector',\n    xheight: 'xHeight',\n    'x-height': 'xHeight',\n    xlinkactuate: 'xlinkActuate',\n    'xlink:actuate': 'xlinkActuate',\n    xlinkarcrole: 'xlinkArcrole',\n    'xlink:arcrole': 'xlinkArcrole',\n    xlinkhref: 'xlinkHref',\n    'xlink:href': 'xlinkHref',\n    xlinkrole: 'xlinkRole',\n    'xlink:role': 'xlinkRole',\n    xlinkshow: 'xlinkShow',\n    'xlink:show': 'xlinkShow',\n    xlinktitle: 'xlinkTitle',\n    'xlink:title': 'xlinkTitle',\n    xlinktype: 'xlinkType',\n    'xlink:type': 'xlinkType',\n    xmlbase: 'xmlBase',\n    'xml:base': 'xmlBase',\n    xmllang: 'xmlLang',\n    'xml:lang': 'xmlLang',\n    'xml:space': 'xmlSpace',\n    xmlnsxlink: 'xmlnsXlink',\n    'xmlns:xlink': 'xmlnsXlink',\n    xmlspace: 'xmlSpace',\n    ychannelselector: 'yChannelSelector',\n    zoomandpan: 'zoomAndPan',\n    // event handlers\n    onblur: 'onBlur',\n    onchange: 'onChange',\n    onclick: 'onClick',\n    oncontextmenu: 'onContextMenu',\n    ondoubleclick: 'onDoubleClick',\n    ondrag: 'onDrag',\n    ondragend: 'onDragEnd',\n    ondragenter: 'onDragEnter',\n    ondragexit: 'onDragExit',\n    ondragleave: 'onDragLeave',\n    ondragover: 'onDragOver',\n    ondragstart: 'onDragStart',\n    ondrop: 'onDrop',\n    onerror: 'onError',\n    onfocus: 'onFocus',\n    oninput: 'onInput',\n    oninvalid: 'onInvalid',\n    onkeydown: 'onKeyDown',\n    onkeypress: 'onKeyPress',\n    onkeyup: 'onKeyUp',\n    onload: 'onLoad',\n    onmousedown: 'onMouseDown',\n    onmouseenter: 'onMouseEnter',\n    onmouseleave: 'onMouseLeave',\n    onmousemove: 'onMouseMove',\n    onmouseout: 'onMouseOut',\n    onmouseover: 'onMouseOver',\n    onmouseup: 'onMouseUp',\n    onscroll: 'onScroll',\n    onsubmit: 'onSubmit',\n    ontouchcancel: 'onTouchCancel',\n    ontouchend: 'onTouchEnd',\n    ontouchmove: 'onTouchMove',\n    ontouchstart: 'onTouchStart',\n    onwheel: 'onWheel',\n};\n//# sourceMappingURL=helpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-from-dom/esm/helpers.js\n");

/***/ }),

/***/ "./node_modules/react-from-dom/esm/index.js":
/*!**************************************************!*\
  !*** ./node_modules/react-from-dom/esm/index.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"convertFromNode\": function() { return /* binding */ convertFromNode; },\n/* harmony export */   \"convertFromString\": function() { return /* binding */ convertFromString; },\n/* harmony export */   \"default\": function() { return /* binding */ convert; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers */ \"./node_modules/react-from-dom/esm/helpers.js\");\nvar __assign = (undefined && undefined.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\n\nfunction parseAttributes(node, reactKey) {\n    var attributes = {\n        key: reactKey,\n    };\n    /* istanbul ignore else */\n    if (node instanceof Element) {\n        var nodeClassNames = node.getAttribute('class');\n        if (nodeClassNames) {\n            attributes.className = nodeClassNames;\n        }\n        __spreadArray([], __read(node.attributes)).forEach(function (d) {\n            switch (d.name) {\n                // this is manually handled above, so break;\n                case 'class':\n                    break;\n                case 'style':\n                    attributes[d.name] = (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.styleToObject)(d.value);\n                    break;\n                case 'allowfullscreen':\n                case 'allowpaymentrequest':\n                case 'async':\n                case 'autofocus':\n                case 'autoplay':\n                case 'checked':\n                case 'controls':\n                case 'default':\n                case 'defer':\n                case 'disabled':\n                case 'formnovalidate':\n                case 'hidden':\n                case 'ismap':\n                case 'itemscope':\n                case 'loop':\n                case 'multiple':\n                case 'muted':\n                case 'nomodule':\n                case 'novalidate':\n                case 'open':\n                case 'readonly':\n                case 'required':\n                case 'reversed':\n                case 'selected':\n                case 'typemustmatch':\n                    attributes[_helpers__WEBPACK_IMPORTED_MODULE_1__.possibleStandardNames[d.name] || d.name] = true;\n                    break;\n                default:\n                    attributes[_helpers__WEBPACK_IMPORTED_MODULE_1__.possibleStandardNames[d.name] || d.name] = d.value;\n            }\n        });\n    }\n    return attributes;\n}\nfunction parseChildren(childNodeList, level, options) {\n    var children = __spreadArray([], __read(childNodeList)).map(function (node, index) {\n        return convertFromNode(node, __assign(__assign({}, options), { index: index, level: level + 1 }));\n    })\n        .filter(Boolean);\n    if (!children.length) {\n        return null;\n    }\n    return children;\n}\nfunction parseName(nodeName) {\n    if (/[a-z]+[A-Z]+[a-z]+/.test(nodeName)) {\n        return nodeName;\n    }\n    return nodeName.toLowerCase();\n}\nfunction convertFromNode(input, options) {\n    var _a;\n    if (options === void 0) { options = {}; }\n    if (!input || !(input instanceof Node)) {\n        return null;\n    }\n    var _b = options.actions, actions = _b === void 0 ? [] : _b, _c = options.index, index = _c === void 0 ? 0 : _c, _d = options.level, level = _d === void 0 ? 0 : _d, randomKey = options.randomKey;\n    var node = input;\n    var key = level + \"-\" + index;\n    var result = [];\n    if (randomKey && level === 0) {\n        key = (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.randomString)() + \"-\" + key;\n    }\n    /* istanbul ignore else */\n    if (Array.isArray(actions)) {\n        actions.forEach(function (action) {\n            if (action.condition(node, key, level)) {\n                if (typeof action.pre === 'function') {\n                    node = action.pre(node, key, level);\n                    if (!(node instanceof Node)) {\n                        node = input;\n                        /* istanbul ignore else */\n                        if (true) {\n                            // eslint-disable-next-line no-console\n                            console.warn('The `pre` method always must return a valid DomNode (instanceof Node) - your modification will be ignored (Hint: if you want to render a React-component, use the `post` method instead)');\n                        }\n                    }\n                }\n                if (typeof action.post === 'function') {\n                    result.push(action.post(node, key, level));\n                }\n            }\n        });\n    }\n    if (result.length) {\n        return result;\n    }\n    switch (node.nodeType) {\n        case 1: {\n            // regular dom-node\n            return react__WEBPACK_IMPORTED_MODULE_0__.createElement(parseName(node.nodeName), parseAttributes(node, key), parseChildren(node.childNodes, level, options));\n        }\n        case 3: {\n            // textnode\n            var nodeText = ((_a = node.nodeValue) === null || _a === void 0 ? void 0 : _a.toString()) || '';\n            /* istanbul ignore else */\n            if (/^\\s+$/.test(nodeText) && !/[\\u202F\\u00A0]/.test(nodeText)) {\n                return null;\n            }\n            /* istanbul ignore next */\n            if (!node.parentNode) {\n                return nodeText;\n            }\n            var parentNodeName = node.parentNode.nodeName.toLowerCase();\n            if (_helpers__WEBPACK_IMPORTED_MODULE_1__.noTextChildNodes.indexOf(parentNodeName) !== -1) {\n                /* istanbul ignore else */\n                if (/\\S/.test(nodeText)) {\n                    // eslint-disable-next-line no-console\n                    console.warn(\"A textNode is not allowed inside '\" + parentNodeName + \"'. Your text \\\"\" + nodeText + \"\\\" will be ignored\");\n                }\n                return null;\n            }\n            return nodeText;\n        }\n        case 8: {\n            // html-comment\n            return null;\n        }\n        /* istanbul ignore next */\n        default: {\n            return null;\n        }\n    }\n}\nfunction convertFromString(input, options) {\n    if (options === void 0) { options = {}; }\n    if (!input || typeof input !== 'string') {\n        return null;\n    }\n    var _a = options.nodeOnly, nodeOnly = _a === void 0 ? false : _a, _b = options.selector, selector = _b === void 0 ? 'body > *' : _b, _c = options.type, type = _c === void 0 ? 'text/html' : _c;\n    try {\n        var parser = new DOMParser();\n        var doc = parser.parseFromString(input, type);\n        var node = doc.querySelector(selector);\n        if (!(node instanceof Node)) {\n            throw new Error('Error parsing input');\n        }\n        if (nodeOnly) {\n            return node;\n        }\n        return convertFromNode(node, options);\n    }\n    catch (error) {\n        /* istanbul ignore else */\n        if (true) {\n            // eslint-disable-next-line no-console\n            console.error(error);\n        }\n    }\n    return null;\n}\nfunction convert(input, options) {\n    if (options === void 0) { options = {}; }\n    if (typeof input === 'string') {\n        return convertFromString(input, options);\n    }\n    if (input instanceof Node) {\n        return convertFromNode(input, options);\n    }\n    return null;\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-from-dom/esm/index.js\n");

/***/ }),

/***/ "./node_modules/react-inlinesvg/esm/helpers.js":
/*!*****************************************************!*\
  !*** ./node_modules/react-inlinesvg/esm/helpers.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"STATUS\": function() { return /* binding */ STATUS; },\n/* harmony export */   \"canUseDOM\": function() { return /* binding */ canUseDOM; },\n/* harmony export */   \"isSupportedEnvironment\": function() { return /* binding */ isSupportedEnvironment; },\n/* harmony export */   \"supportsInlineSVG\": function() { return /* binding */ supportsInlineSVG; },\n/* harmony export */   \"randomString\": function() { return /* binding */ randomString; },\n/* harmony export */   \"removeProperties\": function() { return /* binding */ removeProperties; }\n/* harmony export */ });\n/* harmony import */ var exenv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! exenv */ \"./node_modules/exenv/index.js\");\n/* harmony import */ var exenv__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(exenv__WEBPACK_IMPORTED_MODULE_0__);\n\nvar STATUS = {\n    FAILED: 'failed',\n    LOADED: 'loaded',\n    LOADING: 'loading',\n    PENDING: 'pending',\n    READY: 'ready',\n    UNSUPPORTED: 'unsupported',\n};\nfunction canUseDOM() {\n    return exenv__WEBPACK_IMPORTED_MODULE_0__.canUseDOM;\n}\nfunction isSupportedEnvironment() {\n    return supportsInlineSVG() && typeof window !== 'undefined' && window !== null;\n}\nfunction supportsInlineSVG() {\n    /* istanbul ignore next */\n    if (!document) {\n        return false;\n    }\n    var div = document.createElement('div');\n    div.innerHTML = '<svg />';\n    return !!div.firstChild && div.firstChild.namespaceURI === 'http://www.w3.org/2000/svg';\n}\nfunction randomString(length) {\n    var letters = 'abcdefghijklmnopqrstuvwxyz';\n    var numbers = '1234567890';\n    var charset = \"\" + letters + letters.toUpperCase() + numbers;\n    var randomCharacter = function (character) {\n        return character[Math.floor(Math.random() * character.length)];\n    };\n    var R = '';\n    for (var i = 0; i < length; i++) {\n        R += randomCharacter(charset);\n    }\n    return R;\n}\n/**\n *  Remove properties from an object\n */\nfunction removeProperties(input) {\n    var filter = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        filter[_i - 1] = arguments[_i];\n    }\n    var output = {};\n    for (var key in input) {\n        /* istanbul ignore else */\n        if ({}.hasOwnProperty.call(input, key)) {\n            if (!filter.includes(key)) {\n                output[key] = input[key];\n            }\n        }\n    }\n    return output;\n}\n//# sourceMappingURL=helpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5saW5lc3ZnL2VzbS9oZWxwZXJzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQW1EO0FBQzVDO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFdBQVcsNENBQWE7QUFDeEI7QUFDTztBQUNQO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFlBQVk7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EscUJBQXFCLHVCQUF1QjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlubGluZXN2Zy9lc20vaGVscGVycy5qcz8zMmRmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNhblVzZURPTSBhcyBjYW5Vc2VET01GbGFnIH0gZnJvbSAnZXhlbnYnO1xuZXhwb3J0IHZhciBTVEFUVVMgPSB7XG4gICAgRkFJTEVEOiAnZmFpbGVkJyxcbiAgICBMT0FERUQ6ICdsb2FkZWQnLFxuICAgIExPQURJTkc6ICdsb2FkaW5nJyxcbiAgICBQRU5ESU5HOiAncGVuZGluZycsXG4gICAgUkVBRFk6ICdyZWFkeScsXG4gICAgVU5TVVBQT1JURUQ6ICd1bnN1cHBvcnRlZCcsXG59O1xuZXhwb3J0IGZ1bmN0aW9uIGNhblVzZURPTSgpIHtcbiAgICByZXR1cm4gY2FuVXNlRE9NRmxhZztcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1N1cHBvcnRlZEVudmlyb25tZW50KCkge1xuICAgIHJldHVybiBzdXBwb3J0c0lubGluZVNWRygpICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdyAhPT0gbnVsbDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzdXBwb3J0c0lubGluZVNWRygpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGlmICghZG9jdW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGl2LmlubmVySFRNTCA9ICc8c3ZnIC8+JztcbiAgICByZXR1cm4gISFkaXYuZmlyc3RDaGlsZCAmJiBkaXYuZmlyc3RDaGlsZC5uYW1lc3BhY2VVUkkgPT09ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XG59XG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tU3RyaW5nKGxlbmd0aCkge1xuICAgIHZhciBsZXR0ZXJzID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6JztcbiAgICB2YXIgbnVtYmVycyA9ICcxMjM0NTY3ODkwJztcbiAgICB2YXIgY2hhcnNldCA9IFwiXCIgKyBsZXR0ZXJzICsgbGV0dGVycy50b1VwcGVyQ2FzZSgpICsgbnVtYmVycztcbiAgICB2YXIgcmFuZG9tQ2hhcmFjdGVyID0gZnVuY3Rpb24gKGNoYXJhY3Rlcikge1xuICAgICAgICByZXR1cm4gY2hhcmFjdGVyW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNoYXJhY3Rlci5sZW5ndGgpXTtcbiAgICB9O1xuICAgIHZhciBSID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBSICs9IHJhbmRvbUNoYXJhY3RlcihjaGFyc2V0KTtcbiAgICB9XG4gICAgcmV0dXJuIFI7XG59XG4vKipcbiAqICBSZW1vdmUgcHJvcGVydGllcyBmcm9tIGFuIG9iamVjdFxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlUHJvcGVydGllcyhpbnB1dCkge1xuICAgIHZhciBmaWx0ZXIgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBmaWx0ZXJbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBvdXRwdXQgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gaW5wdXQpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgaWYgKHt9Lmhhc093blByb3BlcnR5LmNhbGwoaW5wdXQsIGtleSkpIHtcbiAgICAgICAgICAgIGlmICghZmlsdGVyLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXRba2V5XSA9IGlucHV0W2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlbHBlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-inlinesvg/esm/helpers.js\n");

/***/ }),

/***/ "./node_modules/react-inlinesvg/esm/index.js":
/*!***************************************************!*\
  !*** ./node_modules/react-inlinesvg/esm/index.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cacheStore\": function() { return /* binding */ cacheStore; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_from_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-from-dom */ \"./node_modules/react-from-dom/esm/index.js\");\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers */ \"./node_modules/react-inlinesvg/esm/helpers.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types */ \"./node_modules/react-inlinesvg/esm/types.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _types__WEBPACK_IMPORTED_MODULE_3__) if([\"default\",\"cacheStore\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _types__WEBPACK_IMPORTED_MODULE_3__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (undefined && undefined.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\n\n\n\nvar cacheStore = Object.create(null);\nvar InlineSVG = /** @class */ (function (_super) {\n    __extends(InlineSVG, _super);\n    function InlineSVG(props) {\n        var _this = _super.call(this, props) || this;\n        _this.isActive = false;\n        _this.handleCacheQueue = function (content) {\n            /* istanbul ignore else */\n            if (typeof content === 'string') {\n                _this.handleLoad(content);\n                return;\n            }\n            _this.handleError(content);\n        };\n        _this.handleLoad = function (content) {\n            /* istanbul ignore else */\n            if (_this.isActive) {\n                _this.setState({\n                    content: content,\n                    status: _helpers__WEBPACK_IMPORTED_MODULE_1__.STATUS.LOADED,\n                }, _this.getElement);\n            }\n        };\n        _this.handleError = function (error) {\n            var onError = _this.props.onError;\n            var status = error.message === 'Browser does not support SVG' ? _helpers__WEBPACK_IMPORTED_MODULE_1__.STATUS.UNSUPPORTED : _helpers__WEBPACK_IMPORTED_MODULE_1__.STATUS.FAILED;\n            /* istanbul ignore else */\n            if (_this.isActive) {\n                _this.setState({ status: status }, function () {\n                    /* istanbul ignore else */\n                    if (typeof onError === 'function') {\n                        onError(error);\n                    }\n                });\n            }\n        };\n        _this.request = function () {\n            var _a = _this.props, cacheRequests = _a.cacheRequests, fetchOptions = _a.fetchOptions, src = _a.src;\n            try {\n                if (cacheRequests) {\n                    cacheStore[src] = { content: '', status: _helpers__WEBPACK_IMPORTED_MODULE_1__.STATUS.LOADING, queue: [] };\n                }\n                return fetch(src, fetchOptions)\n                    .then(function (response) {\n                    var contentType = response.headers.get('content-type');\n                    var _a = __read((contentType || '').split(/ ?; ?/), 1), fileType = _a[0];\n                    if (response.status > 299) {\n                        throw new Error('Not found');\n                    }\n                    if (!['image/svg+xml', 'text/plain'].some(function (d) { return fileType.indexOf(d) >= 0; })) {\n                        throw new Error(\"Content type isn't valid: \" + fileType);\n                    }\n                    return response.text();\n                })\n                    .then(function (content) {\n                    var currentSrc = _this.props.src;\n                    // the current src don't match the previous one, skipping...\n                    if (src !== currentSrc) {\n                        return;\n                    }\n                    _this.handleLoad(content);\n                    /* istanbul ignore else */\n                    if (cacheRequests) {\n                        var cache = cacheStore[src];\n                        /* istanbul ignore else */\n                        if (cache) {\n                            cache.content = content;\n                            cache.status = _helpers__WEBPACK_IMPORTED_MODULE_1__.STATUS.LOADED;\n                            cache.queue = cache.queue.filter(function (cb) {\n                                cb(content);\n                                return false;\n                            });\n                        }\n                    }\n                })\n                    .catch(function (error) {\n                    _this.handleError(error);\n                    /* istanbul ignore else */\n                    if (cacheRequests) {\n                        var cache = cacheStore[src];\n                        /* istanbul ignore else */\n                        if (cache) {\n                            cache.queue.forEach(function (cb) {\n                                cb(error);\n                            });\n                            delete cacheStore[src];\n                        }\n                    }\n                });\n            }\n            catch (error) {\n                return _this.handleError(new Error(error.message));\n            }\n        };\n        _this.state = {\n            content: '',\n            element: null,\n            hasCache: !!props.cacheRequests && !!cacheStore[props.src],\n            status: _helpers__WEBPACK_IMPORTED_MODULE_1__.STATUS.PENDING,\n        };\n        _this.hash = props.uniqueHash || (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.randomString)(8);\n        return _this;\n    }\n    InlineSVG.prototype.componentDidMount = function () {\n        this.isActive = true;\n        if (!(0,_helpers__WEBPACK_IMPORTED_MODULE_1__.canUseDOM)()) {\n            return;\n        }\n        var status = this.state.status;\n        var src = this.props.src;\n        try {\n            /* istanbul ignore else */\n            if (status === _helpers__WEBPACK_IMPORTED_MODULE_1__.STATUS.PENDING) {\n                /* istanbul ignore else */\n                if (!(0,_helpers__WEBPACK_IMPORTED_MODULE_1__.isSupportedEnvironment)()) {\n                    throw new Error('Browser does not support SVG');\n                }\n                /* istanbul ignore else */\n                if (!src) {\n                    throw new Error('Missing src');\n                }\n                this.load();\n            }\n        }\n        catch (error) {\n            this.handleError(error);\n        }\n    };\n    InlineSVG.prototype.componentDidUpdate = function (prevProps, prevState) {\n        if (!(0,_helpers__WEBPACK_IMPORTED_MODULE_1__.canUseDOM)()) {\n            return;\n        }\n        var _a = this.state, hasCache = _a.hasCache, status = _a.status;\n        var _b = this.props, onLoad = _b.onLoad, src = _b.src;\n        if (prevState.status !== _helpers__WEBPACK_IMPORTED_MODULE_1__.STATUS.READY && status === _helpers__WEBPACK_IMPORTED_MODULE_1__.STATUS.READY) {\n            /* istanbul ignore else */\n            if (onLoad) {\n                onLoad(src, hasCache);\n            }\n        }\n        if (prevProps.src !== src) {\n            if (!src) {\n                this.handleError(new Error('Missing src'));\n                return;\n            }\n            this.load();\n        }\n    };\n    InlineSVG.prototype.componentWillUnmount = function () {\n        this.isActive = false;\n    };\n    InlineSVG.prototype.processSVG = function () {\n        var content = this.state.content;\n        var preProcessor = this.props.preProcessor;\n        if (preProcessor) {\n            return preProcessor(content);\n        }\n        return content;\n    };\n    InlineSVG.prototype.updateSVGAttributes = function (node) {\n        var _this = this;\n        var _a = this.props, _b = _a.baseURL, baseURL = _b === void 0 ? '' : _b, uniquifyIDs = _a.uniquifyIDs;\n        var replaceableAttributes = ['id', 'href', 'xlink:href', 'xlink:role', 'xlink:arcrole'];\n        var linkAttributes = ['href', 'xlink:href'];\n        var isDataValue = function (name, value) {\n            return linkAttributes.indexOf(name) >= 0 && (value ? value.indexOf('#') < 0 : false);\n        };\n        if (!uniquifyIDs) {\n            return node;\n        }\n        __spreadArray([], __read(node.children)).map(function (d) {\n            if (d.attributes && d.attributes.length) {\n                var attributes_1 = Object.values(d.attributes).map(function (a) {\n                    var attr = a;\n                    var match = a.value.match(/url\\((.*?)\\)/);\n                    if (match && match[1]) {\n                        attr.value = a.value.replace(match[0], \"url(\" + baseURL + match[1] + \"__\" + _this.hash + \")\");\n                    }\n                    return attr;\n                });\n                replaceableAttributes.forEach(function (r) {\n                    var attribute = attributes_1.find(function (a) { return a.name === r; });\n                    if (attribute && !isDataValue(r, attribute.value)) {\n                        attribute.value = attribute.value + \"__\" + _this.hash;\n                    }\n                });\n            }\n            if (d.children.length) {\n                return _this.updateSVGAttributes(d);\n            }\n            return d;\n        });\n        return node;\n    };\n    InlineSVG.prototype.getNode = function () {\n        var _a = this.props, description = _a.description, title = _a.title;\n        try {\n            var svgText = this.processSVG();\n            var node = (0,react_from_dom__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(svgText, { nodeOnly: true });\n            if (!node || !(node instanceof SVGSVGElement)) {\n                throw new Error('Could not convert the src to a DOM Node');\n            }\n            var svg = this.updateSVGAttributes(node);\n            if (description) {\n                var originalDesc = svg.querySelector('desc');\n                if (originalDesc && originalDesc.parentNode) {\n                    originalDesc.parentNode.removeChild(originalDesc);\n                }\n                var descElement = document.createElement('desc');\n                descElement.innerHTML = description;\n                svg.prepend(descElement);\n            }\n            if (title) {\n                var originalTitle = svg.querySelector('title');\n                if (originalTitle && originalTitle.parentNode) {\n                    originalTitle.parentNode.removeChild(originalTitle);\n                }\n                var titleElement = document.createElement('title');\n                titleElement.innerHTML = title;\n                svg.prepend(titleElement);\n            }\n            return svg;\n        }\n        catch (error) {\n            return this.handleError(error);\n        }\n    };\n    InlineSVG.prototype.getElement = function () {\n        try {\n            var node = this.getNode();\n            var element = (0,react_from_dom__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(node);\n            if (!element || !react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(element)) {\n                throw new Error('Could not convert the src to a React element');\n            }\n            this.setState({\n                element: element,\n                status: _helpers__WEBPACK_IMPORTED_MODULE_1__.STATUS.READY,\n            });\n        }\n        catch (error) {\n            this.handleError(new Error(error.message));\n        }\n    };\n    InlineSVG.prototype.load = function () {\n        var _this = this;\n        /* istanbul ignore else */\n        if (this.isActive) {\n            this.setState({\n                content: '',\n                element: null,\n                status: _helpers__WEBPACK_IMPORTED_MODULE_1__.STATUS.LOADING,\n            }, function () {\n                var _a = _this.props, cacheRequests = _a.cacheRequests, src = _a.src;\n                var cache = cacheRequests && cacheStore[src];\n                if (cache) {\n                    /* istanbul ignore else */\n                    if (cache.status === _helpers__WEBPACK_IMPORTED_MODULE_1__.STATUS.LOADING) {\n                        cache.queue.push(_this.handleCacheQueue);\n                    }\n                    else if (cache.status === _helpers__WEBPACK_IMPORTED_MODULE_1__.STATUS.LOADED) {\n                        _this.handleLoad(cache.content);\n                    }\n                    return;\n                }\n                var dataURI = src.match(/data:image\\/svg[^,]*?(;base64)?,(.*)/);\n                var inlineSrc;\n                if (dataURI) {\n                    inlineSrc = dataURI[1] ? atob(dataURI[2]) : decodeURIComponent(dataURI[2]);\n                }\n                else if (src.indexOf('<svg') >= 0) {\n                    inlineSrc = src;\n                }\n                if (inlineSrc) {\n                    _this.handleLoad(inlineSrc);\n                    return;\n                }\n                _this.request();\n            });\n        }\n    };\n    InlineSVG.prototype.render = function () {\n        var _a = this.state, element = _a.element, status = _a.status;\n        var _b = this.props, _c = _b.children, children = _c === void 0 ? null : _c, innerRef = _b.innerRef, _d = _b.loader, loader = _d === void 0 ? null : _d;\n        var elementProps = (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.removeProperties)(this.props, 'baseURL', 'cacheRequests', 'children', 'description', 'fetchOptions', 'innerRef', 'loader', 'onError', 'onLoad', 'preProcessor', 'src', 'title', 'uniqueHash', 'uniquifyIDs');\n        if (!(0,_helpers__WEBPACK_IMPORTED_MODULE_1__.canUseDOM)()) {\n            return loader;\n        }\n        if (element) {\n            return react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(element, __assign({ ref: innerRef }, elementProps));\n        }\n        if ([_helpers__WEBPACK_IMPORTED_MODULE_1__.STATUS.UNSUPPORTED, _helpers__WEBPACK_IMPORTED_MODULE_1__.STATUS.FAILED].indexOf(status) > -1) {\n            return children;\n        }\n        return loader;\n    };\n    InlineSVG.defaultProps = {\n        cacheRequests: true,\n        uniquifyIDs: false,\n    };\n    return InlineSVG;\n}(react__WEBPACK_IMPORTED_MODULE_0__.PureComponent));\n/* harmony default export */ __webpack_exports__[\"default\"] = (InlineSVG);\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-inlinesvg/esm/index.js\n");

/***/ }),

/***/ "./node_modules/react-inlinesvg/esm/types.js":
/*!***************************************************!*\
  !*** ./node_modules/react-inlinesvg/esm/types.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5saW5lc3ZnL2VzbS90eXBlcy5qcy5qcyIsIm1hcHBpbmdzIjoiO0FBQVU7QUFDViIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5saW5lc3ZnL2VzbS90eXBlcy5qcz9iYWVlIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-inlinesvg/esm/types.js\n");

/***/ }),

/***/ "./node_modules/wheel/index.js":
/*!*************************************!*\
  !*** ./node_modules/wheel/index.js ***!
  \*************************************/
/***/ (function(module) {

eval("/**\n * This module used to unify mouse wheel behavior between different browsers in 2014\n * Now it's just a wrapper around addEventListener('wheel');\n *\n * Usage:\n *  var addWheelListener = require('wheel').addWheelListener;\n *  var removeWheelListener = require('wheel').removeWheelListener;\n *  addWheelListener(domElement, function (e) {\n *    // mouse wheel event\n *  });\n *  removeWheelListener(domElement, function);\n */\n\nmodule.exports = addWheelListener;\n\n// But also expose \"advanced\" api with unsubscribe:\nmodule.exports.addWheelListener = addWheelListener;\nmodule.exports.removeWheelListener = removeWheelListener;\n\n\nfunction addWheelListener(element, listener, useCapture) {\n  element.addEventListener('wheel', listener, useCapture);\n}\n\nfunction removeWheelListener( element, listener, useCapture ) {\n  element.removeEventListener('wheel', listener, useCapture);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2hlZWwvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSwrQkFBK0I7QUFDL0Isa0NBQWtDOzs7QUFHbEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvd2hlZWwvaW5kZXguanM/MTc1MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgbW9kdWxlIHVzZWQgdG8gdW5pZnkgbW91c2Ugd2hlZWwgYmVoYXZpb3IgYmV0d2VlbiBkaWZmZXJlbnQgYnJvd3NlcnMgaW4gMjAxNFxuICogTm93IGl0J3MganVzdCBhIHdyYXBwZXIgYXJvdW5kIGFkZEV2ZW50TGlzdGVuZXIoJ3doZWVsJyk7XG4gKlxuICogVXNhZ2U6XG4gKiAgdmFyIGFkZFdoZWVsTGlzdGVuZXIgPSByZXF1aXJlKCd3aGVlbCcpLmFkZFdoZWVsTGlzdGVuZXI7XG4gKiAgdmFyIHJlbW92ZVdoZWVsTGlzdGVuZXIgPSByZXF1aXJlKCd3aGVlbCcpLnJlbW92ZVdoZWVsTGlzdGVuZXI7XG4gKiAgYWRkV2hlZWxMaXN0ZW5lcihkb21FbGVtZW50LCBmdW5jdGlvbiAoZSkge1xuICogICAgLy8gbW91c2Ugd2hlZWwgZXZlbnRcbiAqICB9KTtcbiAqICByZW1vdmVXaGVlbExpc3RlbmVyKGRvbUVsZW1lbnQsIGZ1bmN0aW9uKTtcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFkZFdoZWVsTGlzdGVuZXI7XG5cbi8vIEJ1dCBhbHNvIGV4cG9zZSBcImFkdmFuY2VkXCIgYXBpIHdpdGggdW5zdWJzY3JpYmU6XG5tb2R1bGUuZXhwb3J0cy5hZGRXaGVlbExpc3RlbmVyID0gYWRkV2hlZWxMaXN0ZW5lcjtcbm1vZHVsZS5leHBvcnRzLnJlbW92ZVdoZWVsTGlzdGVuZXIgPSByZW1vdmVXaGVlbExpc3RlbmVyO1xuXG5cbmZ1bmN0aW9uIGFkZFdoZWVsTGlzdGVuZXIoZWxlbWVudCwgbGlzdGVuZXIsIHVzZUNhcHR1cmUpIHtcbiAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd3aGVlbCcsIGxpc3RlbmVyLCB1c2VDYXB0dXJlKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlV2hlZWxMaXN0ZW5lciggZWxlbWVudCwgbGlzdGVuZXIsIHVzZUNhcHR1cmUgKSB7XG4gIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2hlZWwnLCBsaXN0ZW5lciwgdXNlQ2FwdHVyZSk7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/wheel/index.js\n");

/***/ }),

/***/ "./pages/slides_files.json":
/*!*********************************!*\
  !*** ./pages/slides_files.json ***!
  \*********************************/
/***/ (function(module) {

"use strict";
module.exports = JSON.parse('["tiger2.svg","nRF52.svg","UWB.svg","Linux_kernel_map.svg","long_diag2.svg","tiger.svg","vintage-flourish-divider-7.svg","nRF52.svg","tiger.svg","long_diag.svg","vintage-flourish-divider-7.svg","nRF52.svg","tiger.svg","long_diag.svg","vintage-flourish-divider-7.svg","tiger.svg","long_diag.svg","vintage-flourish-divider-7.svg"]');

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["pages/_app","main"], function() { return __webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2F&absolutePagePath=D%3A%5CDev%5Cweb%5Cnext-svg%5Cpages%5Cindex.js!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);